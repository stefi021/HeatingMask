
HeatingMask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007858  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080079f8  080079f8  000089f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa0  08007aa0  00008aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa8  08007aa8  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00008aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007ab0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001309c  20000080  08007b30  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001311c  08007b30  0000911c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001371f  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb4  00000000  00000000  0001c7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8e  00000000  00000000  000208f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f2e  00000000  00000000  00021686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014504  00000000  00000000  0003b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a344b  00000000  00000000  0004fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005174  00000000  00000000  000f2f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f80bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079e0 	.word	0x080079e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080079e0 	.word	0x080079e0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fcfa 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f80e 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f9b8 	bl	80011c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 f996 	bl	8001188 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e5c:	f000 f872 	bl	8000f44 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 f960 	bl	8001124 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e64:	f000 f906 	bl	8001074 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initTasks();
 8000e68:	f004 fb7c 	bl	8005564 <initTasks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <main+0x24>

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	@ 0x50
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	2230      	movs	r2, #48	@ 0x30
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 f8ec 	bl	800705c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <SystemClock_Config+0xcc>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	4a27      	ldr	r2, [pc, #156]	@ (8000f3c <SystemClock_Config+0xcc>)
 8000e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <SystemClock_Config+0xcc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <SystemClock_Config+0xd0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ebc:	4a20      	ldr	r2, [pc, #128]	@ (8000f40 <SystemClock_Config+0xd0>)
 8000ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ee8:	2354      	movs	r3, #84	@ 0x54
 8000eea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 ff57 	bl	8002dac <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f04:	f000 f9ca 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2102      	movs	r1, #2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f9b9 	bl	800329c <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f30:	f000 f9b4 	bl	800129c <Error_Handler>
  }
}
 8000f34:	bf00      	nop
 8000f36:	3750      	adds	r7, #80	@ 0x50
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40007000 	.word	0x40007000

08000f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f56:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f58:	4a44      	ldr	r2, [pc, #272]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f5c:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f64:	4b40      	ldr	r3, [pc, #256]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f70:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f76:	4b3c      	ldr	r3, [pc, #240]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f84:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f86:	4a3a      	ldr	r2, [pc, #232]	@ (8001070 <MX_ADC1_Init+0x12c>)
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000f90:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f92:	2206      	movs	r2, #6
 8000f94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f96:	4b34      	ldr	r3, [pc, #208]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	4830      	ldr	r0, [pc, #192]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000fa6:	f000 fc8f 	bl	80018c8 <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 f974 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4828      	ldr	r0, [pc, #160]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000fc6:	f000 fdd1 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd0:	f000 f964 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fd4:	230b      	movs	r3, #11
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4821      	ldr	r0, [pc, #132]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000fe2:	f000 fdc3 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fec:	f000 f956 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481a      	ldr	r0, [pc, #104]	@ (8001068 <MX_ADC1_Init+0x124>)
 8000ffe:	f000 fdb5 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001008:	f000 f948 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800100c:	230d      	movs	r3, #13
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4813      	ldr	r0, [pc, #76]	@ (8001068 <MX_ADC1_Init+0x124>)
 800101a:	f000 fda7 	bl	8001b6c <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001024:	f000 f93a 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001028:	230e      	movs	r3, #14
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800102c:	2305      	movs	r3, #5
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <MX_ADC1_Init+0x124>)
 8001036:	f000 fd99 	bl	8001b6c <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001040:	f000 f92c 	bl	800129c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001044:	230f      	movs	r3, #15
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001048:	2306      	movs	r3, #6
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_ADC1_Init+0x124>)
 8001052:	f000 fd8b 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800105c:	f000 f91e 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000009c 	.word	0x2000009c
 800106c:	40012000 	.word	0x40012000
 8001070:	0f000001 	.word	0x0f000001

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001096:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <MX_TIM2_Init+0xac>)
 8001098:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800109c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010ac:	f241 0267 	movw	r2, #4199	@ 0x1067
 80010b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010c0:	f002 fc54 	bl	800396c <HAL_TIM_PWM_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010ca:	f000 f8e7 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	@ (8001120 <MX_TIM2_Init+0xac>)
 80010de:	f003 f95d 	bl	800439c <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010e8:	f000 f8d8 	bl	800129c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ec:	2360      	movs	r3, #96	@ 0x60
 80010ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	4807      	ldr	r0, [pc, #28]	@ (8001120 <MX_TIM2_Init+0xac>)
 8001104:	f002 fe22 	bl	8003d4c <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800110e:	f000 f8c5 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <MX_TIM2_Init+0xac>)
 8001114:	f000 f986 	bl	8001424 <HAL_TIM_MspPostInit>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000144 	.word	0x20000144

08001124 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <MX_USART1_UART_Init+0x60>)
 800112c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	4809      	ldr	r0, [pc, #36]	@ (8001180 <MX_USART1_UART_Init+0x5c>)
 800115c:	f003 f9a0 	bl	80044a0 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f000 f899 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2025      	movs	r0, #37	@ 0x25
 8001170:	f001 f854 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001174:	2025      	movs	r0, #37	@ 0x25
 8001176:	f001 f86d 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000018c 	.word	0x2000018c
 8001184:	40011000 	.word	0x40011000

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <MX_DMA_Init+0x3c>)
 8001198:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_DMA_Init+0x3c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2038      	movs	r0, #56	@ 0x38
 80011b0:	f001 f834 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b4:	2038      	movs	r0, #56	@ 0x38
 80011b6:	f001 f84d 	bl	8002254 <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a22      	ldr	r2, [pc, #136]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <MX_GPIO_Init+0xa8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_GPIO_Init+0xa8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_GPIO_Init+0xa8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <MX_GPIO_Init+0xa8>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <MX_GPIO_Init+0xa8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800124e:	231e      	movs	r3, #30
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_GPIO_Init+0xac>)
 8001262:	f001 fc07 	bl	8002a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	@ 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800128a:	f000 fafd 	bl	8001888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40000c00 	.word	0x40000c00

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <HAL_ADC_MspInit+0xd8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d156      	bne.n	80013c8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_ADC_MspInit+0xdc>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a2c      	ldr	r2, [pc, #176]	@ (80013d4 <HAL_ADC_MspInit+0xdc>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <HAL_ADC_MspInit+0xdc>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <HAL_ADC_MspInit+0xdc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <HAL_ADC_MspInit+0xdc>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_ADC_MspInit+0xdc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001352:	233f      	movs	r3, #63	@ 0x3f
 8001354:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	481c      	ldr	r0, [pc, #112]	@ (80013d8 <HAL_ADC_MspInit+0xe0>)
 8001366:	f001 fb85 	bl	8002a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 800136c:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <HAL_ADC_MspInit+0xe8>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 8001384:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001388:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 800138c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001390:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 8001394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001398:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013ac:	480b      	ldr	r0, [pc, #44]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 80013ae:	f000 ff5f 	bl	8002270 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80013b8:	f7ff ff70 	bl	800129c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 80013c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013c2:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <HAL_ADC_MspInit+0xe4>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40012000 	.word	0x40012000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	200000e4 	.word	0x200000e4
 80013e0:	40026410 	.word	0x40026410

080013e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f4:	d10d      	bne.n	8001412 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_TIM_PWM_MspInit+0x3c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <HAL_TIM_PWM_MspInit+0x3c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_TIM_PWM_MspInit+0x3c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001444:	d11d      	bne.n	8001482 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_TIM_MspPostInit+0x68>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_TIM_MspPostInit+0x68>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_TIM_MspPostInit+0x68>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001462:	2301      	movs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <HAL_TIM_MspPostInit+0x6c>)
 800147e:	f001 faf9 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <HAL_UART_MspInit+0x94>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d134      	bne.n	8001520 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a14      	ldr	r2, [pc, #80]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001500:	2307      	movs	r3, #7
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	@ (8001530 <HAL_UART_MspInit+0x9c>)
 800150c:	f001 fab2 	bl	8002a74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2025      	movs	r0, #37	@ 0x25
 8001516:	f000 fe81 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151a:	2025      	movs	r0, #37	@ 0x25
 800151c:	f000 fe9a 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	@ 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <HAL_InitTick+0xe4>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	4a32      	ldr	r2, [pc, #200]	@ (8001618 <HAL_InitTick+0xe4>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6413      	str	r3, [r2, #64]	@ 0x40
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <HAL_InitTick+0xe4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f8b6 	bl	80036dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d103      	bne.n	8001582 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800157a:	f002 f887 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800157e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001580:	e004      	b.n	800158c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001582:	f002 f883 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8001586:	4603      	mov	r3, r0
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800158c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158e:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_InitTick+0xe8>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	3b01      	subs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <HAL_InitTick+0xec>)
 800159c:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <HAL_InitTick+0xf0>)
 800159e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <HAL_InitTick+0xec>)
 80015a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015a6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_InitTick+0xec>)
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_InitTick+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <HAL_InitTick+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_InitTick+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80015c0:	4817      	ldr	r0, [pc, #92]	@ (8001620 <HAL_InitTick+0xec>)
 80015c2:	f002 f8bd 	bl	8003740 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11b      	bne.n	800160c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <HAL_InitTick+0xec>)
 80015d6:	f002 f967 	bl	80038a8 <HAL_TIM_Base_Start_IT>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015e8:	2032      	movs	r0, #50	@ 0x32
 80015ea:	f000 fe33 	bl	8002254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d808      	bhi.n	8001606 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	2032      	movs	r0, #50	@ 0x32
 80015fa:	f000 fe0f 	bl	800221c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <HAL_InitTick+0xf4>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e002      	b.n	800160c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800160c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001610:	4618      	mov	r0, r3
 8001612:	3738      	adds	r7, #56	@ 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	431bde83 	.word	0x431bde83
 8001620:	200001d4 	.word	0x200001d4
 8001624:	40000c00 	.word	0x40000c00
 8001628:	20000004 	.word	0x20000004

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <USART1_IRQHandler+0x10>)
 800166a:	f002 ff8f 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000018c 	.word	0x2000018c

08001678 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <TIM5_IRQHandler+0x10>)
 800167e:	f002 fa75 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001d4 	.word	0x200001d4

0800168c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <DMA2_Stream0_IRQHandler+0x10>)
 8001692:	f000 ff85 	bl	80025a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000e4 	.word	0x200000e4

080016a0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <ITM_SendChar+0x48>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <ITM_SendChar+0x48>)
 80016b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016b4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <ITM_SendChar+0x4c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <ITM_SendChar+0x4c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80016c2:	bf00      	nop
 80016c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f8      	beq.n	80016c4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80016d2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000edfc 	.word	0xe000edfc
 80016ec:	e0000e00 	.word	0xe0000e00

080016f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
  }

  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ffab 	bl	80016a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
  }
  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800178a:	605a      	str	r2, [r3, #4]
  return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_isatty>:

int _isatty(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017f4:	f7ff ffea 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800181e:	f005 fc71 	bl	8007104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fb11 	bl	8000e48 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001834:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 8001838:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800183c:	2001311c 	.word	0x2001311c

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 fcca 	bl	8002206 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f7ff fe5e 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fd16 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	2000021c 	.word	0x2000021c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000021c 	.word	0x2000021c

080018c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e033      	b.n	8001946 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fd06 	bl	80012f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d118      	bne.n	8001938 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800190e:	f023 0302 	bic.w	r3, r3, #2
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa48 	bl	8001db0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
 8001936:	e001      	b.n	800193c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ADC_Start_DMA+0x1e>
 800196a:	2302      	movs	r3, #2
 800196c:	e0ce      	b.n	8001b0c <HAL_ADC_Start_DMA+0x1bc>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d018      	beq.n	80019b6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001994:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <HAL_ADC_Start_DMA+0x1c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5f      	ldr	r2, [pc, #380]	@ (8001b18 <HAL_ADC_Start_DMA+0x1c8>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0c9a      	lsrs	r2, r3, #18
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019a8:	e002      	b.n	80019b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f9      	bne.n	80019aa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019c4:	d107      	bne.n	80019d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019d4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	f040 8086 	bne.w	8001af2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a10:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a24:	d106      	bne.n	8001a34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f023 0206 	bic.w	r2, r3, #6
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a32:	e002      	b.n	8001a3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a42:	4b36      	ldr	r3, [pc, #216]	@ (8001b1c <HAL_ADC_Start_DMA+0x1cc>)
 8001a44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4a:	4a35      	ldr	r2, [pc, #212]	@ (8001b20 <HAL_ADC_Start_DMA+0x1d0>)
 8001a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a52:	4a34      	ldr	r2, [pc, #208]	@ (8001b24 <HAL_ADC_Start_DMA+0x1d4>)
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5a:	4a33      	ldr	r2, [pc, #204]	@ (8001b28 <HAL_ADC_Start_DMA+0x1d8>)
 8001a5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a76:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a86:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	334c      	adds	r3, #76	@ 0x4c
 8001a92:	4619      	mov	r1, r3
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f000 fc98 	bl	80023cc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d129      	bne.n	8001b0a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	e020      	b.n	8001b0a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <HAL_ADC_Start_DMA+0x1dc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11b      	bne.n	8001b0a <HAL_ADC_Start_DMA+0x1ba>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d114      	bne.n	8001b0a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	e00b      	b.n	8001b0a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f043 0210 	orr.w	r2, r3, #16
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	08001fa9 	.word	0x08001fa9
 8001b24:	08002063 	.word	0x08002063
 8001b28:	0800207f 	.word	0x0800207f
 8001b2c:	40012000 	.word	0x40012000

08001b30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1c>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e105      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x228>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	d925      	bls.n	8001be4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68d9      	ldr	r1, [r3, #12]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	3b1e      	subs	r3, #30
 8001bae:	2207      	movs	r2, #7
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	400a      	ands	r2, r1
 8001bbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68d9      	ldr	r1, [r3, #12]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4403      	add	r3, r0
 8001bd6:	3b1e      	subs	r3, #30
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	e022      	b.n	8001c2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	400a      	ands	r2, r1
 8001c06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6919      	ldr	r1, [r3, #16]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4403      	add	r3, r0
 8001c20:	409a      	lsls	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d824      	bhi.n	8001c7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3b05      	subs	r3, #5
 8001c44:	221f      	movs	r2, #31
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	400a      	ands	r2, r1
 8001c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b05      	subs	r3, #5
 8001c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c7a:	e04c      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d824      	bhi.n	8001cce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b23      	subs	r3, #35	@ 0x23
 8001c96:	221f      	movs	r2, #31
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b23      	subs	r3, #35	@ 0x23
 8001cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ccc:	e023      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b41      	subs	r3, #65	@ 0x41
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b41      	subs	r3, #65	@ 0x41
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d16:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <HAL_ADC_ConfigChannel+0x234>)
 8001d18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <HAL_ADC_ConfigChannel+0x238>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1cc>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b12      	cmp	r3, #18
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_ADC_ConfigChannel+0x238>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d123      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x21e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d003      	beq.n	8001d52 <HAL_ADC_ConfigChannel+0x1e6>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b11      	cmp	r3, #17
 8001d50:	d11b      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d111      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_ADC_ConfigChannel+0x23c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <HAL_ADC_ConfigChannel+0x240>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9a      	lsrs	r2, r3, #18
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f9      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40012300 	.word	0x40012300
 8001da4:	40012000 	.word	0x40012000
 8001da8:	20000000 	.word	0x20000000
 8001dac:	431bde83 	.word	0x431bde83

08001db0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db8:	4b79      	ldr	r3, [pc, #484]	@ (8001fa0 <ADC_Init+0x1f0>)
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	021a      	lsls	r2, r3, #8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6899      	ldr	r1, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <ADC_Init+0x1f4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d022      	beq.n	8001e8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	e00f      	b.n	8001eae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001eac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0202 	bic.w	r2, r2, #2
 8001ebc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6899      	ldr	r1, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
 8001ec8:	005a      	lsls	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001efa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	3b01      	subs	r3, #1
 8001f08:	035a      	lsls	r2, r3, #13
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	e007      	b.n	8001f24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	051a      	lsls	r2, r3, #20
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f66:	025a      	lsls	r2, r3, #9
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	029a      	lsls	r2, r3, #10
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40012300 	.word	0x40012300
 8001fa4:	0f000001 	.word	0x0f000001

08001fa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d13c      	bne.n	800203c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d12b      	bne.n	8002034 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d127      	bne.n	8002034 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d119      	bne.n	8002034 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0220 	bic.w	r2, r2, #32
 800200e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7ff fd7b 	bl	8001b30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800203a:	e00e      	b.n	800205a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff fd85 	bl	8001b58 <HAL_ADC_ErrorCallback>
}
 800204e:	e004      	b.n	800205a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7ff fd67 	bl	8001b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2240      	movs	r2, #64	@ 0x40
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0204 	orr.w	r2, r3, #4
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff fd5a 	bl	8001b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	@ (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	@ (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff4c 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222e:	f7ff ff61 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7ff ffb1 	bl	80021a0 <NVIC_EncodePriority>
 800223e:	4602      	mov	r2, r0
 8002240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff80 	bl	800214c <__NVIC_SetPriority>
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff54 	bl	8002110 <__NVIC_EnableIRQ>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fb18 	bl	80018b0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e099      	b.n	80023c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e00f      	b.n	80022ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff faff 	bl	80018b0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d908      	bls.n	80022ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e078      	b.n	80023c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_DMA_Init+0x158>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4313      	orrs	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0307 	bic.w	r3, r3, #7
 800234e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	2b04      	cmp	r3, #4
 8002360:	d117      	bne.n	8002392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb01 	bl	800297c <DMA_CheckFifoParam>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800238e:	2301      	movs	r3, #1
 8002390:	e016      	b.n	80023c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fab8 	bl	8002910 <DMA_CalcBaseAndBitshift>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	f010803f 	.word	0xf010803f

080023cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Start_IT+0x26>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e040      	b.n	8002474 <HAL_DMA_Start_IT+0xa8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12f      	bne.n	8002466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa4a 	bl	80028b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	223f      	movs	r2, #63	@ 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0216 	orr.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248a:	f7ff fa11 	bl	80018b0 <HAL_GetTick>
 800248e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2280      	movs	r2, #128	@ 0x80
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e052      	b.n	8002554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_DMA_Abort+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	e013      	b.n	8002528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002500:	f7ff f9d6 	bl	80018b0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d90c      	bls.n	8002528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e015      	b.n	8002554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e4      	bne.n	8002500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	223f      	movs	r2, #63	@ 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d004      	beq.n	800257a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00c      	b.n	8002594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ac:	4b8e      	ldr	r3, [pc, #568]	@ (80027e8 <HAL_DMA_IRQHandler+0x248>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a8e      	ldr	r2, [pc, #568]	@ (80027ec <HAL_DMA_IRQHandler+0x24c>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a9b      	lsrs	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2208      	movs	r2, #8
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01a      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	2208      	movs	r2, #8
 80025fa:	409a      	lsls	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	2201      	movs	r2, #1
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2204      	movs	r2, #4
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2204      	movs	r2, #4
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2210      	movs	r2, #16
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d043      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03c      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2210      	movs	r2, #16
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d024      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
 80026ce:	e01f      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e016      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2220      	movs	r2, #32
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808f 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8087 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	2220      	movs	r2, #32
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b05      	cmp	r3, #5
 8002748:	d136      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0216 	bic.w	r2, r2, #22
 8002758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <HAL_DMA_IRQHandler+0x1da>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0208 	bic.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	223f      	movs	r2, #63	@ 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d07e      	beq.n	80028ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
        }
        return;
 80027b6:	e079      	b.n	80028ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d031      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e02c      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
 80027e6:	bf00      	nop
 80027e8:	20000000 	.word	0x20000000
 80027ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e01e      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0210 	bic.w	r2, r2, #16
 800281e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	2b00      	cmp	r3, #0
 8002846:	d032      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d022      	beq.n	800289a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3301      	adds	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	d307      	bcc.n	8002888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f2      	bne.n	800286c <HAL_DMA_IRQHandler+0x2cc>
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80028ac:	bf00      	nop
    }
  }
}
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d108      	bne.n	80028f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028f2:	e007      	b.n	8002904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	3b10      	subs	r3, #16
 8002920:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <DMA_CalcBaseAndBitshift+0x64>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800292a:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <DMA_CalcBaseAndBitshift+0x68>)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d909      	bls.n	8002952 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002950:	e007      	b.n	8002962 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	aaaaaaab 	.word	0xaaaaaaab
 8002978:	08007a94 	.word	0x08007a94

0800297c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11f      	bne.n	80029d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d856      	bhi.n	8002a4a <DMA_CheckFifoParam+0xce>
 800299c:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <DMA_CheckFifoParam+0x28>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029c7 	.word	0x080029c7
 80029ac:	080029b5 	.word	0x080029b5
 80029b0:	08002a4b 	.word	0x08002a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d046      	beq.n	8002a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c4:	e043      	b.n	8002a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029ce:	d140      	bne.n	8002a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e03d      	b.n	8002a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029de:	d121      	bne.n	8002a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d837      	bhi.n	8002a56 <DMA_CheckFifoParam+0xda>
 80029e6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <DMA_CheckFifoParam+0x70>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a03 	.word	0x08002a03
 80029f4:	080029fd 	.word	0x080029fd
 80029f8:	08002a15 	.word	0x08002a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e030      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d025      	beq.n	8002a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a12:	e022      	b.n	8002a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a1c:	d11f      	bne.n	8002a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a22:	e01c      	b.n	8002a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d903      	bls.n	8002a32 <DMA_CheckFifoParam+0xb6>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d003      	beq.n	8002a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a30:	e018      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      break;
 8002a36:	e015      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00e      	beq.n	8002a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e00b      	b.n	8002a62 <DMA_CheckFifoParam+0xe6>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e00a      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e008      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e006      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e004      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
    }
  } 
  
  return status; 
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e159      	b.n	8002d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8148 	bne.w	8002d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a2 	beq.w	8002d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b57      	ldr	r3, [pc, #348]	@ (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	4a56      	ldr	r2, [pc, #344]	@ (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0a:	4b54      	ldr	r3, [pc, #336]	@ (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a52      	ldr	r2, [pc, #328]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a49      	ldr	r2, [pc, #292]	@ (8002d64 <HAL_GPIO_Init+0x2f0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x202>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a48      	ldr	r2, [pc, #288]	@ (8002d68 <HAL_GPIO_Init+0x2f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x1fe>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a47      	ldr	r2, [pc, #284]	@ (8002d6c <HAL_GPIO_Init+0x2f8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x1fa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a46      	ldr	r2, [pc, #280]	@ (8002d70 <HAL_GPIO_Init+0x2fc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x1f6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a45      	ldr	r2, [pc, #276]	@ (8002d74 <HAL_GPIO_Init+0x300>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x1f2>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e008      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c76:	2300      	movs	r3, #0
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f002 0203 	and.w	r2, r2, #3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4093      	lsls	r3, r2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c88:	4935      	ldr	r1, [pc, #212]	@ (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b38      	ldr	r3, [pc, #224]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a2f      	ldr	r2, [pc, #188]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cea:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d14:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d38:	4a0f      	ldr	r2, [pc, #60]	@ (8002d78 <HAL_GPIO_Init+0x304>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f aea2 	bls.w	8002a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	e001      	b.n	8002d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e267      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d075      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dca:	4b88      	ldr	r3, [pc, #544]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d112      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b82      	ldr	r3, [pc, #520]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05b      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x108>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d157      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e242      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x74>
 8002e12:	4b76      	ldr	r3, [pc, #472]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a75      	ldr	r2, [pc, #468]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x98>
 8002e2a:	4b70      	ldr	r3, [pc, #448]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e44:	4b69      	ldr	r3, [pc, #420]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a68      	ldr	r2, [pc, #416]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b66      	ldr	r3, [pc, #408]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fd24 	bl	80018b0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fd20 	bl	80018b0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e207      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xc0>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fd10 	bl	80018b0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fd0c 	bl	80018b0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1f3      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b51      	ldr	r3, [pc, #324]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0xe8>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b47      	ldr	r3, [pc, #284]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b44      	ldr	r3, [pc, #272]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b41      	ldr	r3, [pc, #260]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1c7      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4937      	ldr	r1, [pc, #220]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fcc5 	bl	80018b0 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fcc1 	bl	80018b0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1a8      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4925      	ldr	r1, [pc, #148]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fca4 	bl	80018b0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fca0 	bl	80018b0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e187      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d036      	beq.n	8003004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fc84 	bl	80018b0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe fc80 	bl	80018b0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e167      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x200>
 8002fca:	e01b      	b.n	8003004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fcc:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fc6d 	bl	80018b0 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	e00e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fda:	f7fe fc69 	bl	80018b0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d907      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e150      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	42470000 	.word	0x42470000
 8002ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	4b88      	ldr	r3, [pc, #544]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ea      	bne.n	8002fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8097 	beq.w	8003140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003016:	4b81      	ldr	r3, [pc, #516]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b7d      	ldr	r3, [pc, #500]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	4a7c      	ldr	r2, [pc, #496]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	@ 0x40
 8003032:	4b7a      	ldr	r3, [pc, #488]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b77      	ldr	r3, [pc, #476]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b74      	ldr	r3, [pc, #464]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a73      	ldr	r2, [pc, #460]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7fe fc29 	bl	80018b0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe fc25 	bl	80018b0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e10c      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b6a      	ldr	r3, [pc, #424]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x2ea>
 8003088:	4b64      	ldr	r3, [pc, #400]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a63      	ldr	r2, [pc, #396]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	@ 0x70
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x30c>
 800309e:	4b5f      	ldr	r3, [pc, #380]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a2:	4a5e      	ldr	r2, [pc, #376]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030aa:	4b5c      	ldr	r3, [pc, #368]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 80030b8:	4b58      	ldr	r3, [pc, #352]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	4a57      	ldr	r2, [pc, #348]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c4:	4b55      	ldr	r3, [pc, #340]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	4a54      	ldr	r2, [pc, #336]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fbea 	bl	80018b0 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe fbe6 	bl	80018b0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0cb      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	4b49      	ldr	r3, [pc, #292]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ee      	beq.n	80030e0 <HAL_RCC_OscConfig+0x334>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fe fbd4 	bl	80018b0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe fbd0 	bl	80018b0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0b5      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	4b3e      	ldr	r3, [pc, #248]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ee      	bne.n	800310c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	4a38      	ldr	r2, [pc, #224]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a1 	beq.w	800328c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314a:	4b34      	ldr	r3, [pc, #208]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d05c      	beq.n	8003210 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d141      	bne.n	80031e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <HAL_RCC_OscConfig+0x478>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fba4 	bl	80018b0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fba0 	bl	80018b0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e087      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b27      	ldr	r3, [pc, #156]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	491b      	ldr	r1, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HAL_RCC_OscConfig+0x478>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fb79 	bl	80018b0 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fb75 	bl	80018b0 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e05c      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x416>
 80031e0:	e054      	b.n	800328c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <HAL_RCC_OscConfig+0x478>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fb62 	bl	80018b0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fb5e 	bl	80018b0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e045      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x444>
 800320e:	e03d      	b.n	800328c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e038      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000
 8003224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCC_OscConfig+0x4ec>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d028      	beq.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d121      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d11a      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800325e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003260:	4293      	cmp	r3, r2
 8003262:	d111      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0cc      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b68      	ldr	r3, [pc, #416]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d90c      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b63      	ldr	r3, [pc, #396]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b8      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	4b59      	ldr	r3, [pc, #356]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a58      	ldr	r2, [pc, #352]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b50      	ldr	r3, [pc, #320]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	494d      	ldr	r1, [pc, #308]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d044      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b3f      	ldr	r3, [pc, #252]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e067      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b37      	ldr	r3, [pc, #220]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4934      	ldr	r1, [pc, #208]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe fa90 	bl	80018b0 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe fa8c 	bl	80018b0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d20c      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e032      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4916      	ldr	r1, [pc, #88]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490e      	ldr	r1, [pc, #56]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003422:	f000 f821 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8003426:	4602      	mov	r2, r0
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	490a      	ldr	r1, [pc, #40]	@ (800345c <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	5ccb      	ldrb	r3, [r1, r3]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800343e:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe f876 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00
 8003458:	40023800 	.word	0x40023800
 800345c:	08007a7c 	.word	0x08007a7c
 8003460:	20000000 	.word	0x20000000
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b094      	sub	sp, #80	@ 0x50
 800346e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	647b      	str	r3, [r7, #68]	@ 0x44
 8003474:	2300      	movs	r3, #0
 8003476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003478:	2300      	movs	r3, #0
 800347a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003480:	4b79      	ldr	r3, [pc, #484]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d00d      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x40>
 800348c:	2b08      	cmp	r3, #8
 800348e:	f200 80e1 	bhi.w	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800349a:	e0db      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b73      	ldr	r3, [pc, #460]	@ (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 800349e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80034a0:	e0db      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a2:	4b73      	ldr	r3, [pc, #460]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x208>)
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a6:	e0d8      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b6a      	ldr	r3, [pc, #424]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4621      	mov	r1, r4
 80034f4:	1a51      	subs	r1, r2, r1
 80034f6:	6139      	str	r1, [r7, #16]
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb63 0301 	sbc.w	r3, r3, r1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800350c:	4659      	mov	r1, fp
 800350e:	018b      	lsls	r3, r1, #6
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003516:	4651      	mov	r1, sl
 8003518:	018a      	lsls	r2, r1, #6
 800351a:	4651      	mov	r1, sl
 800351c:	ebb2 0801 	subs.w	r8, r2, r1
 8003520:	4659      	mov	r1, fp
 8003522:	eb63 0901 	sbc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	4623      	mov	r3, r4
 8003540:	eb18 0303 	adds.w	r3, r8, r3
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	462b      	mov	r3, r5
 8003548:	eb49 0303 	adc.w	r3, r9, r3
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355a:	4629      	mov	r1, r5
 800355c:	024b      	lsls	r3, r1, #9
 800355e:	4621      	mov	r1, r4
 8003560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003564:	4621      	mov	r1, r4
 8003566:	024a      	lsls	r2, r1, #9
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003578:	f7fd faee 	bl	8000b58 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003584:	e058      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b38      	ldr	r3, [pc, #224]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	2200      	movs	r2, #0
 800358e:	4618      	mov	r0, r3
 8003590:	4611      	mov	r1, r2
 8003592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
 800359c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	0159      	lsls	r1, r3, #5
 80035ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b2:	0150      	lsls	r0, r2, #5
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4641      	mov	r1, r8
 80035ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d8:	ebb2 040a 	subs.w	r4, r2, sl
 80035dc:	eb63 050b 	sbc.w	r5, r3, fp
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	00eb      	lsls	r3, r5, #3
 80035ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ee:	00e2      	lsls	r2, r4, #3
 80035f0:	4614      	mov	r4, r2
 80035f2:	461d      	mov	r5, r3
 80035f4:	4643      	mov	r3, r8
 80035f6:	18e3      	adds	r3, r4, r3
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	464b      	mov	r3, r9
 80035fc:	eb45 0303 	adc.w	r3, r5, r3
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360e:	4629      	mov	r1, r5
 8003610:	028b      	lsls	r3, r1, #10
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003618:	4621      	mov	r1, r4
 800361a:	028a      	lsls	r2, r1, #10
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003622:	2200      	movs	r2, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	61fa      	str	r2, [r7, #28]
 8003628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362c:	f7fd fa94 	bl	8000b58 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800364a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 8003656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800365c:	4618      	mov	r0, r3
 800365e:	3750      	adds	r7, #80	@ 0x50
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	007a1200 	.word	0x007a1200

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000000 	.word	0x20000000

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003690:	f7ff fff0 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	@ (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08007a8c 	.word	0x08007a8c

080036b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b8:	f7ff ffdc 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0b5b      	lsrs	r3, r3, #13
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	@ (80036d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08007a8c 	.word	0x08007a8c

080036dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	220f      	movs	r2, #15
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_RCC_GetClockConfig+0x5c>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0203 	and.w	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <HAL_RCC_GetClockConfig+0x5c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <HAL_RCC_GetClockConfig+0x5c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_RCC_GetClockConfig+0x5c>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800371e:	4b07      	ldr	r3, [pc, #28]	@ (800373c <HAL_RCC_GetClockConfig+0x60>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0207 	and.w	r2, r3, #7
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	40023c00 	.word	0x40023c00

08003740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e041      	b.n	80037d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f839 	bl	80037de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f000 fbce 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e03c      	b.n	8003886 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1e      	ldr	r2, [pc, #120]	@ (8003894 <HAL_TIM_Base_Start+0xa0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_TIM_Base_Start+0x5c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003826:	d013      	beq.n	8003850 <HAL_TIM_Base_Start+0x5c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_TIM_Base_Start+0xa4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_TIM_Base_Start+0x5c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	@ (800389c <HAL_TIM_Base_Start+0xa8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_TIM_Base_Start+0x5c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a17      	ldr	r2, [pc, #92]	@ (80038a0 <HAL_TIM_Base_Start+0xac>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_Base_Start+0x5c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a16      	ldr	r2, [pc, #88]	@ (80038a4 <HAL_TIM_Base_Start+0xb0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b06      	cmp	r3, #6
 8003860:	d010      	beq.n	8003884 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	e007      	b.n	8003884 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40014000 	.word	0x40014000

080038a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e044      	b.n	800394a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003958 <HAL_TIM_Base_Start_IT+0xb0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d018      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x6c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ea:	d013      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x6c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <HAL_TIM_Base_Start_IT+0xb4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00e      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x6c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a19      	ldr	r2, [pc, #100]	@ (8003960 <HAL_TIM_Base_Start_IT+0xb8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d009      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x6c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <HAL_TIM_Base_Start_IT+0xbc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x6c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <HAL_TIM_Base_Start_IT+0xc0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d111      	bne.n	8003938 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b06      	cmp	r3, #6
 8003924:	d010      	beq.n	8003948 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0201 	orr.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003936:	e007      	b.n	8003948 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40014000 	.word	0x40014000

0800396c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fd26 	bl	80013e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 fab8 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_TIM_PWM_Start+0x24>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e022      	b.n	8003a76 <HAL_TIM_PWM_Start+0x6a>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d109      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x3e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e015      	b.n	8003a76 <HAL_TIM_PWM_Start+0x6a>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d109      	bne.n	8003a64 <HAL_TIM_PWM_Start+0x58>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e008      	b.n	8003a76 <HAL_TIM_PWM_Start+0x6a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e068      	b.n	8003b50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0x82>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xaa>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x92>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xaa>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0xa2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xaa>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fc46 	bl	8004350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	@ (8003b58 <HAL_TIM_PWM_Start+0x14c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <HAL_TIM_PWM_Start+0x14c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x10e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af0:	d013      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x10e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <HAL_TIM_PWM_Start+0x150>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x10e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <HAL_TIM_PWM_Start+0x154>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x10e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a16      	ldr	r2, [pc, #88]	@ (8003b64 <HAL_TIM_PWM_Start+0x158>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_TIM_PWM_Start+0x10e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <HAL_TIM_PWM_Start+0x15c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d111      	bne.n	8003b3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b06      	cmp	r3, #6
 8003b2a:	d010      	beq.n	8003b4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	e007      	b.n	8003b4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40014000 	.word	0x40014000

08003b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d020      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01b      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f994 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f986 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f997 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01b      	beq.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0204 	mvn.w	r2, #4
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f96e 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f960 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f971 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d020      	beq.n	8003c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01b      	beq.n	8003c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0208 	mvn.w	r2, #8
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f948 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f93a 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f94b 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d020      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01b      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0210 	mvn.w	r2, #16
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f922 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f914 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f925 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0201 	mvn.w	r2, #1
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd fad0 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fbc8 	bl	800448c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8f6 	bl	8003f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00c      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0220 	mvn.w	r2, #32
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fb9a 	bl	8004478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0ae      	b.n	8003ec8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	f200 809f 	bhi.w	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003eb9 	.word	0x08003eb9
 8003d88:	08003eb9 	.word	0x08003eb9
 8003d8c:	08003eb9 	.word	0x08003eb9
 8003d90:	08003df5 	.word	0x08003df5
 8003d94:	08003eb9 	.word	0x08003eb9
 8003d98:	08003eb9 	.word	0x08003eb9
 8003d9c:	08003eb9 	.word	0x08003eb9
 8003da0:	08003e37 	.word	0x08003e37
 8003da4:	08003eb9 	.word	0x08003eb9
 8003da8:	08003eb9 	.word	0x08003eb9
 8003dac:	08003eb9 	.word	0x08003eb9
 8003db0:	08003e77 	.word	0x08003e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f93c 	bl	8004038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0208 	orr.w	r2, r2, #8
 8003dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	619a      	str	r2, [r3, #24]
      break;
 8003df2:	e064      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f982 	bl	8004104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6999      	ldr	r1, [r3, #24]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	619a      	str	r2, [r3, #24]
      break;
 8003e34:	e043      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f9cd 	bl	80041dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0208 	orr.w	r2, r2, #8
 8003e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0204 	bic.w	r2, r2, #4
 8003e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	61da      	str	r2, [r3, #28]
      break;
 8003e74:	e023      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fa17 	bl	80042b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69d9      	ldr	r1, [r3, #28]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	021a      	lsls	r2, r3, #8
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	61da      	str	r2, [r3, #28]
      break;
 8003eb6:	e002      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3a      	ldr	r2, [pc, #232]	@ (800401c <TIM_Base_SetConfig+0xfc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a37      	ldr	r2, [pc, #220]	@ (8004020 <TIM_Base_SetConfig+0x100>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a36      	ldr	r2, [pc, #216]	@ (8004024 <TIM_Base_SetConfig+0x104>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a35      	ldr	r2, [pc, #212]	@ (8004028 <TIM_Base_SetConfig+0x108>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800401c <TIM_Base_SetConfig+0xfc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01b      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d017      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	@ (8004020 <TIM_Base_SetConfig+0x100>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <TIM_Base_SetConfig+0x104>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00f      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	@ (8004028 <TIM_Base_SetConfig+0x108>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a25      	ldr	r2, [pc, #148]	@ (800402c <TIM_Base_SetConfig+0x10c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a24      	ldr	r2, [pc, #144]	@ (8004030 <TIM_Base_SetConfig+0x110>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	@ (8004034 <TIM_Base_SetConfig+0x114>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800401c <TIM_Base_SetConfig+0xfc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	611a      	str	r2, [r3, #16]
  }
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800

08004038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 0201 	bic.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 0302 	bic.w	r3, r3, #2
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <TIM_OC1_SetConfig+0xc8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10c      	bne.n	80040ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0308 	bic.w	r3, r3, #8
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a13      	ldr	r2, [pc, #76]	@ (8004100 <TIM_OC1_SetConfig+0xc8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d111      	bne.n	80040da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40010000 	.word	0x40010000

08004104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0320 	bic.w	r3, r3, #32
 800414e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <TIM_OC2_SetConfig+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10d      	bne.n	8004180 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800417e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <TIM_OC2_SetConfig+0xd4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d113      	bne.n	80041b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800418e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000

080041dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <TIM_OC3_SetConfig+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a14      	ldr	r2, [pc, #80]	@ (80042ac <TIM_OC3_SetConfig+0xd0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d113      	bne.n	8004286 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	621a      	str	r2, [r3, #32]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40010000 	.word	0x40010000

080042b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a10      	ldr	r2, [pc, #64]	@ (800434c <TIM_OC4_SetConfig+0x9c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d109      	bne.n	8004324 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000

08004350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e050      	b.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d013      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a18      	ldr	r2, [pc, #96]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a16      	ldr	r2, [pc, #88]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a13      	ldr	r2, [pc, #76]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10c      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000

08004478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e042      	b.n	8004538 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fc ffe4 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2224      	movs	r2, #36	@ 0x24
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fcdb 	bl	8004ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	d112      	bne.n	8004580 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_UART_Receive_IT+0x26>
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e00b      	b.n	8004582 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 faba 	bl	8004af0 <UART_Start_Receive_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	e000      	b.n	8004582 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b0ba      	sub	sp, #232	@ 0xe8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fb99 	bl	8004d22 <UART_Receive_IT>
      return;
 80045f0:	e25b      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80de 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800460c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80d1 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0202 	orr.w	r2, r3, #2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
 800468e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 81f2 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb24 	bl	8004d22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_UART_IRQHandler+0x17a>
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa2c 	bl	8004b64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d141      	bne.n	800479e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004746:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800475e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d9      	bne.n	800471a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	4a7e      	ldr	r2, [pc, #504]	@ (800496c <HAL_UART_IRQHandler+0x3e0>)
 8004774:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477a:	4618      	mov	r0, r3
 800477c:	f7fd feee 	bl	800255c <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00e      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f994 	bl	8004ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e00a      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f990 	bl	8004ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e006      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f98c 	bl	8004ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047b2:	e175      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	bf00      	nop
    return;
 80047b6:	e173      	b.n	8004aa0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 814f 	bne.w	8004a60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8148 	beq.w	8004a60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8141 	beq.w	8004a60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	f040 80b6 	bne.w	8004970 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8145 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800481e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004822:	429a      	cmp	r2, r3
 8004824:	f080 813e 	bcs.w	8004aa4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800482e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483a:	f000 8088 	beq.w	800494e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800486a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800486e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d9      	bne.n	800483e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800489a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e1      	bne.n	800488a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800491c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004930:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004932:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800493e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e3      	bne.n	800490c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd fd97 	bl	800247c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800495c:	b29b      	uxth	r3, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b29b      	uxth	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8b7 	bl	8004ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800496a:	e09b      	b.n	8004aa4 <HAL_UART_IRQHandler+0x518>
 800496c:	08004c2b 	.word	0x08004c2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004978:	b29b      	uxth	r3, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 808e 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800498c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8089 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80049bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e3      	bne.n	8004996 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	623b      	str	r3, [r7, #32]
   return(result);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a38:	61fa      	str	r2, [r7, #28]
 8004a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	617b      	str	r3, [r7, #20]
   return(result);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e3      	bne.n	8004a14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f83d 	bl	8004ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a5e:	e023      	b.n	8004aa8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_UART_IRQHandler+0x4f4>
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8ea 	bl	8004c52 <UART_Transmit_IT>
    return;
 8004a7e:	e014      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_UART_IRQHandler+0x51e>
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f92a 	bl	8004cf2 <UART_EndTransmit_IT>
    return;
 8004a9e:	e004      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
    return;
 8004aa0:	bf00      	nop
 8004aa2:	e002      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa4:	bf00      	nop
 8004aa6:	e000      	b.n	8004aaa <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa8:	bf00      	nop
  }
}
 8004aaa:	37e8      	adds	r7, #232	@ 0xe8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2222      	movs	r2, #34	@ 0x22
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0220 	orr.w	r2, r2, #32
 8004b54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b095      	sub	sp, #84	@ 0x54
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e5      	bne.n	8004b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e5      	bne.n	8004ba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d119      	bne.n	8004c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0310 	bic.w	r3, r3, #16
 8004bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bfc:	61ba      	str	r2, [r7, #24]
 8004bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e5      	bne.n	8004bdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c1e:	bf00      	nop
 8004c20:	3754      	adds	r7, #84	@ 0x54
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff ff3d 	bl	8004ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b21      	cmp	r3, #33	@ 0x21
 8004c64:	d13e      	bne.n	8004ce4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6e:	d114      	bne.n	8004c9a <UART_Transmit_IT+0x48>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d110      	bne.n	8004c9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	621a      	str	r2, [r3, #32]
 8004c98:	e008      	b.n	8004cac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	1c59      	adds	r1, r3, #1
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6211      	str	r1, [r2, #32]
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10f      	bne.n	8004ce0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fecc 	bl	8004ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08c      	sub	sp, #48	@ 0x30
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b22      	cmp	r3, #34	@ 0x22
 8004d34:	f040 80ae 	bne.w	8004e94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d117      	bne.n	8004d72 <UART_Receive_IT+0x50>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d113      	bne.n	8004d72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d70:	e026      	b.n	8004dc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d84:	d007      	beq.n	8004d96 <UART_Receive_IT+0x74>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <UART_Receive_IT+0x82>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e008      	b.n	8004db6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d15d      	bne.n	8004e90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0220 	bic.w	r2, r2, #32
 8004de2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d135      	bne.n	8004e86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e40:	623a      	str	r2, [r7, #32]
 8004e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69f9      	ldr	r1, [r7, #28]
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e5      	bne.n	8004e20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d10a      	bne.n	8004e78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fe2a 	bl	8004ad8 <HAL_UARTEx_RxEventCallback>
 8004e84:	e002      	b.n	8004e8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fcb2 	bl	80057f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e002      	b.n	8004e96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3730      	adds	r7, #48	@ 0x30
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b0c0      	sub	sp, #256	@ 0x100
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	68d9      	ldr	r1, [r3, #12]
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	ea40 0301 	orr.w	r3, r0, r1
 8004ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ef8:	f021 010c 	bic.w	r1, r1, #12
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f06:	430b      	orrs	r3, r1
 8004f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1a:	6999      	ldr	r1, [r3, #24]
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	ea40 0301 	orr.w	r3, r0, r1
 8004f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800516c <UART_SetConfig+0x2cc>)
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d005      	beq.n	8004f40 <UART_SetConfig+0xa0>
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005170 <UART_SetConfig+0x2d0>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d104      	bne.n	8004f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f40:	f7fe fbb8 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 8004f44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f48:	e003      	b.n	8004f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f4a:	f7fe fb9f 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8004f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5c:	f040 810c 	bne.w	8005178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f64:	2200      	movs	r2, #0
 8004f66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f7a:	415b      	adcs	r3, r3
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f82:	4621      	mov	r1, r4
 8004f84:	eb12 0801 	adds.w	r8, r2, r1
 8004f88:	4629      	mov	r1, r5
 8004f8a:	eb43 0901 	adc.w	r9, r3, r1
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa2:	4690      	mov	r8, r2
 8004fa4:	4699      	mov	r9, r3
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	eb18 0303 	adds.w	r3, r8, r3
 8004fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	eb49 0303 	adc.w	r3, r9, r3
 8004fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fce:	460b      	mov	r3, r1
 8004fd0:	18db      	adds	r3, r3, r3
 8004fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	eb42 0303 	adc.w	r3, r2, r3
 8004fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fe4:	f7fb fdb8 	bl	8000b58 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b61      	ldr	r3, [pc, #388]	@ (8005174 <UART_SetConfig+0x2d4>)
 8004fee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	011c      	lsls	r4, r3, #4
 8004ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005000:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	1891      	adds	r1, r2, r2
 800500e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005010:	415b      	adcs	r3, r3
 8005012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005018:	4641      	mov	r1, r8
 800501a:	eb12 0a01 	adds.w	sl, r2, r1
 800501e:	4649      	mov	r1, r9
 8005020:	eb43 0b01 	adc.w	fp, r3, r1
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005038:	4692      	mov	sl, r2
 800503a:	469b      	mov	fp, r3
 800503c:	4643      	mov	r3, r8
 800503e:	eb1a 0303 	adds.w	r3, sl, r3
 8005042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005046:	464b      	mov	r3, r9
 8005048:	eb4b 0303 	adc.w	r3, fp, r3
 800504c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800505c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005064:	460b      	mov	r3, r1
 8005066:	18db      	adds	r3, r3, r3
 8005068:	643b      	str	r3, [r7, #64]	@ 0x40
 800506a:	4613      	mov	r3, r2
 800506c:	eb42 0303 	adc.w	r3, r2, r3
 8005070:	647b      	str	r3, [r7, #68]	@ 0x44
 8005072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800507a:	f7fb fd6d 	bl	8000b58 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4611      	mov	r1, r2
 8005084:	4b3b      	ldr	r3, [pc, #236]	@ (8005174 <UART_SetConfig+0x2d4>)
 8005086:	fba3 2301 	umull	r2, r3, r3, r1
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2264      	movs	r2, #100	@ 0x64
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	1acb      	subs	r3, r1, r3
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800509a:	4b36      	ldr	r3, [pc, #216]	@ (8005174 <UART_SetConfig+0x2d4>)
 800509c:	fba3 2302 	umull	r2, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050a8:	441c      	add	r4, r3
 80050aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050c4:	415b      	adcs	r3, r3
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050cc:	4641      	mov	r1, r8
 80050ce:	1851      	adds	r1, r2, r1
 80050d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80050d2:	4649      	mov	r1, r9
 80050d4:	414b      	adcs	r3, r1
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050e4:	4659      	mov	r1, fp
 80050e6:	00cb      	lsls	r3, r1, #3
 80050e8:	4651      	mov	r1, sl
 80050ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ee:	4651      	mov	r1, sl
 80050f0:	00ca      	lsls	r2, r1, #3
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	4642      	mov	r2, r8
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005100:	464b      	mov	r3, r9
 8005102:	460a      	mov	r2, r1
 8005104:	eb42 0303 	adc.w	r3, r2, r3
 8005108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005118:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800511c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005120:	460b      	mov	r3, r1
 8005122:	18db      	adds	r3, r3, r3
 8005124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005126:	4613      	mov	r3, r2
 8005128:	eb42 0303 	adc.w	r3, r2, r3
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005136:	f7fb fd0f 	bl	8000b58 <__aeabi_uldivmod>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <UART_SetConfig+0x2d4>)
 8005140:	fba3 1302 	umull	r1, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	2164      	movs	r1, #100	@ 0x64
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	3332      	adds	r3, #50	@ 0x32
 8005152:	4a08      	ldr	r2, [pc, #32]	@ (8005174 <UART_SetConfig+0x2d4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 0207 	and.w	r2, r3, #7
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4422      	add	r2, r4
 8005166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005168:	e106      	b.n	8005378 <UART_SetConfig+0x4d8>
 800516a:	bf00      	nop
 800516c:	40011000 	.word	0x40011000
 8005170:	40011400 	.word	0x40011400
 8005174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517c:	2200      	movs	r2, #0
 800517e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005182:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800518a:	4642      	mov	r2, r8
 800518c:	464b      	mov	r3, r9
 800518e:	1891      	adds	r1, r2, r2
 8005190:	6239      	str	r1, [r7, #32]
 8005192:	415b      	adcs	r3, r3
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
 8005196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800519a:	4641      	mov	r1, r8
 800519c:	1854      	adds	r4, r2, r1
 800519e:	4649      	mov	r1, r9
 80051a0:	eb43 0501 	adc.w	r5, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	00eb      	lsls	r3, r5, #3
 80051ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b2:	00e2      	lsls	r2, r4, #3
 80051b4:	4614      	mov	r4, r2
 80051b6:	461d      	mov	r5, r3
 80051b8:	4643      	mov	r3, r8
 80051ba:	18e3      	adds	r3, r4, r3
 80051bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051c0:	464b      	mov	r3, r9
 80051c2:	eb45 0303 	adc.w	r3, r5, r3
 80051c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051e6:	4629      	mov	r1, r5
 80051e8:	008b      	lsls	r3, r1, #2
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f0:	4621      	mov	r1, r4
 80051f2:	008a      	lsls	r2, r1, #2
 80051f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051f8:	f7fb fcae 	bl	8000b58 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4b60      	ldr	r3, [pc, #384]	@ (8005384 <UART_SetConfig+0x4e4>)
 8005202:	fba3 2302 	umull	r2, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	011c      	lsls	r4, r3, #4
 800520a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005214:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	1891      	adds	r1, r2, r2
 8005222:	61b9      	str	r1, [r7, #24]
 8005224:	415b      	adcs	r3, r3
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800522c:	4641      	mov	r1, r8
 800522e:	1851      	adds	r1, r2, r1
 8005230:	6139      	str	r1, [r7, #16]
 8005232:	4649      	mov	r1, r9
 8005234:	414b      	adcs	r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	00cb      	lsls	r3, r1, #3
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524e:	4651      	mov	r1, sl
 8005250:	00ca      	lsls	r2, r1, #3
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	4603      	mov	r3, r0
 8005258:	4642      	mov	r2, r8
 800525a:	189b      	adds	r3, r3, r2
 800525c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005260:	464b      	mov	r3, r9
 8005262:	460a      	mov	r2, r1
 8005264:	eb42 0303 	adc.w	r3, r2, r3
 8005268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005276:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005284:	4649      	mov	r1, r9
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	4641      	mov	r1, r8
 800528a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528e:	4641      	mov	r1, r8
 8005290:	008a      	lsls	r2, r1, #2
 8005292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005296:	f7fb fc5f 	bl	8000b58 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	4b38      	ldr	r3, [pc, #224]	@ (8005384 <UART_SetConfig+0x4e4>)
 80052a2:	fba3 2301 	umull	r2, r3, r3, r1
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2264      	movs	r2, #100	@ 0x64
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	3332      	adds	r3, #50	@ 0x32
 80052b4:	4a33      	ldr	r2, [pc, #204]	@ (8005384 <UART_SetConfig+0x4e4>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c0:	441c      	add	r4, r3
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c6:	2200      	movs	r2, #0
 80052c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80052cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	415b      	adcs	r3, r3
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e0:	4641      	mov	r1, r8
 80052e2:	1851      	adds	r1, r2, r1
 80052e4:	6039      	str	r1, [r7, #0]
 80052e6:	4649      	mov	r1, r9
 80052e8:	414b      	adcs	r3, r1
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052f8:	4659      	mov	r1, fp
 80052fa:	00cb      	lsls	r3, r1, #3
 80052fc:	4651      	mov	r1, sl
 80052fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005302:	4651      	mov	r1, sl
 8005304:	00ca      	lsls	r2, r1, #3
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	4603      	mov	r3, r0
 800530c:	4642      	mov	r2, r8
 800530e:	189b      	adds	r3, r3, r2
 8005310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005312:	464b      	mov	r3, r9
 8005314:	460a      	mov	r2, r1
 8005316:	eb42 0303 	adc.w	r3, r2, r3
 800531a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	663b      	str	r3, [r7, #96]	@ 0x60
 8005326:	667a      	str	r2, [r7, #100]	@ 0x64
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005334:	4649      	mov	r1, r9
 8005336:	008b      	lsls	r3, r1, #2
 8005338:	4641      	mov	r1, r8
 800533a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800533e:	4641      	mov	r1, r8
 8005340:	008a      	lsls	r2, r1, #2
 8005342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005346:	f7fb fc07 	bl	8000b58 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <UART_SetConfig+0x4e4>)
 8005350:	fba3 1302 	umull	r1, r3, r3, r2
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2164      	movs	r1, #100	@ 0x64
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	3332      	adds	r3, #50	@ 0x32
 8005362:	4a08      	ldr	r2, [pc, #32]	@ (8005384 <UART_SetConfig+0x4e4>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4422      	add	r2, r4
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005384:	51eb851f 	.word	0x51eb851f

08005388 <readFromAdc>:
////	readFromAdc(temp);
//}


void readFromAdc(struct ntc_sensor *NTC_SENS)
{
 8005388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 6; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	e0b1      	b.n	8005500 <readFromAdc+0x178>
	{
		NTC_SENS[i].Vout = adc_result_dma[i];
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	4a62      	ldr	r2, [pc, #392]	@ (8005528 <readFromAdc+0x1a0>)
 80053a0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4413      	add	r3, r2
 80053ac:	ee07 1a90 	vmov	s15, r1
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	edc3 7a00 	vstr	s15, [r3]
		NTC_SENS[i].Vout = NTC_SENS[i].Vout * (3.3/4095);
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fb f870 	bl	80004a8 <__aeabi_f2d>
 80053c8:	a353      	add	r3, pc, #332	@ (adr r3, 8005518 <readFromAdc+0x190>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fb f8c3 	bl	8000558 <__aeabi_dmul>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4610      	mov	r0, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	18d4      	adds	r4, r2, r3
 80053e2:	f7fb fb69 	bl	8000ab8 <__aeabi_d2f>
 80053e6:	4603      	mov	r3, r0
 80053e8:	6023      	str	r3, [r4, #0]
		NTC_SENS[i].R_NTC = (NTC_SENS[i].Vout * R_10k) / (Vsupply - NTC_SENS[i].Vout);
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	ed93 7a00 	vldr	s14, [r3]
 80053f6:	4b4d      	ldr	r3, [pc, #308]	@ (800552c <readFromAdc+0x1a4>)
 80053f8:	edd3 7a00 	vldr	s15, [r3]
 80053fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005400:	4b4b      	ldr	r3, [pc, #300]	@ (8005530 <readFromAdc+0x1a8>)
 8005402:	ed93 7a00 	vldr	s14, [r3]
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005422:	edc3 7a01 	vstr	s15, [r3, #4]
		NTC_SENS[i].Temp_K = (T0 * B_param) / (T0 * log(NTC_SENS[i].R_NTC / R_10k) + B_param);
 8005426:	4b43      	ldr	r3, [pc, #268]	@ (8005534 <readFromAdc+0x1ac>)
 8005428:	ed93 7a00 	vldr	s14, [r3]
 800542c:	4b42      	ldr	r3, [pc, #264]	@ (8005538 <readFromAdc+0x1b0>)
 800542e:	edd3 7a00 	vldr	s15, [r3]
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	ee17 0a90 	vmov	r0, s15
 800543a:	f7fb f835 	bl	80004a8 <__aeabi_f2d>
 800543e:	4604      	mov	r4, r0
 8005440:	460d      	mov	r5, r1
 8005442:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <readFromAdc+0x1ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fb f82e 	bl	80004a8 <__aeabi_f2d>
 800544c:	4680      	mov	r8, r0
 800544e:	4689      	mov	r9, r1
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	ed93 7a01 	vldr	s14, [r3, #4]
 800545c:	4b33      	ldr	r3, [pc, #204]	@ (800552c <readFromAdc+0x1a4>)
 800545e:	edd3 7a00 	vldr	s15, [r3]
 8005462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005466:	ee16 0a90 	vmov	r0, s13
 800546a:	f7fb f81d 	bl	80004a8 <__aeabi_f2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	ec43 2b10 	vmov	d0, r2, r3
 8005476:	f002 f8a7 	bl	80075c8 <log>
 800547a:	ec53 2b10 	vmov	r2, r3, d0
 800547e:	4640      	mov	r0, r8
 8005480:	4649      	mov	r1, r9
 8005482:	f7fb f869 	bl	8000558 <__aeabi_dmul>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4690      	mov	r8, r2
 800548c:	4699      	mov	r9, r3
 800548e:	4b2a      	ldr	r3, [pc, #168]	@ (8005538 <readFromAdc+0x1b0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb f808 	bl	80004a8 <__aeabi_f2d>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4640      	mov	r0, r8
 800549e:	4649      	mov	r1, r9
 80054a0:	f7fa fea4 	bl	80001ec <__adddf3>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fb f97e 	bl	80007ac <__aeabi_ddiv>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	18d4      	adds	r4, r2, r3
 80054c0:	f7fb fafa 	bl	8000ab8 <__aeabi_d2f>
 80054c4:	4603      	mov	r3, r0
 80054c6:	60a3      	str	r3, [r4, #8]
		NTC_SENS[i].Temp_C = NTC_SENS[i].Temp_K - 273.15;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fa ffe8 	bl	80004a8 <__aeabi_f2d>
 80054d8:	a311      	add	r3, pc, #68	@ (adr r3, 8005520 <readFromAdc+0x198>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fe83 	bl	80001e8 <__aeabi_dsub>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	18d4      	adds	r4, r2, r3
 80054f2:	f7fb fae1 	bl	8000ab8 <__aeabi_d2f>
 80054f6:	4603      	mov	r3, r0
 80054f8:	60e3      	str	r3, [r4, #12]
	for(i = 0; i < 6; i++)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	3301      	adds	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b05      	cmp	r3, #5
 8005504:	f67f af4a 	bls.w	800539c <readFromAdc+0x14>
	}
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005514:	f3af 8000 	nop.w
 8005518:	e734d9b4 	.word	0xe734d9b4
 800551c:	3f4a680c 	.word	0x3f4a680c
 8005520:	66666666 	.word	0x66666666
 8005524:	40711266 	.word	0x40711266
 8005528:	20000220 	.word	0x20000220
 800552c:	20000010 	.word	0x20000010
 8005530:	2000000c 	.word	0x2000000c
 8005534:	20000018 	.word	0x20000018
 8005538:	20000014 	.word	0x20000014

0800553c <updateSensors>:


void updateSensors(struct ntc_sensor *temp)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_result_dma, 6);
 8005544:	2206      	movs	r2, #6
 8005546:	4905      	ldr	r1, [pc, #20]	@ (800555c <updateSensors+0x20>)
 8005548:	4805      	ldr	r0, [pc, #20]	@ (8005560 <updateSensors+0x24>)
 800554a:	f7fc fa01 	bl	8001950 <HAL_ADC_Start_DMA>
	readFromAdc(temp);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ff1a 	bl	8005388 <readFromAdc>
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000220 	.word	0x20000220
 8005560:	2000009c 	.word	0x2000009c

08005564 <initTasks>:
int i = 0;

void UART_Clear_Receive_Buffer(UART_HandleTypeDef *huart);

void initTasks(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af02      	add	r7, sp, #8
	TaskHandle_t UART_handle;
	TaskHandle_t Switch_handle;

	BaseType_t status;

	HAL_TIM_Base_Start(&htim2);
 800556a:	4830      	ldr	r0, [pc, #192]	@ (800562c <initTasks+0xc8>)
 800556c:	f7fe f942 	bl	80037f4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005570:	2100      	movs	r1, #0
 8005572:	482e      	ldr	r0, [pc, #184]	@ (800562c <initTasks+0xc8>)
 8005574:	f7fe fa4a 	bl	8003a0c <HAL_TIM_PWM_Start>

	setPWM(0);
 8005578:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8005630 <initTasks+0xcc>
 800557c:	f000 f914 	bl	80057a8 <setPWM>

	status = xTaskCreate(adc_handler, "LED-Task", 200, NULL, 2, &ADC_handle);
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	2302      	movs	r3, #2
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	22c8      	movs	r2, #200	@ 0xc8
 800558e:	4929      	ldr	r1, [pc, #164]	@ (8005634 <initTasks+0xd0>)
 8005590:	4829      	ldr	r0, [pc, #164]	@ (8005638 <initTasks+0xd4>)
 8005592:	f000 f9e5 	bl	8005960 <xTaskCreate>
 8005596:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d00b      	beq.n	80055b6 <initTasks+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <initTasks+0x4e>
	status = xTaskCreate(uart_handler, "UART-Task", 200, NULL, 2, &UART_handle);
 80055b6:	f107 0308 	add.w	r3, r7, #8
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	2302      	movs	r3, #2
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	22c8      	movs	r2, #200	@ 0xc8
 80055c4:	491d      	ldr	r1, [pc, #116]	@ (800563c <initTasks+0xd8>)
 80055c6:	481e      	ldr	r0, [pc, #120]	@ (8005640 <initTasks+0xdc>)
 80055c8:	f000 f9ca 	bl	8005960 <xTaskCreate>
 80055cc:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d00b      	beq.n	80055ec <initTasks+0x88>
        __asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	617b      	str	r3, [r7, #20]
    }
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <initTasks+0x84>
	status = xTaskCreate(switch_handler, "Switch-Task", 200, NULL, 2, &Switch_handle);
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	2302      	movs	r3, #2
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	22c8      	movs	r2, #200	@ 0xc8
 80055f8:	4912      	ldr	r1, [pc, #72]	@ (8005644 <initTasks+0xe0>)
 80055fa:	4813      	ldr	r0, [pc, #76]	@ (8005648 <initTasks+0xe4>)
 80055fc:	f000 f9b0 	bl	8005960 <xTaskCreate>
 8005600:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d00b      	beq.n	8005620 <initTasks+0xbc>
        __asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	613b      	str	r3, [r7, #16]
    }
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <initTasks+0xb8>

	vTaskStartScheduler();
 8005620:	f000 fb40 	bl	8005ca4 <vTaskStartScheduler>
}
 8005624:	bf00      	nop
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000144 	.word	0x20000144
 8005630:	00000000 	.word	0x00000000
 8005634:	080079f8 	.word	0x080079f8
 8005638:	0800564d 	.word	0x0800564d
 800563c:	08007a04 	.word	0x08007a04
 8005640:	08005689 	.word	0x08005689
 8005644:	08007a10 	.word	0x08007a10
 8005648:	080056b1 	.word	0x080056b1

0800564c <adc_handler>:

 void adc_handler(void *parameters)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	static uint8_t i = 0;
	while(1)
	{
		updateSensors(ntc_sensors);
 8005654:	480a      	ldr	r0, [pc, #40]	@ (8005680 <adc_handler+0x34>)
 8005656:	f7ff ff71 	bl	800553c <updateSensors>

		for(i = 0; i < 1; i++)
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <adc_handler+0x38>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e005      	b.n	800566e <adc_handler+0x22>
 8005662:	4b08      	ldr	r3, [pc, #32]	@ (8005684 <adc_handler+0x38>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <adc_handler+0x38>)
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <adc_handler+0x38>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f5      	beq.n	8005662 <adc_handler+0x16>
//				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 3, 1000);
//				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
			}
		}

		vTaskDelay(250);
 8005676:	20fa      	movs	r0, #250	@ 0xfa
 8005678:	f000 fade 	bl	8005c38 <vTaskDelay>
		updateSensors(ntc_sensors);
 800567c:	e7ea      	b.n	8005654 <adc_handler+0x8>
 800567e:	bf00      	nop
 8005680:	2000022c 	.word	0x2000022c
 8005684:	20000298 	.word	0x20000298

08005688 <uart_handler>:
	}
}

 void uart_handler(void *parameters)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive_IT(&huart1, data, sizeof(data));
 8005690:	2206      	movs	r2, #6
 8005692:	4905      	ldr	r1, [pc, #20]	@ (80056a8 <uart_handler+0x20>)
 8005694:	4805      	ldr	r0, [pc, #20]	@ (80056ac <uart_handler+0x24>)
 8005696:	f7fe ff53 	bl	8004540 <HAL_UART_Receive_IT>
		vTaskDelay(750);
 800569a:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800569e:	f000 facb 	bl	8005c38 <vTaskDelay>
		HAL_UART_Receive_IT(&huart1, data, sizeof(data));
 80056a2:	bf00      	nop
 80056a4:	e7f4      	b.n	8005690 <uart_handler+0x8>
 80056a6:	bf00      	nop
 80056a8:	2000028c 	.word	0x2000028c
 80056ac:	2000018c 	.word	0x2000018c

080056b0 <switch_handler>:
	}
}

void switch_handler(void *parameters)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	static uint8_t positions[4];
	static uint8_t switch_position = 0;

	while(1)
	{
		positions[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80056b8:	2102      	movs	r1, #2
 80056ba:	4831      	ldr	r0, [pc, #196]	@ (8005780 <switch_handler+0xd0>)
 80056bc:	f7fd fb5e 	bl	8002d7c <HAL_GPIO_ReadPin>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005784 <switch_handler+0xd4>)
 80056c6:	701a      	strb	r2, [r3, #0]
		positions[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80056c8:	2104      	movs	r1, #4
 80056ca:	482d      	ldr	r0, [pc, #180]	@ (8005780 <switch_handler+0xd0>)
 80056cc:	f7fd fb56 	bl	8002d7c <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005784 <switch_handler+0xd4>)
 80056d6:	705a      	strb	r2, [r3, #1]
		positions[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80056d8:	2108      	movs	r1, #8
 80056da:	4829      	ldr	r0, [pc, #164]	@ (8005780 <switch_handler+0xd0>)
 80056dc:	f7fd fb4e 	bl	8002d7c <HAL_GPIO_ReadPin>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b27      	ldr	r3, [pc, #156]	@ (8005784 <switch_handler+0xd4>)
 80056e6:	709a      	strb	r2, [r3, #2]
		positions[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80056e8:	2110      	movs	r1, #16
 80056ea:	4825      	ldr	r0, [pc, #148]	@ (8005780 <switch_handler+0xd0>)
 80056ec:	f7fd fb46 	bl	8002d7c <HAL_GPIO_ReadPin>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <switch_handler+0xd4>)
 80056f6:	70da      	strb	r2, [r3, #3]

		switch_position = (positions[0] << 3) | (positions[1] << 2) | (positions[2] << 1) | (positions[3]);
 80056f8:	4b22      	ldr	r3, [pc, #136]	@ (8005784 <switch_handler+0xd4>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	b25a      	sxtb	r2, r3
 8005700:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <switch_handler+0xd4>)
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	b25b      	sxtb	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b25a      	sxtb	r2, r3
 800570c:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <switch_handler+0xd4>)
 800570e:	789b      	ldrb	r3, [r3, #2]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	b25b      	sxtb	r3, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	b25a      	sxtb	r2, r3
 8005718:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <switch_handler+0xd4>)
 800571a:	78db      	ldrb	r3, [r3, #3]
 800571c:	b25b      	sxtb	r3, r3
 800571e:	4313      	orrs	r3, r2
 8005720:	b25b      	sxtb	r3, r3
 8005722:	b2da      	uxtb	r2, r3
 8005724:	4b18      	ldr	r3, [pc, #96]	@ (8005788 <switch_handler+0xd8>)
 8005726:	701a      	strb	r2, [r3, #0]

		switch(switch_position)
 8005728:	4b17      	ldr	r3, [pc, #92]	@ (8005788 <switch_handler+0xd8>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d00d      	beq.n	800574c <switch_handler+0x9c>
 8005730:	2b0f      	cmp	r3, #15
 8005732:	dc17      	bgt.n	8005764 <switch_handler+0xb4>
 8005734:	2b0b      	cmp	r3, #11
 8005736:	d011      	beq.n	800575c <switch_handler+0xac>
 8005738:	2b0d      	cmp	r3, #13
 800573a:	d113      	bne.n	8005764 <switch_handler+0xb4>
		{
	    case 0x0D:
	        printf("Switch position: 0\n");
 800573c:	4813      	ldr	r0, [pc, #76]	@ (800578c <switch_handler+0xdc>)
 800573e:	f001 fbad 	bl	8006e9c <puts>
	        setPWM(0);
 8005742:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8005790 <switch_handler+0xe0>
 8005746:	f000 f82f 	bl	80057a8 <setPWM>
	        break;
 800574a:	e013      	b.n	8005774 <switch_handler+0xc4>
	    case 0xF:
	        printf("Switch position: 1\n");
 800574c:	4811      	ldr	r0, [pc, #68]	@ (8005794 <switch_handler+0xe4>)
 800574e:	f001 fba5 	bl	8006e9c <puts>
	        setPWM(90);
 8005752:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8005798 <switch_handler+0xe8>
 8005756:	f000 f827 	bl	80057a8 <setPWM>
	        break;
 800575a:	e00b      	b.n	8005774 <switch_handler+0xc4>
	    case 0x0B:
	        printf("Switch position: 2\n");
 800575c:	480f      	ldr	r0, [pc, #60]	@ (800579c <switch_handler+0xec>)
 800575e:	f001 fb9d 	bl	8006e9c <puts>
	        break;
 8005762:	e007      	b.n	8005774 <switch_handler+0xc4>
	    default:
	        printf("Switch position: undefined\n");
 8005764:	480e      	ldr	r0, [pc, #56]	@ (80057a0 <switch_handler+0xf0>)
 8005766:	f001 fb99 	bl	8006e9c <puts>
	        setPWM(100);
 800576a:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80057a4 <switch_handler+0xf4>
 800576e:	f000 f81b 	bl	80057a8 <setPWM>
	        break;
 8005772:	bf00      	nop
		}
		vTaskDelay(500);
 8005774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005778:	f000 fa5e 	bl	8005c38 <vTaskDelay>
		positions[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800577c:	e79c      	b.n	80056b8 <switch_handler+0x8>
 800577e:	bf00      	nop
 8005780:	40020000 	.word	0x40020000
 8005784:	2000029c 	.word	0x2000029c
 8005788:	200002a0 	.word	0x200002a0
 800578c:	08007a1c 	.word	0x08007a1c
 8005790:	00000000 	.word	0x00000000
 8005794:	08007a30 	.word	0x08007a30
 8005798:	42b40000 	.word	0x42b40000
 800579c:	08007a44 	.word	0x08007a44
 80057a0:	08007a58 	.word	0x08007a58
 80057a4:	42c80000 	.word	0x42c80000

080057a8 <setPWM>:


}

void setPWM(float dc)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t counterTicks = (dc * 7680) / 100;
 80057b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80057b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80057e4 <setPWM+0x3c>
 80057ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057be:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80057e8 <setPWM+0x40>
 80057c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ca:	ee17 3a90 	vmov	r3, s15
 80057ce:	81fb      	strh	r3, [r7, #14]

//    htim1->Instance->CCR1 = counterTicks;
    htim2.Instance->CCR1 = counterTicks;
 80057d0:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <setPWM+0x44>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	89fa      	ldrh	r2, [r7, #14]
 80057d6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	45f00000 	.word	0x45f00000
 80057e8:	42c80000 	.word	0x42c80000
 80057ec:	20000144 	.word	0x20000144

080057f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Check if the interrupt is from USART1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005834 <HAL_UART_RxCpltCallback+0x44>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d111      	bne.n	8005826 <HAL_UART_RxCpltCallback+0x36>
    {
    	for(i = 0; i < 6; i++){
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_UART_RxCpltCallback+0x48>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	e009      	b.n	800581e <HAL_UART_RxCpltCallback+0x2e>
    		data[i] = 0;
 800580a:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <HAL_UART_RxCpltCallback+0x48>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0b      	ldr	r2, [pc, #44]	@ (800583c <HAL_UART_RxCpltCallback+0x4c>)
 8005810:	2100      	movs	r1, #0
 8005812:	54d1      	strb	r1, [r2, r3]
    	for(i = 0; i < 6; i++){
 8005814:	4b08      	ldr	r3, [pc, #32]	@ (8005838 <HAL_UART_RxCpltCallback+0x48>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a07      	ldr	r2, [pc, #28]	@ (8005838 <HAL_UART_RxCpltCallback+0x48>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_UART_RxCpltCallback+0x48>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b05      	cmp	r3, #5
 8005824:	ddf1      	ble.n	800580a <HAL_UART_RxCpltCallback+0x1a>
    	}
    }
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40011000 	.word	0x40011000
 8005838:	20000294 	.word	0x20000294
 800583c:	2000028c 	.word	0x2000028c

08005840 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f103 0208 	add.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005858:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f103 0208 	add.w	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f103 0208 	add.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058b0:	d103      	bne.n	80058ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e00c      	b.n	80058d4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3308      	adds	r3, #8
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e002      	b.n	80058c8 <vListInsert+0x2e>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d2f6      	bcs.n	80058c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6892      	ldr	r2, [r2, #8]
 8005922:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6852      	ldr	r2, [r2, #4]
 800592c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d103      	bne.n	8005940 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	1e5a      	subs	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	@ 0x30
 8005964:	af04      	add	r7, sp, #16
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f000 ffa9 	bl	80068cc <pvPortMalloc>
 800597a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d013      	beq.n	80059aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005982:	2058      	movs	r0, #88	@ 0x58
 8005984:	f000 ffa2 	bl	80068cc <pvPortMalloc>
 8005988:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005990:	2258      	movs	r2, #88	@ 0x58
 8005992:	2100      	movs	r1, #0
 8005994:	69f8      	ldr	r0, [r7, #28]
 8005996:	f001 fb61 	bl	800705c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
 80059a0:	e005      	b.n	80059ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f001 f84e 	bl	8006a44 <vPortFree>
 80059a8:	e001      	b.n	80059ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d013      	beq.n	80059dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f80e 	bl	80059ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80059d0:	69f8      	ldr	r0, [r7, #28]
 80059d2:	f000 f89b 	bl	8005b0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e002      	b.n	80059e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80059e2:	69bb      	ldr	r3, [r7, #24]
    }
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	461a      	mov	r2, r3
 8005a04:	21a5      	movs	r1, #165	@ 0xa5
 8005a06:	f001 fb29 	bl	800705c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a14:	3b01      	subs	r3, #1
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	617b      	str	r3, [r7, #20]
    }
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01e      	beq.n	8005a8a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e012      	b.n	8005a78 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	7819      	ldrb	r1, [r3, #0]
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3334      	adds	r3, #52	@ 0x34
 8005a62:	460a      	mov	r2, r1
 8005a64:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d006      	beq.n	8005a80 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d9e9      	bls.n	8005a52 <prvInitialiseNewTask+0x66>
 8005a7e:	e000      	b.n	8005a82 <prvInitialiseNewTask+0x96>
            {
                break;
 8005a80:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d90b      	bls.n	8005aa8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	613b      	str	r3, [r7, #16]
    }
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d901      	bls.n	8005ab2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aae:	2304      	movs	r3, #4
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005abc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fedc 	bl	8005880 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	3318      	adds	r3, #24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fed7 	bl	8005880 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	f1c3 0205 	rsb	r2, r3, #5
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	69b8      	ldr	r0, [r7, #24]
 8005aee:	f000 fcd5 	bl	800649c <pxPortInitialiseStack>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b02:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b04:	bf00      	nop
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b14:	f000 fdf2 	bl	80066fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b18:	4b40      	ldr	r3, [pc, #256]	@ (8005c1c <prvAddNewTaskToReadyList+0x110>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c1c <prvAddNewTaskToReadyList+0x110>)
 8005b20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b22:	4b3f      	ldr	r3, [pc, #252]	@ (8005c20 <prvAddNewTaskToReadyList+0x114>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c20 <prvAddNewTaskToReadyList+0x114>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b30:	4b3a      	ldr	r3, [pc, #232]	@ (8005c1c <prvAddNewTaskToReadyList+0x110>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d110      	bne.n	8005b5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005b38:	f000 fb96 	bl	8006268 <prvInitialiseTaskLists>
 8005b3c:	e00d      	b.n	8005b5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005b3e:	4b39      	ldr	r3, [pc, #228]	@ (8005c24 <prvAddNewTaskToReadyList+0x118>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <prvAddNewTaskToReadyList+0x114>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d802      	bhi.n	8005b5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005b54:	4a32      	ldr	r2, [pc, #200]	@ (8005c20 <prvAddNewTaskToReadyList+0x114>)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005b5a:	4b33      	ldr	r3, [pc, #204]	@ (8005c28 <prvAddNewTaskToReadyList+0x11c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	4a31      	ldr	r2, [pc, #196]	@ (8005c28 <prvAddNewTaskToReadyList+0x11c>)
 8005b62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b64:	4b30      	ldr	r3, [pc, #192]	@ (8005c28 <prvAddNewTaskToReadyList+0x11c>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	4b2d      	ldr	r3, [pc, #180]	@ (8005c2c <prvAddNewTaskToReadyList+0x120>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c2c <prvAddNewTaskToReadyList+0x120>)
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b82:	492b      	ldr	r1, [pc, #172]	@ (8005c30 <prvAddNewTaskToReadyList+0x124>)
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3304      	adds	r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	609a      	str	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	3204      	adds	r2, #4
 8005baa:	605a      	str	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <prvAddNewTaskToReadyList+0x124>)
 8005bc2:	441a      	add	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	615a      	str	r2, [r3, #20]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bcc:	4918      	ldr	r1, [pc, #96]	@ (8005c30 <prvAddNewTaskToReadyList+0x124>)
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	4814      	ldr	r0, [pc, #80]	@ (8005c30 <prvAddNewTaskToReadyList+0x124>)
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4403      	add	r3, r0
 8005be8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005bea:	f000 fdb9 	bl	8006760 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <prvAddNewTaskToReadyList+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <prvAddNewTaskToReadyList+0x114>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d207      	bcs.n	8005c14 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005c04:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <prvAddNewTaskToReadyList+0x128>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2000037c 	.word	0x2000037c
 8005c20:	200002a4 	.word	0x200002a4
 8005c24:	20000388 	.word	0x20000388
 8005c28:	20000398 	.word	0x20000398
 8005c2c:	20000384 	.word	0x20000384
 8005c30:	200002a8 	.word	0x200002a8
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005c4a:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <vTaskDelay+0x64>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <vTaskDelay+0x32>
        __asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60bb      	str	r3, [r7, #8]
    }
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8005c6a:	f000 f867 	bl	8005d3c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb93 	bl	800639c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005c76:	f000 f86f 	bl	8005d58 <xTaskResumeAll>
 8005c7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8005c82:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <vTaskDelay+0x68>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200003a4 	.word	0x200003a4
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005caa:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <vTaskStartScheduler+0x7c>)
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2282      	movs	r2, #130	@ 0x82
 8005cb6:	491b      	ldr	r1, [pc, #108]	@ (8005d24 <vTaskStartScheduler+0x80>)
 8005cb8:	481b      	ldr	r0, [pc, #108]	@ (8005d28 <vTaskStartScheduler+0x84>)
 8005cba:	f7ff fe51 	bl	8005960 <xTaskCreate>
 8005cbe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d116      	bne.n	8005cf4 <vTaskStartScheduler+0x50>
        __asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60bb      	str	r3, [r7, #8]
    }
 8005cd8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005cda:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <vTaskStartScheduler+0x88>)
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ce0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <vTaskStartScheduler+0x8c>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ce8:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <vTaskStartScheduler+0x90>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005cee:	f000 fc61 	bl	80065b4 <xPortStartScheduler>
 8005cf2:	e00f      	b.n	8005d14 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cfa:	d10b      	bne.n	8005d14 <vTaskStartScheduler+0x70>
        __asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	607b      	str	r3, [r7, #4]
    }
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	e7fd      	b.n	8005d10 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005d14:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <vTaskStartScheduler+0x94>)
 8005d16:	681b      	ldr	r3, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	200003a0 	.word	0x200003a0
 8005d24:	08007a74 	.word	0x08007a74
 8005d28:	08006239 	.word	0x08006239
 8005d2c:	2000039c 	.word	0x2000039c
 8005d30:	20000388 	.word	0x20000388
 8005d34:	20000380 	.word	0x20000380
 8005d38:	2000001c 	.word	0x2000001c

08005d3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005d40:	4b04      	ldr	r3, [pc, #16]	@ (8005d54 <vTaskSuspendAll+0x18>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	4a03      	ldr	r2, [pc, #12]	@ (8005d54 <vTaskSuspendAll+0x18>)
 8005d48:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005d4a:	bf00      	nop
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	200003a4 	.word	0x200003a4

08005d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005d66:	4b71      	ldr	r3, [pc, #452]	@ (8005f2c <xTaskResumeAll+0x1d4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <xTaskResumeAll+0x2e>
        __asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	607b      	str	r3, [r7, #4]
    }
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005d86:	f000 fcb9 	bl	80066fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005d8a:	4b68      	ldr	r3, [pc, #416]	@ (8005f2c <xTaskResumeAll+0x1d4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	4a66      	ldr	r2, [pc, #408]	@ (8005f2c <xTaskResumeAll+0x1d4>)
 8005d92:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d94:	4b65      	ldr	r3, [pc, #404]	@ (8005f2c <xTaskResumeAll+0x1d4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 80c0 	bne.w	8005f1e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d9e:	4b64      	ldr	r3, [pc, #400]	@ (8005f30 <xTaskResumeAll+0x1d8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80bb 	beq.w	8005f1e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005da8:	e08a      	b.n	8005ec0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005daa:	4b62      	ldr	r3, [pc, #392]	@ (8005f34 <xTaskResumeAll+0x1dc>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	6a12      	ldr	r2, [r2, #32]
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	69d2      	ldr	r2, [r2, #28]
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d103      	bne.n	8005de0 <xTaskResumeAll+0x88>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2200      	movs	r2, #0
 8005de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1e5a      	subs	r2, r3, #1
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	6892      	ldr	r2, [r2, #8]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3304      	adds	r3, #4
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d103      	bne.n	8005e1e <xTaskResumeAll+0xc6>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2200      	movs	r2, #0
 8005e22:	615a      	str	r2, [r3, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	1e5a      	subs	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	2201      	movs	r2, #1
 8005e34:	409a      	lsls	r2, r3
 8005e36:	4b40      	ldr	r3, [pc, #256]	@ (8005f38 <xTaskResumeAll+0x1e0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f38 <xTaskResumeAll+0x1e0>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e44:	493d      	ldr	r1, [pc, #244]	@ (8005f3c <xTaskResumeAll+0x1e4>)
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3304      	adds	r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	3204      	adds	r2, #4
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4a2e      	ldr	r2, [pc, #184]	@ (8005f3c <xTaskResumeAll+0x1e4>)
 8005e84:	441a      	add	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	615a      	str	r2, [r3, #20]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8e:	492b      	ldr	r1, [pc, #172]	@ (8005f3c <xTaskResumeAll+0x1e4>)
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	1c59      	adds	r1, r3, #1
 8005e9e:	4827      	ldr	r0, [pc, #156]	@ (8005f3c <xTaskResumeAll+0x1e4>)
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4403      	add	r3, r0
 8005eaa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb0:	4b23      	ldr	r3, [pc, #140]	@ (8005f40 <xTaskResumeAll+0x1e8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8005eba:	4b22      	ldr	r3, [pc, #136]	@ (8005f44 <xTaskResumeAll+0x1ec>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f34 <xTaskResumeAll+0x1dc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f af70 	bne.w	8005daa <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005ed0:	f000 fa48 	bl	8006364 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f48 <xTaskResumeAll+0x1f0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005ee0:	f000 f836 	bl	8005f50 <xTaskIncrementTick>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8005eea:	4b16      	ldr	r3, [pc, #88]	@ (8005f44 <xTaskResumeAll+0x1ec>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f1      	bne.n	8005ee0 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8005efc:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <xTaskResumeAll+0x1f0>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <xTaskResumeAll+0x1ec>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f4c <xTaskResumeAll+0x1f4>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005f1e:	f000 fc1f 	bl	8006760 <vPortExitCritical>

    return xAlreadyYielded;
 8005f22:	69bb      	ldr	r3, [r7, #24]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	200003a4 	.word	0x200003a4
 8005f30:	2000037c 	.word	0x2000037c
 8005f34:	2000033c 	.word	0x2000033c
 8005f38:	20000384 	.word	0x20000384
 8005f3c:	200002a8 	.word	0x200002a8
 8005f40:	200002a4 	.word	0x200002a4
 8005f44:	20000390 	.word	0x20000390
 8005f48:	2000038c 	.word	0x2000038c
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5a:	4b7e      	ldr	r3, [pc, #504]	@ (8006154 <xTaskIncrementTick+0x204>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 80ed 	bne.w	800613e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f64:	4b7c      	ldr	r3, [pc, #496]	@ (8006158 <xTaskIncrementTick+0x208>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005f6c:	4a7a      	ldr	r2, [pc, #488]	@ (8006158 <xTaskIncrementTick+0x208>)
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d121      	bne.n	8005fbc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005f78:	4b78      	ldr	r3, [pc, #480]	@ (800615c <xTaskIncrementTick+0x20c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <xTaskIncrementTick+0x4a>
        __asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	607b      	str	r3, [r7, #4]
    }
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <xTaskIncrementTick+0x46>
 8005f9a:	4b70      	ldr	r3, [pc, #448]	@ (800615c <xTaskIncrementTick+0x20c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8006160 <xTaskIncrementTick+0x210>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800615c <xTaskIncrementTick+0x20c>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4a6d      	ldr	r2, [pc, #436]	@ (8006160 <xTaskIncrementTick+0x210>)
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b6d      	ldr	r3, [pc, #436]	@ (8006164 <xTaskIncrementTick+0x214>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a6b      	ldr	r2, [pc, #428]	@ (8006164 <xTaskIncrementTick+0x214>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f000 f9d4 	bl	8006364 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8006168 <xTaskIncrementTick+0x218>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f0c0 80a6 	bcc.w	8006114 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc8:	4b64      	ldr	r3, [pc, #400]	@ (800615c <xTaskIncrementTick+0x20c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd2:	4b65      	ldr	r3, [pc, #404]	@ (8006168 <xTaskIncrementTick+0x218>)
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fd8:	601a      	str	r2, [r3, #0]
                    break;
 8005fda:	e09b      	b.n	8006114 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800615c <xTaskIncrementTick+0x20c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d203      	bcs.n	8005ffc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005ff4:	4a5c      	ldr	r2, [pc, #368]	@ (8006168 <xTaskIncrementTick+0x218>)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005ffa:	e08b      	b.n	8006114 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	68d2      	ldr	r2, [r2, #12]
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	6892      	ldr	r2, [r2, #8]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3304      	adds	r3, #4
 800601e:	429a      	cmp	r2, r3
 8006020:	d103      	bne.n	800602a <xTaskIncrementTick+0xda>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2200      	movs	r2, #0
 800602e:	615a      	str	r2, [r3, #20]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1e5a      	subs	r2, r3, #1
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01e      	beq.n	8006080 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	6a12      	ldr	r2, [r2, #32]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	69d2      	ldr	r2, [r2, #28]
 800605a:	605a      	str	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	3318      	adds	r3, #24
 8006064:	429a      	cmp	r2, r3
 8006066:	d103      	bne.n	8006070 <xTaskIncrementTick+0x120>
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	6a1a      	ldr	r2, [r3, #32]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2200      	movs	r2, #0
 8006074:	629a      	str	r2, [r3, #40]	@ 0x28
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	1e5a      	subs	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	2201      	movs	r2, #1
 8006086:	409a      	lsls	r2, r3
 8006088:	4b38      	ldr	r3, [pc, #224]	@ (800616c <xTaskIncrementTick+0x21c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4313      	orrs	r3, r2
 800608e:	4a37      	ldr	r2, [pc, #220]	@ (800616c <xTaskIncrementTick+0x21c>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006096:	4936      	ldr	r1, [pc, #216]	@ (8006170 <xTaskIncrementTick+0x220>)
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	3304      	adds	r3, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	3204      	adds	r2, #4
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	1d1a      	adds	r2, r3, #4
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4a26      	ldr	r2, [pc, #152]	@ (8006170 <xTaskIncrementTick+0x220>)
 80060d6:	441a      	add	r2, r3
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	615a      	str	r2, [r3, #20]
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e0:	4923      	ldr	r1, [pc, #140]	@ (8006170 <xTaskIncrementTick+0x220>)
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	481f      	ldr	r0, [pc, #124]	@ (8006170 <xTaskIncrementTick+0x220>)
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4403      	add	r3, r0
 80060fc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006102:	4b1c      	ldr	r3, [pc, #112]	@ (8006174 <xTaskIncrementTick+0x224>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	429a      	cmp	r2, r3
 800610a:	f67f af5d 	bls.w	8005fc8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006112:	e759      	b.n	8005fc8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006114:	4b17      	ldr	r3, [pc, #92]	@ (8006174 <xTaskIncrementTick+0x224>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	4915      	ldr	r1, [pc, #84]	@ (8006170 <xTaskIncrementTick+0x220>)
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d901      	bls.n	8006130 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <xTaskIncrementTick+0x228>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
 800613c:	e004      	b.n	8006148 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800613e:	4b0f      	ldr	r3, [pc, #60]	@ (800617c <xTaskIncrementTick+0x22c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a0d      	ldr	r2, [pc, #52]	@ (800617c <xTaskIncrementTick+0x22c>)
 8006146:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800614a:	4618      	mov	r0, r3
 800614c:	3728      	adds	r7, #40	@ 0x28
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	200003a4 	.word	0x200003a4
 8006158:	20000380 	.word	0x20000380
 800615c:	20000334 	.word	0x20000334
 8006160:	20000338 	.word	0x20000338
 8006164:	20000394 	.word	0x20000394
 8006168:	2000039c 	.word	0x2000039c
 800616c:	20000384 	.word	0x20000384
 8006170:	200002a8 	.word	0x200002a8
 8006174:	200002a4 	.word	0x200002a4
 8006178:	20000390 	.word	0x20000390
 800617c:	2000038c 	.word	0x2000038c

08006180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006186:	4b27      	ldr	r3, [pc, #156]	@ (8006224 <vTaskSwitchContext+0xa4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800618e:	4b26      	ldr	r3, [pc, #152]	@ (8006228 <vTaskSwitchContext+0xa8>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006194:	e040      	b.n	8006218 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006196:	4b24      	ldr	r3, [pc, #144]	@ (8006228 <vTaskSwitchContext+0xa8>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619c:	4b23      	ldr	r3, [pc, #140]	@ (800622c <vTaskSwitchContext+0xac>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	fab3 f383 	clz	r3, r3
 80061a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	f1c3 031f 	rsb	r3, r3, #31
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	491f      	ldr	r1, [pc, #124]	@ (8006230 <vTaskSwitchContext+0xb0>)
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <vTaskSwitchContext+0x5e>
        __asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	607b      	str	r3, [r7, #4]
    }
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <vTaskSwitchContext+0x5a>
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4a11      	ldr	r2, [pc, #68]	@ (8006230 <vTaskSwitchContext+0xb0>)
 80061ea:	4413      	add	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3308      	adds	r3, #8
 8006200:	429a      	cmp	r2, r3
 8006202:	d104      	bne.n	800620e <vTaskSwitchContext+0x8e>
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a07      	ldr	r2, [pc, #28]	@ (8006234 <vTaskSwitchContext+0xb4>)
 8006216:	6013      	str	r3, [r2, #0]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	200003a4 	.word	0x200003a4
 8006228:	20000390 	.word	0x20000390
 800622c:	20000384 	.word	0x20000384
 8006230:	200002a8 	.word	0x200002a8
 8006234:	200002a4 	.word	0x200002a4

08006238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006240:	f000 f852 	bl	80062e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006244:	4b06      	ldr	r3, [pc, #24]	@ (8006260 <prvIdleTask+0x28>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d9f9      	bls.n	8006240 <prvIdleTask+0x8>
            {
                taskYIELD();
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <prvIdleTask+0x2c>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800625c:	e7f0      	b.n	8006240 <prvIdleTask+0x8>
 800625e:	bf00      	nop
 8006260:	200002a8 	.word	0x200002a8
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800626e:	2300      	movs	r3, #0
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	e00c      	b.n	800628e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4a12      	ldr	r2, [pc, #72]	@ (80062c8 <prvInitialiseTaskLists+0x60>)
 8006280:	4413      	add	r3, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fadc 	bl	8005840 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3301      	adds	r3, #1
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b04      	cmp	r3, #4
 8006292:	d9ef      	bls.n	8006274 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006294:	480d      	ldr	r0, [pc, #52]	@ (80062cc <prvInitialiseTaskLists+0x64>)
 8006296:	f7ff fad3 	bl	8005840 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800629a:	480d      	ldr	r0, [pc, #52]	@ (80062d0 <prvInitialiseTaskLists+0x68>)
 800629c:	f7ff fad0 	bl	8005840 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80062a0:	480c      	ldr	r0, [pc, #48]	@ (80062d4 <prvInitialiseTaskLists+0x6c>)
 80062a2:	f7ff facd 	bl	8005840 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80062a6:	480c      	ldr	r0, [pc, #48]	@ (80062d8 <prvInitialiseTaskLists+0x70>)
 80062a8:	f7ff faca 	bl	8005840 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80062ac:	480b      	ldr	r0, [pc, #44]	@ (80062dc <prvInitialiseTaskLists+0x74>)
 80062ae:	f7ff fac7 	bl	8005840 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80062b2:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <prvInitialiseTaskLists+0x78>)
 80062b4:	4a05      	ldr	r2, [pc, #20]	@ (80062cc <prvInitialiseTaskLists+0x64>)
 80062b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062b8:	4b0a      	ldr	r3, [pc, #40]	@ (80062e4 <prvInitialiseTaskLists+0x7c>)
 80062ba:	4a05      	ldr	r2, [pc, #20]	@ (80062d0 <prvInitialiseTaskLists+0x68>)
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200002a8 	.word	0x200002a8
 80062cc:	2000030c 	.word	0x2000030c
 80062d0:	20000320 	.word	0x20000320
 80062d4:	2000033c 	.word	0x2000033c
 80062d8:	20000350 	.word	0x20000350
 80062dc:	20000368 	.word	0x20000368
 80062e0:	20000334 	.word	0x20000334
 80062e4:	20000338 	.word	0x20000338

080062e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ee:	e019      	b.n	8006324 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80062f0:	f000 fa04 	bl	80066fc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f4:	4b10      	ldr	r3, [pc, #64]	@ (8006338 <prvCheckTasksWaitingTermination+0x50>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fb03 	bl	800590c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006306:	4b0d      	ldr	r3, [pc, #52]	@ (800633c <prvCheckTasksWaitingTermination+0x54>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3b01      	subs	r3, #1
 800630c:	4a0b      	ldr	r2, [pc, #44]	@ (800633c <prvCheckTasksWaitingTermination+0x54>)
 800630e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006310:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <prvCheckTasksWaitingTermination+0x58>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3b01      	subs	r3, #1
 8006316:	4a0a      	ldr	r2, [pc, #40]	@ (8006340 <prvCheckTasksWaitingTermination+0x58>)
 8006318:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800631a:	f000 fa21 	bl	8006760 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f810 	bl	8006344 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006324:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <prvCheckTasksWaitingTermination+0x58>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e1      	bne.n	80062f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000350 	.word	0x20000350
 800633c:	2000037c 	.word	0x2000037c
 8006340:	20000364 	.word	0x20000364

08006344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fb77 	bl	8006a44 <vPortFree>
            vPortFree( pxTCB );
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fb74 	bl	8006a44 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006368:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <prvResetNextTaskUnblockTime+0x30>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006372:	4b09      	ldr	r3, [pc, #36]	@ (8006398 <prvResetNextTaskUnblockTime+0x34>)
 8006374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006378:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800637a:	e005      	b.n	8006388 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800637c:	4b05      	ldr	r3, [pc, #20]	@ (8006394 <prvResetNextTaskUnblockTime+0x30>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a04      	ldr	r2, [pc, #16]	@ (8006398 <prvResetNextTaskUnblockTime+0x34>)
 8006386:	6013      	str	r3, [r2, #0]
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000334 	.word	0x20000334
 8006398:	2000039c 	.word	0x2000039c

0800639c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80063a6:	4b36      	ldr	r3, [pc, #216]	@ (8006480 <prvAddCurrentTaskToDelayedList+0xe4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ac:	4b35      	ldr	r3, [pc, #212]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff faaa 	bl	800590c <uxListRemove>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063be:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	2201      	movs	r2, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43da      	mvns	r2, r3
 80063cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006488 <prvAddCurrentTaskToDelayedList+0xec>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4013      	ands	r3, r2
 80063d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006488 <prvAddCurrentTaskToDelayedList+0xec>)
 80063d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063dc:	d124      	bne.n	8006428 <prvAddCurrentTaskToDelayedList+0x8c>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d021      	beq.n	8006428 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063e4:	4b29      	ldr	r3, [pc, #164]	@ (800648c <prvAddCurrentTaskToDelayedList+0xf0>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	4b26      	ldr	r3, [pc, #152]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	4b24      	ldr	r3, [pc, #144]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	6892      	ldr	r2, [r2, #8]
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	4b21      	ldr	r3, [pc, #132]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	3204      	adds	r2, #4
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	4b1e      	ldr	r3, [pc, #120]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	609a      	str	r2, [r3, #8]
 8006412:	4b1c      	ldr	r3, [pc, #112]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1d      	ldr	r2, [pc, #116]	@ (800648c <prvAddCurrentTaskToDelayedList+0xf0>)
 8006418:	615a      	str	r2, [r3, #20]
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <prvAddCurrentTaskToDelayedList+0xf0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	4a1a      	ldr	r2, [pc, #104]	@ (800648c <prvAddCurrentTaskToDelayedList+0xf0>)
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006426:	e026      	b.n	8006476 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	429a      	cmp	r2, r3
 800643e:	d209      	bcs.n	8006454 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006440:	4b13      	ldr	r3, [pc, #76]	@ (8006490 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7ff fa24 	bl	800589a <vListInsert>
}
 8006452:	e010      	b.n	8006476 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006454:	4b0f      	ldr	r3, [pc, #60]	@ (8006494 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <prvAddCurrentTaskToDelayedList+0xe8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7ff fa1a 	bl	800589a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006466:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	429a      	cmp	r2, r3
 800646e:	d202      	bcs.n	8006476 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006470:	4a09      	ldr	r2, [pc, #36]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6013      	str	r3, [r2, #0]
}
 8006476:	bf00      	nop
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000380 	.word	0x20000380
 8006484:	200002a4 	.word	0x200002a4
 8006488:	20000384 	.word	0x20000384
 800648c:	20000368 	.word	0x20000368
 8006490:	20000338 	.word	0x20000338
 8006494:	20000334 	.word	0x20000334
 8006498:	2000039c 	.word	0x2000039c

0800649c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3b04      	subs	r3, #4
 80064ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b04      	subs	r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f023 0201 	bic.w	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3b04      	subs	r3, #4
 80064ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80064cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006500 <pxPortInitialiseStack+0x64>)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3b14      	subs	r3, #20
 80064d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3b04      	subs	r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f06f 0202 	mvn.w	r2, #2
 80064ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3b20      	subs	r3, #32
 80064f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80064f2:	68fb      	ldr	r3, [r7, #12]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	08006505 	.word	0x08006505

08006504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800650e:	4b13      	ldr	r3, [pc, #76]	@ (800655c <prvTaskExitError+0x58>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006516:	d00b      	beq.n	8006530 <prvTaskExitError+0x2c>
        __asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	60fb      	str	r3, [r7, #12]
    }
 800652a:	bf00      	nop
 800652c:	bf00      	nop
 800652e:	e7fd      	b.n	800652c <prvTaskExitError+0x28>
        __asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60bb      	str	r3, [r7, #8]
    }
 8006542:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006544:	bf00      	nop
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0fc      	beq.n	8006546 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000020 	.word	0x20000020

08006560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <pxCurrentTCBConst2>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	6808      	ldr	r0, [r1, #0]
 8006566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	f380 8809 	msr	PSP, r0
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	4770      	bx	lr
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst2>:
 8006580:	200002a4 	.word	0x200002a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006588:	4808      	ldr	r0, [pc, #32]	@ (80065ac <prvPortStartFirstTask+0x24>)
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	6800      	ldr	r0, [r0, #0]
 800658e:	f380 8808 	msr	MSP, r0
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8814 	msr	CONTROL, r0
 800659a:	b662      	cpsie	i
 800659c:	b661      	cpsie	f
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	df00      	svc	0
 80065a8:	bf00      	nop
 80065aa:	0000      	.short	0x0000
 80065ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop

080065b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065ba:	4b47      	ldr	r3, [pc, #284]	@ (80066d8 <xPortStartScheduler+0x124>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a47      	ldr	r2, [pc, #284]	@ (80066dc <xPortStartScheduler+0x128>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10b      	bne.n	80065dc <xPortStartScheduler+0x28>
        __asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	613b      	str	r3, [r7, #16]
    }
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065dc:	4b3e      	ldr	r3, [pc, #248]	@ (80066d8 <xPortStartScheduler+0x124>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3f      	ldr	r2, [pc, #252]	@ (80066e0 <xPortStartScheduler+0x12c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10b      	bne.n	80065fe <xPortStartScheduler+0x4a>
        __asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60fb      	str	r3, [r7, #12]
    }
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065fe:	4b39      	ldr	r3, [pc, #228]	@ (80066e4 <xPortStartScheduler+0x130>)
 8006600:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	22ff      	movs	r2, #255	@ 0xff
 800660e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006620:	b2da      	uxtb	r2, r3
 8006622:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <xPortStartScheduler+0x134>)
 8006624:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006626:	4b31      	ldr	r3, [pc, #196]	@ (80066ec <xPortStartScheduler+0x138>)
 8006628:	2207      	movs	r2, #7
 800662a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800662c:	e009      	b.n	8006642 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800662e:	4b2f      	ldr	r3, [pc, #188]	@ (80066ec <xPortStartScheduler+0x138>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3b01      	subs	r3, #1
 8006634:	4a2d      	ldr	r2, [pc, #180]	@ (80066ec <xPortStartScheduler+0x138>)
 8006636:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664a:	2b80      	cmp	r3, #128	@ 0x80
 800664c:	d0ef      	beq.n	800662e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800664e:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <xPortStartScheduler+0x138>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f1c3 0307 	rsb	r3, r3, #7
 8006656:	2b04      	cmp	r3, #4
 8006658:	d00b      	beq.n	8006672 <xPortStartScheduler+0xbe>
        __asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	60bb      	str	r3, [r7, #8]
    }
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006672:	4b1e      	ldr	r3, [pc, #120]	@ (80066ec <xPortStartScheduler+0x138>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	4a1c      	ldr	r2, [pc, #112]	@ (80066ec <xPortStartScheduler+0x138>)
 800667a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800667c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ec <xPortStartScheduler+0x138>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006684:	4a19      	ldr	r2, [pc, #100]	@ (80066ec <xPortStartScheduler+0x138>)
 8006686:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006690:	4b17      	ldr	r3, [pc, #92]	@ (80066f0 <xPortStartScheduler+0x13c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a16      	ldr	r2, [pc, #88]	@ (80066f0 <xPortStartScheduler+0x13c>)
 8006696:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800669a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800669c:	4b14      	ldr	r3, [pc, #80]	@ (80066f0 <xPortStartScheduler+0x13c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a13      	ldr	r2, [pc, #76]	@ (80066f0 <xPortStartScheduler+0x13c>)
 80066a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80066a8:	f000 f8e0 	bl	800686c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80066ac:	4b11      	ldr	r3, [pc, #68]	@ (80066f4 <xPortStartScheduler+0x140>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80066b2:	f000 f8ff 	bl	80068b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066b6:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <xPortStartScheduler+0x144>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a0f      	ldr	r2, [pc, #60]	@ (80066f8 <xPortStartScheduler+0x144>)
 80066bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80066c2:	f7ff ff61 	bl	8006588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80066c6:	f7ff fd5b 	bl	8006180 <vTaskSwitchContext>
    prvTaskExitError();
 80066ca:	f7ff ff1b 	bl	8006504 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed00 	.word	0xe000ed00
 80066dc:	410fc271 	.word	0x410fc271
 80066e0:	410fc270 	.word	0x410fc270
 80066e4:	e000e400 	.word	0xe000e400
 80066e8:	200003a8 	.word	0x200003a8
 80066ec:	200003ac 	.word	0x200003ac
 80066f0:	e000ed20 	.word	0xe000ed20
 80066f4:	20000020 	.word	0x20000020
 80066f8:	e000ef34 	.word	0xe000ef34

080066fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
        __asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	607b      	str	r3, [r7, #4]
    }
 8006714:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006716:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <vPortEnterCritical+0x5c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <vPortEnterCritical+0x5c>)
 800671e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006720:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <vPortEnterCritical+0x5c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d110      	bne.n	800674a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006728:	4b0c      	ldr	r3, [pc, #48]	@ (800675c <vPortEnterCritical+0x60>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <vPortEnterCritical+0x4e>
        __asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	603b      	str	r3, [r7, #0]
    }
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <vPortEnterCritical+0x4a>
    }
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000020 	.word	0x20000020
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006766:	4b12      	ldr	r3, [pc, #72]	@ (80067b0 <vPortExitCritical+0x50>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <vPortExitCritical+0x26>
        __asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	607b      	str	r3, [r7, #4]
    }
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <vPortExitCritical+0x50>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a08      	ldr	r2, [pc, #32]	@ (80067b0 <vPortExitCritical+0x50>)
 800678e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006790:	4b07      	ldr	r3, [pc, #28]	@ (80067b0 <vPortExitCritical+0x50>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <vPortExitCritical+0x44>
 8006798:	2300      	movs	r3, #0
 800679a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80067a2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	20000020 	.word	0x20000020
	...

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4b15      	ldr	r3, [pc, #84]	@ (8006820 <pxCurrentTCBConst>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	f01e 0f10 	tst.w	lr, #16
 80067d0:	bf08      	it	eq
 80067d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067e4:	f380 8811 	msr	BASEPRI, r0
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f7ff fcc6 	bl	8006180 <vTaskSwitchContext>
 80067f4:	f04f 0000 	mov.w	r0, #0
 80067f8:	f380 8811 	msr	BASEPRI, r0
 80067fc:	bc09      	pop	{r0, r3}
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	6808      	ldr	r0, [r1, #0]
 8006802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006806:	f01e 0f10 	tst.w	lr, #16
 800680a:	bf08      	it	eq
 800680c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006810:	f380 8809 	msr	PSP, r0
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst>:
 8006820:	200002a4 	.word	0x200002a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
        __asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	607b      	str	r3, [r7, #4]
    }
 8006840:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006842:	f7ff fb85 	bl	8005f50 <xTaskIncrementTick>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800684c:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <SysTick_Handler+0x40>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f383 8811 	msr	BASEPRI, r3
    }
 800685e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006870:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006876:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <vPortSetupTimerInterrupt+0x38>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800687c:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <vPortSetupTimerInterrupt+0x3c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0a      	ldr	r2, [pc, #40]	@ (80068ac <vPortSetupTimerInterrupt+0x40>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	4a09      	ldr	r2, [pc, #36]	@ (80068b0 <vPortSetupTimerInterrupt+0x44>)
 800688a:	3b01      	subs	r3, #1
 800688c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800688e:	4b04      	ldr	r3, [pc, #16]	@ (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	e000e010 	.word	0xe000e010
 80068a4:	e000e018 	.word	0xe000e018
 80068a8:	20000000 	.word	0x20000000
 80068ac:	10624dd3 	.word	0x10624dd3
 80068b0:	e000e014 	.word	0xe000e014

080068b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80068b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068c4 <vPortEnableVFP+0x10>
 80068b8:	6801      	ldr	r1, [r0, #0]
 80068ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068be:	6001      	str	r1, [r0, #0]
 80068c0:	4770      	bx	lr
 80068c2:	0000      	.short	0x0000
 80068c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop

080068cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08a      	sub	sp, #40	@ 0x28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80068d8:	f7ff fa30 	bl	8005d3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80068dc:	4b54      	ldr	r3, [pc, #336]	@ (8006a30 <pvPortMalloc+0x164>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80068e4:	f000 f90c 	bl	8006b00 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d012      	beq.n	8006914 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80068ee:	2208      	movs	r2, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	3308      	adds	r3, #8
 80068fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	43db      	mvns	r3, r3
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	429a      	cmp	r2, r3
 8006904:	d804      	bhi.n	8006910 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	4413      	add	r3, r2
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	e001      	b.n	8006914 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	db71      	blt.n	80069fe <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d06e      	beq.n	80069fe <pvPortMalloc+0x132>
 8006920:	4b44      	ldr	r3, [pc, #272]	@ (8006a34 <pvPortMalloc+0x168>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d869      	bhi.n	80069fe <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800692a:	4b43      	ldr	r3, [pc, #268]	@ (8006a38 <pvPortMalloc+0x16c>)
 800692c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800692e:	4b42      	ldr	r3, [pc, #264]	@ (8006a38 <pvPortMalloc+0x16c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006934:	e004      	b.n	8006940 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d903      	bls.n	8006952 <pvPortMalloc+0x86>
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f1      	bne.n	8006936 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006952:	4b37      	ldr	r3, [pc, #220]	@ (8006a30 <pvPortMalloc+0x164>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006958:	429a      	cmp	r2, r3
 800695a:	d050      	beq.n	80069fe <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2208      	movs	r2, #8
 8006962:	4413      	add	r3, r2
 8006964:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	1ad2      	subs	r2, r2, r3
 8006976:	2308      	movs	r3, #8
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	429a      	cmp	r2, r3
 800697c:	d920      	bls.n	80069c0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800697e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4413      	add	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <pvPortMalloc+0xdc>
        __asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	613b      	str	r3, [r7, #16]
    }
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f000 f8fc 	bl	8006bb8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a34 <pvPortMalloc+0x168>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006a34 <pvPortMalloc+0x168>)
 80069cc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069ce:	4b19      	ldr	r3, [pc, #100]	@ (8006a34 <pvPortMalloc+0x168>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b1a      	ldr	r3, [pc, #104]	@ (8006a3c <pvPortMalloc+0x170>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d203      	bcs.n	80069e2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069da:	4b16      	ldr	r3, [pc, #88]	@ (8006a34 <pvPortMalloc+0x168>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a17      	ldr	r2, [pc, #92]	@ (8006a3c <pvPortMalloc+0x170>)
 80069e0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80069f4:	4b12      	ldr	r3, [pc, #72]	@ (8006a40 <pvPortMalloc+0x174>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a11      	ldr	r2, [pc, #68]	@ (8006a40 <pvPortMalloc+0x174>)
 80069fc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80069fe:	f7ff f9ab 	bl	8005d58 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <pvPortMalloc+0x158>
        __asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60fb      	str	r3, [r7, #12]
    }
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <pvPortMalloc+0x154>
    return pvReturn;
 8006a24:	69fb      	ldr	r3, [r7, #28]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3728      	adds	r7, #40	@ 0x28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20012fb8 	.word	0x20012fb8
 8006a34:	20012fbc 	.word	0x20012fbc
 8006a38:	20012fb0 	.word	0x20012fb0
 8006a3c:	20012fc0 	.word	0x20012fc0
 8006a40:	20012fc4 	.word	0x20012fc4

08006a44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d04b      	beq.n	8006aee <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006a56:	2308      	movs	r3, #8
 8006a58:	425b      	negs	r3, r3
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db0b      	blt.n	8006a84 <vPortFree+0x40>
        __asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60fb      	str	r3, [r7, #12]
    }
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <vPortFree+0x60>
        __asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	60bb      	str	r3, [r7, #8]
    }
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	0fdb      	lsrs	r3, r3, #31
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01c      	beq.n	8006aee <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d118      	bne.n	8006aee <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006ac8:	f7ff f938 	bl	8005d3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <vPortFree+0xb4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	4a08      	ldr	r2, [pc, #32]	@ (8006af8 <vPortFree+0xb4>)
 8006ad8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f000 f86c 	bl	8006bb8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006ae0:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <vPortFree+0xb8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	4a05      	ldr	r2, [pc, #20]	@ (8006afc <vPortFree+0xb8>)
 8006ae8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006aea:	f7ff f935 	bl	8005d58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006aee:	bf00      	nop
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20012fbc 	.word	0x20012fbc
 8006afc:	20012fc8 	.word	0x20012fc8

08006b00 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b06:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8006b0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006b0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ba4 <prvHeapInit+0xa4>)
 8006b0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3307      	adds	r3, #7
 8006b1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0307 	bic.w	r3, r3, #7
 8006b26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba4 <prvHeapInit+0xa4>)
 8006b30:	4413      	add	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba8 <prvHeapInit+0xa8>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <prvHeapInit+0xa8>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4a13      	ldr	r2, [pc, #76]	@ (8006bac <prvHeapInit+0xac>)
 8006b60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <prvHeapInit+0xac>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006b6a:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <prvHeapInit+0xac>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <prvHeapInit+0xac>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a08      	ldr	r2, [pc, #32]	@ (8006bb0 <prvHeapInit+0xb0>)
 8006b8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	4a07      	ldr	r2, [pc, #28]	@ (8006bb4 <prvHeapInit+0xb4>)
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	200003b0 	.word	0x200003b0
 8006ba8:	20012fb0 	.word	0x20012fb0
 8006bac:	20012fb8 	.word	0x20012fb8
 8006bb0:	20012fc0 	.word	0x20012fc0
 8006bb4:	20012fbc 	.word	0x20012fbc

08006bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bc0:	4b28      	ldr	r3, [pc, #160]	@ (8006c64 <prvInsertBlockIntoFreeList+0xac>)
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e002      	b.n	8006bcc <prvInsertBlockIntoFreeList+0x14>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d8f7      	bhi.n	8006bc6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4413      	add	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d108      	bne.n	8006bfa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	441a      	add	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d118      	bne.n	8006c40 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b15      	ldr	r3, [pc, #84]	@ (8006c68 <prvInsertBlockIntoFreeList+0xb0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d00d      	beq.n	8006c36 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	441a      	add	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e008      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c36:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <prvInsertBlockIntoFreeList+0xb0>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e003      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d002      	beq.n	8006c56 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20012fb0 	.word	0x20012fb0
 8006c68:	20012fb8 	.word	0x20012fb8

08006c6c <std>:
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	e9c0 3300 	strd	r3, r3, [r0]
 8006c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c7a:	6083      	str	r3, [r0, #8]
 8006c7c:	8181      	strh	r1, [r0, #12]
 8006c7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c80:	81c2      	strh	r2, [r0, #14]
 8006c82:	6183      	str	r3, [r0, #24]
 8006c84:	4619      	mov	r1, r3
 8006c86:	2208      	movs	r2, #8
 8006c88:	305c      	adds	r0, #92	@ 0x5c
 8006c8a:	f000 f9e7 	bl	800705c <memset>
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <std+0x58>)
 8006c90:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c92:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <std+0x5c>)
 8006c94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <std+0x60>)
 8006c98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x64>)
 8006c9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <std+0x68>)
 8006ca0:	6224      	str	r4, [r4, #32]
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d006      	beq.n	8006cb4 <std+0x48>
 8006ca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006caa:	4294      	cmp	r4, r2
 8006cac:	d002      	beq.n	8006cb4 <std+0x48>
 8006cae:	33d0      	adds	r3, #208	@ 0xd0
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d105      	bne.n	8006cc0 <std+0x54>
 8006cb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cbc:	f000 ba46 	b.w	800714c <__retarget_lock_init_recursive>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	bf00      	nop
 8006cc4:	08006ead 	.word	0x08006ead
 8006cc8:	08006ecf 	.word	0x08006ecf
 8006ccc:	08006f07 	.word	0x08006f07
 8006cd0:	08006f2b 	.word	0x08006f2b
 8006cd4:	20012fcc 	.word	0x20012fcc

08006cd8 <stdio_exit_handler>:
 8006cd8:	4a02      	ldr	r2, [pc, #8]	@ (8006ce4 <stdio_exit_handler+0xc>)
 8006cda:	4903      	ldr	r1, [pc, #12]	@ (8006ce8 <stdio_exit_handler+0x10>)
 8006cdc:	4803      	ldr	r0, [pc, #12]	@ (8006cec <stdio_exit_handler+0x14>)
 8006cde:	f000 b869 	b.w	8006db4 <_fwalk_sglue>
 8006ce2:	bf00      	nop
 8006ce4:	20000024 	.word	0x20000024
 8006ce8:	0800744d 	.word	0x0800744d
 8006cec:	20000034 	.word	0x20000034

08006cf0 <cleanup_stdio>:
 8006cf0:	6841      	ldr	r1, [r0, #4]
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <cleanup_stdio+0x34>)
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	d001      	beq.n	8006d00 <cleanup_stdio+0x10>
 8006cfc:	f000 fba6 	bl	800744c <_fflush_r>
 8006d00:	68a1      	ldr	r1, [r4, #8]
 8006d02:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <cleanup_stdio+0x38>)
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d002      	beq.n	8006d0e <cleanup_stdio+0x1e>
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fb9f 	bl	800744c <_fflush_r>
 8006d0e:	68e1      	ldr	r1, [r4, #12]
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <cleanup_stdio+0x3c>)
 8006d12:	4299      	cmp	r1, r3
 8006d14:	d004      	beq.n	8006d20 <cleanup_stdio+0x30>
 8006d16:	4620      	mov	r0, r4
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f000 bb96 	b.w	800744c <_fflush_r>
 8006d20:	bd10      	pop	{r4, pc}
 8006d22:	bf00      	nop
 8006d24:	20012fcc 	.word	0x20012fcc
 8006d28:	20013034 	.word	0x20013034
 8006d2c:	2001309c 	.word	0x2001309c

08006d30 <global_stdio_init.part.0>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <global_stdio_init.part.0+0x30>)
 8006d34:	4c0b      	ldr	r4, [pc, #44]	@ (8006d64 <global_stdio_init.part.0+0x34>)
 8006d36:	4a0c      	ldr	r2, [pc, #48]	@ (8006d68 <global_stdio_init.part.0+0x38>)
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2104      	movs	r1, #4
 8006d40:	f7ff ff94 	bl	8006c6c <std>
 8006d44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d48:	2201      	movs	r2, #1
 8006d4a:	2109      	movs	r1, #9
 8006d4c:	f7ff ff8e 	bl	8006c6c <std>
 8006d50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d54:	2202      	movs	r2, #2
 8006d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5a:	2112      	movs	r1, #18
 8006d5c:	f7ff bf86 	b.w	8006c6c <std>
 8006d60:	20013104 	.word	0x20013104
 8006d64:	20012fcc 	.word	0x20012fcc
 8006d68:	08006cd9 	.word	0x08006cd9

08006d6c <__sfp_lock_acquire>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	@ (8006d74 <__sfp_lock_acquire+0x8>)
 8006d6e:	f000 b9ee 	b.w	800714e <__retarget_lock_acquire_recursive>
 8006d72:	bf00      	nop
 8006d74:	2001310d 	.word	0x2001310d

08006d78 <__sfp_lock_release>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__sfp_lock_release+0x8>)
 8006d7a:	f000 b9e9 	b.w	8007150 <__retarget_lock_release_recursive>
 8006d7e:	bf00      	nop
 8006d80:	2001310d 	.word	0x2001310d

08006d84 <__sinit>:
 8006d84:	b510      	push	{r4, lr}
 8006d86:	4604      	mov	r4, r0
 8006d88:	f7ff fff0 	bl	8006d6c <__sfp_lock_acquire>
 8006d8c:	6a23      	ldr	r3, [r4, #32]
 8006d8e:	b11b      	cbz	r3, 8006d98 <__sinit+0x14>
 8006d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d94:	f7ff bff0 	b.w	8006d78 <__sfp_lock_release>
 8006d98:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <__sinit+0x28>)
 8006d9a:	6223      	str	r3, [r4, #32]
 8006d9c:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <__sinit+0x2c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f5      	bne.n	8006d90 <__sinit+0xc>
 8006da4:	f7ff ffc4 	bl	8006d30 <global_stdio_init.part.0>
 8006da8:	e7f2      	b.n	8006d90 <__sinit+0xc>
 8006daa:	bf00      	nop
 8006dac:	08006cf1 	.word	0x08006cf1
 8006db0:	20013104 	.word	0x20013104

08006db4 <_fwalk_sglue>:
 8006db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	4607      	mov	r7, r0
 8006dba:	4688      	mov	r8, r1
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc8:	d505      	bpl.n	8006dd6 <_fwalk_sglue+0x22>
 8006dca:	6824      	ldr	r4, [r4, #0]
 8006dcc:	2c00      	cmp	r4, #0
 8006dce:	d1f7      	bne.n	8006dc0 <_fwalk_sglue+0xc>
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d907      	bls.n	8006dec <_fwalk_sglue+0x38>
 8006ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006de0:	3301      	adds	r3, #1
 8006de2:	d003      	beq.n	8006dec <_fwalk_sglue+0x38>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c0      	blx	r8
 8006dea:	4306      	orrs	r6, r0
 8006dec:	3568      	adds	r5, #104	@ 0x68
 8006dee:	e7e9      	b.n	8006dc4 <_fwalk_sglue+0x10>

08006df0 <_puts_r>:
 8006df0:	6a03      	ldr	r3, [r0, #32]
 8006df2:	b570      	push	{r4, r5, r6, lr}
 8006df4:	6884      	ldr	r4, [r0, #8]
 8006df6:	4605      	mov	r5, r0
 8006df8:	460e      	mov	r6, r1
 8006dfa:	b90b      	cbnz	r3, 8006e00 <_puts_r+0x10>
 8006dfc:	f7ff ffc2 	bl	8006d84 <__sinit>
 8006e00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d405      	bmi.n	8006e12 <_puts_r+0x22>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	0598      	lsls	r0, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_puts_r+0x22>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e0e:	f000 f99e 	bl	800714e <__retarget_lock_acquire_recursive>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	0719      	lsls	r1, r3, #28
 8006e16:	d502      	bpl.n	8006e1e <_puts_r+0x2e>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d135      	bne.n	8006e8a <_puts_r+0x9a>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f8c5 	bl	8006fb0 <__swsetup_r>
 8006e26:	b380      	cbz	r0, 8006e8a <_puts_r+0x9a>
 8006e28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e2e:	07da      	lsls	r2, r3, #31
 8006e30:	d405      	bmi.n	8006e3e <_puts_r+0x4e>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	059b      	lsls	r3, r3, #22
 8006e36:	d402      	bmi.n	8006e3e <_puts_r+0x4e>
 8006e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e3a:	f000 f989 	bl	8007150 <__retarget_lock_release_recursive>
 8006e3e:	4628      	mov	r0, r5
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da04      	bge.n	8006e50 <_puts_r+0x60>
 8006e46:	69a2      	ldr	r2, [r4, #24]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	dc17      	bgt.n	8006e7c <_puts_r+0x8c>
 8006e4c:	290a      	cmp	r1, #10
 8006e4e:	d015      	beq.n	8006e7c <_puts_r+0x8c>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	7019      	strb	r1, [r3, #0]
 8006e58:	68a3      	ldr	r3, [r4, #8]
 8006e5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	2900      	cmp	r1, #0
 8006e64:	d1ed      	bne.n	8006e42 <_puts_r+0x52>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da11      	bge.n	8006e8e <_puts_r+0x9e>
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	210a      	movs	r1, #10
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 f85f 	bl	8006f32 <__swbuf_r>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d0d7      	beq.n	8006e28 <_puts_r+0x38>
 8006e78:	250a      	movs	r5, #10
 8006e7a:	e7d7      	b.n	8006e2c <_puts_r+0x3c>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f857 	bl	8006f32 <__swbuf_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1e7      	bne.n	8006e58 <_puts_r+0x68>
 8006e88:	e7ce      	b.n	8006e28 <_puts_r+0x38>
 8006e8a:	3e01      	subs	r6, #1
 8006e8c:	e7e4      	b.n	8006e58 <_puts_r+0x68>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	220a      	movs	r2, #10
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e7ee      	b.n	8006e78 <_puts_r+0x88>
	...

08006e9c <puts>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ea8 <puts+0xc>)
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	f7ff bfa5 	b.w	8006df0 <_puts_r>
 8006ea6:	bf00      	nop
 8006ea8:	20000030 	.word	0x20000030

08006eac <__sread>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	460c      	mov	r4, r1
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	f000 f8fc 	bl	80070b0 <_read_r>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	bfab      	itete	ge
 8006ebc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec0:	181b      	addge	r3, r3, r0
 8006ec2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ec6:	bfac      	ite	ge
 8006ec8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006eca:	81a3      	strhlt	r3, [r4, #12]
 8006ecc:	bd10      	pop	{r4, pc}

08006ece <__swrite>:
 8006ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	461f      	mov	r7, r3
 8006ed4:	898b      	ldrh	r3, [r1, #12]
 8006ed6:	05db      	lsls	r3, r3, #23
 8006ed8:	4605      	mov	r5, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	4616      	mov	r6, r2
 8006ede:	d505      	bpl.n	8006eec <__swrite+0x1e>
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f000 f8d0 	bl	800708c <_lseek_r>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	4632      	mov	r2, r6
 8006efa:	463b      	mov	r3, r7
 8006efc:	4628      	mov	r0, r5
 8006efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	f000 b8e7 	b.w	80070d4 <_write_r>

08006f06 <__sseek>:
 8006f06:	b510      	push	{r4, lr}
 8006f08:	460c      	mov	r4, r1
 8006f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f0e:	f000 f8bd 	bl	800708c <_lseek_r>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	bf15      	itete	ne
 8006f18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f22:	81a3      	strheq	r3, [r4, #12]
 8006f24:	bf18      	it	ne
 8006f26:	81a3      	strhne	r3, [r4, #12]
 8006f28:	bd10      	pop	{r4, pc}

08006f2a <__sclose>:
 8006f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2e:	f000 b89d 	b.w	800706c <_close_r>

08006f32 <__swbuf_r>:
 8006f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f34:	460e      	mov	r6, r1
 8006f36:	4614      	mov	r4, r2
 8006f38:	4605      	mov	r5, r0
 8006f3a:	b118      	cbz	r0, 8006f44 <__swbuf_r+0x12>
 8006f3c:	6a03      	ldr	r3, [r0, #32]
 8006f3e:	b90b      	cbnz	r3, 8006f44 <__swbuf_r+0x12>
 8006f40:	f7ff ff20 	bl	8006d84 <__sinit>
 8006f44:	69a3      	ldr	r3, [r4, #24]
 8006f46:	60a3      	str	r3, [r4, #8]
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	071a      	lsls	r2, r3, #28
 8006f4c:	d501      	bpl.n	8006f52 <__swbuf_r+0x20>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	b943      	cbnz	r3, 8006f64 <__swbuf_r+0x32>
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 f82b 	bl	8006fb0 <__swsetup_r>
 8006f5a:	b118      	cbz	r0, 8006f64 <__swbuf_r+0x32>
 8006f5c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006f60:	4638      	mov	r0, r7
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	6922      	ldr	r2, [r4, #16]
 8006f68:	1a98      	subs	r0, r3, r2
 8006f6a:	6963      	ldr	r3, [r4, #20]
 8006f6c:	b2f6      	uxtb	r6, r6
 8006f6e:	4283      	cmp	r3, r0
 8006f70:	4637      	mov	r7, r6
 8006f72:	dc05      	bgt.n	8006f80 <__swbuf_r+0x4e>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fa68 	bl	800744c <_fflush_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1ed      	bne.n	8006f5c <__swbuf_r+0x2a>
 8006f80:	68a3      	ldr	r3, [r4, #8]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	6022      	str	r2, [r4, #0]
 8006f8c:	701e      	strb	r6, [r3, #0]
 8006f8e:	6962      	ldr	r2, [r4, #20]
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d004      	beq.n	8006fa0 <__swbuf_r+0x6e>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	07db      	lsls	r3, r3, #31
 8006f9a:	d5e1      	bpl.n	8006f60 <__swbuf_r+0x2e>
 8006f9c:	2e0a      	cmp	r6, #10
 8006f9e:	d1df      	bne.n	8006f60 <__swbuf_r+0x2e>
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 fa52 	bl	800744c <_fflush_r>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d0d9      	beq.n	8006f60 <__swbuf_r+0x2e>
 8006fac:	e7d6      	b.n	8006f5c <__swbuf_r+0x2a>
	...

08006fb0 <__swsetup_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4b29      	ldr	r3, [pc, #164]	@ (8007058 <__swsetup_r+0xa8>)
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	460c      	mov	r4, r1
 8006fba:	b118      	cbz	r0, 8006fc4 <__swsetup_r+0x14>
 8006fbc:	6a03      	ldr	r3, [r0, #32]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <__swsetup_r+0x14>
 8006fc0:	f7ff fee0 	bl	8006d84 <__sinit>
 8006fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc8:	0719      	lsls	r1, r3, #28
 8006fca:	d422      	bmi.n	8007012 <__swsetup_r+0x62>
 8006fcc:	06da      	lsls	r2, r3, #27
 8006fce:	d407      	bmi.n	8006fe0 <__swsetup_r+0x30>
 8006fd0:	2209      	movs	r2, #9
 8006fd2:	602a      	str	r2, [r5, #0]
 8006fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fde:	e033      	b.n	8007048 <__swsetup_r+0x98>
 8006fe0:	0758      	lsls	r0, r3, #29
 8006fe2:	d512      	bpl.n	800700a <__swsetup_r+0x5a>
 8006fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fe6:	b141      	cbz	r1, 8006ffa <__swsetup_r+0x4a>
 8006fe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fec:	4299      	cmp	r1, r3
 8006fee:	d002      	beq.n	8006ff6 <__swsetup_r+0x46>
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 f8af 	bl	8007154 <_free_r>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	2300      	movs	r3, #0
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f043 0308 	orr.w	r3, r3, #8
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	b94b      	cbnz	r3, 800702a <__swsetup_r+0x7a>
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800701c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007020:	d003      	beq.n	800702a <__swsetup_r+0x7a>
 8007022:	4621      	mov	r1, r4
 8007024:	4628      	mov	r0, r5
 8007026:	f000 fa5f 	bl	80074e8 <__smakebuf_r>
 800702a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800702e:	f013 0201 	ands.w	r2, r3, #1
 8007032:	d00a      	beq.n	800704a <__swsetup_r+0x9a>
 8007034:	2200      	movs	r2, #0
 8007036:	60a2      	str	r2, [r4, #8]
 8007038:	6962      	ldr	r2, [r4, #20]
 800703a:	4252      	negs	r2, r2
 800703c:	61a2      	str	r2, [r4, #24]
 800703e:	6922      	ldr	r2, [r4, #16]
 8007040:	b942      	cbnz	r2, 8007054 <__swsetup_r+0xa4>
 8007042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007046:	d1c5      	bne.n	8006fd4 <__swsetup_r+0x24>
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	0799      	lsls	r1, r3, #30
 800704c:	bf58      	it	pl
 800704e:	6962      	ldrpl	r2, [r4, #20]
 8007050:	60a2      	str	r2, [r4, #8]
 8007052:	e7f4      	b.n	800703e <__swsetup_r+0x8e>
 8007054:	2000      	movs	r0, #0
 8007056:	e7f7      	b.n	8007048 <__swsetup_r+0x98>
 8007058:	20000030 	.word	0x20000030

0800705c <memset>:
 800705c:	4402      	add	r2, r0
 800705e:	4603      	mov	r3, r0
 8007060:	4293      	cmp	r3, r2
 8007062:	d100      	bne.n	8007066 <memset+0xa>
 8007064:	4770      	bx	lr
 8007066:	f803 1b01 	strb.w	r1, [r3], #1
 800706a:	e7f9      	b.n	8007060 <memset+0x4>

0800706c <_close_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d06      	ldr	r5, [pc, #24]	@ (8007088 <_close_r+0x1c>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	f7fa fb73 	bl	8001762 <_close>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_close_r+0x1a>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_close_r+0x1a>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20013108 	.word	0x20013108

0800708c <_lseek_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d07      	ldr	r5, [pc, #28]	@ (80070ac <_lseek_r+0x20>)
 8007090:	4604      	mov	r4, r0
 8007092:	4608      	mov	r0, r1
 8007094:	4611      	mov	r1, r2
 8007096:	2200      	movs	r2, #0
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7fa fb88 	bl	80017b0 <_lseek>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_lseek_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_lseek_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20013108 	.word	0x20013108

080070b0 <_read_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d07      	ldr	r5, [pc, #28]	@ (80070d0 <_read_r+0x20>)
 80070b4:	4604      	mov	r4, r0
 80070b6:	4608      	mov	r0, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	2200      	movs	r2, #0
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fa fb16 	bl	80016f0 <_read>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_read_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_read_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20013108 	.word	0x20013108

080070d4 <_write_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d07      	ldr	r5, [pc, #28]	@ (80070f4 <_write_r+0x20>)
 80070d8:	4604      	mov	r4, r0
 80070da:	4608      	mov	r0, r1
 80070dc:	4611      	mov	r1, r2
 80070de:	2200      	movs	r2, #0
 80070e0:	602a      	str	r2, [r5, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f7fa fb21 	bl	800172a <_write>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_write_r+0x1e>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_write_r+0x1e>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20013108 	.word	0x20013108

080070f8 <__errno>:
 80070f8:	4b01      	ldr	r3, [pc, #4]	@ (8007100 <__errno+0x8>)
 80070fa:	6818      	ldr	r0, [r3, #0]
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	20000030 	.word	0x20000030

08007104 <__libc_init_array>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4d0d      	ldr	r5, [pc, #52]	@ (800713c <__libc_init_array+0x38>)
 8007108:	4c0d      	ldr	r4, [pc, #52]	@ (8007140 <__libc_init_array+0x3c>)
 800710a:	1b64      	subs	r4, r4, r5
 800710c:	10a4      	asrs	r4, r4, #2
 800710e:	2600      	movs	r6, #0
 8007110:	42a6      	cmp	r6, r4
 8007112:	d109      	bne.n	8007128 <__libc_init_array+0x24>
 8007114:	4d0b      	ldr	r5, [pc, #44]	@ (8007144 <__libc_init_array+0x40>)
 8007116:	4c0c      	ldr	r4, [pc, #48]	@ (8007148 <__libc_init_array+0x44>)
 8007118:	f000 fc62 	bl	80079e0 <_init>
 800711c:	1b64      	subs	r4, r4, r5
 800711e:	10a4      	asrs	r4, r4, #2
 8007120:	2600      	movs	r6, #0
 8007122:	42a6      	cmp	r6, r4
 8007124:	d105      	bne.n	8007132 <__libc_init_array+0x2e>
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	f855 3b04 	ldr.w	r3, [r5], #4
 800712c:	4798      	blx	r3
 800712e:	3601      	adds	r6, #1
 8007130:	e7ee      	b.n	8007110 <__libc_init_array+0xc>
 8007132:	f855 3b04 	ldr.w	r3, [r5], #4
 8007136:	4798      	blx	r3
 8007138:	3601      	adds	r6, #1
 800713a:	e7f2      	b.n	8007122 <__libc_init_array+0x1e>
 800713c:	08007aa8 	.word	0x08007aa8
 8007140:	08007aa8 	.word	0x08007aa8
 8007144:	08007aa8 	.word	0x08007aa8
 8007148:	08007aac 	.word	0x08007aac

0800714c <__retarget_lock_init_recursive>:
 800714c:	4770      	bx	lr

0800714e <__retarget_lock_acquire_recursive>:
 800714e:	4770      	bx	lr

08007150 <__retarget_lock_release_recursive>:
 8007150:	4770      	bx	lr
	...

08007154 <_free_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4605      	mov	r5, r0
 8007158:	2900      	cmp	r1, #0
 800715a:	d041      	beq.n	80071e0 <_free_r+0x8c>
 800715c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007160:	1f0c      	subs	r4, r1, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfb8      	it	lt
 8007166:	18e4      	addlt	r4, r4, r3
 8007168:	f000 f8e0 	bl	800732c <__malloc_lock>
 800716c:	4a1d      	ldr	r2, [pc, #116]	@ (80071e4 <_free_r+0x90>)
 800716e:	6813      	ldr	r3, [r2, #0]
 8007170:	b933      	cbnz	r3, 8007180 <_free_r+0x2c>
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	6014      	str	r4, [r2, #0]
 8007176:	4628      	mov	r0, r5
 8007178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717c:	f000 b8dc 	b.w	8007338 <__malloc_unlock>
 8007180:	42a3      	cmp	r3, r4
 8007182:	d908      	bls.n	8007196 <_free_r+0x42>
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	1821      	adds	r1, r4, r0
 8007188:	428b      	cmp	r3, r1
 800718a:	bf01      	itttt	eq
 800718c:	6819      	ldreq	r1, [r3, #0]
 800718e:	685b      	ldreq	r3, [r3, #4]
 8007190:	1809      	addeq	r1, r1, r0
 8007192:	6021      	streq	r1, [r4, #0]
 8007194:	e7ed      	b.n	8007172 <_free_r+0x1e>
 8007196:	461a      	mov	r2, r3
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	b10b      	cbz	r3, 80071a0 <_free_r+0x4c>
 800719c:	42a3      	cmp	r3, r4
 800719e:	d9fa      	bls.n	8007196 <_free_r+0x42>
 80071a0:	6811      	ldr	r1, [r2, #0]
 80071a2:	1850      	adds	r0, r2, r1
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d10b      	bne.n	80071c0 <_free_r+0x6c>
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	4401      	add	r1, r0
 80071ac:	1850      	adds	r0, r2, r1
 80071ae:	4283      	cmp	r3, r0
 80071b0:	6011      	str	r1, [r2, #0]
 80071b2:	d1e0      	bne.n	8007176 <_free_r+0x22>
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	6053      	str	r3, [r2, #4]
 80071ba:	4408      	add	r0, r1
 80071bc:	6010      	str	r0, [r2, #0]
 80071be:	e7da      	b.n	8007176 <_free_r+0x22>
 80071c0:	d902      	bls.n	80071c8 <_free_r+0x74>
 80071c2:	230c      	movs	r3, #12
 80071c4:	602b      	str	r3, [r5, #0]
 80071c6:	e7d6      	b.n	8007176 <_free_r+0x22>
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	1821      	adds	r1, r4, r0
 80071cc:	428b      	cmp	r3, r1
 80071ce:	bf04      	itt	eq
 80071d0:	6819      	ldreq	r1, [r3, #0]
 80071d2:	685b      	ldreq	r3, [r3, #4]
 80071d4:	6063      	str	r3, [r4, #4]
 80071d6:	bf04      	itt	eq
 80071d8:	1809      	addeq	r1, r1, r0
 80071da:	6021      	streq	r1, [r4, #0]
 80071dc:	6054      	str	r4, [r2, #4]
 80071de:	e7ca      	b.n	8007176 <_free_r+0x22>
 80071e0:	bd38      	pop	{r3, r4, r5, pc}
 80071e2:	bf00      	nop
 80071e4:	20013114 	.word	0x20013114

080071e8 <sbrk_aligned>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007228 <sbrk_aligned+0x40>)
 80071ec:	460c      	mov	r4, r1
 80071ee:	6831      	ldr	r1, [r6, #0]
 80071f0:	4605      	mov	r5, r0
 80071f2:	b911      	cbnz	r1, 80071fa <sbrk_aligned+0x12>
 80071f4:	f000 f9d6 	bl	80075a4 <_sbrk_r>
 80071f8:	6030      	str	r0, [r6, #0]
 80071fa:	4621      	mov	r1, r4
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 f9d1 	bl	80075a4 <_sbrk_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d103      	bne.n	800720e <sbrk_aligned+0x26>
 8007206:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800720a:	4620      	mov	r0, r4
 800720c:	bd70      	pop	{r4, r5, r6, pc}
 800720e:	1cc4      	adds	r4, r0, #3
 8007210:	f024 0403 	bic.w	r4, r4, #3
 8007214:	42a0      	cmp	r0, r4
 8007216:	d0f8      	beq.n	800720a <sbrk_aligned+0x22>
 8007218:	1a21      	subs	r1, r4, r0
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f9c2 	bl	80075a4 <_sbrk_r>
 8007220:	3001      	adds	r0, #1
 8007222:	d1f2      	bne.n	800720a <sbrk_aligned+0x22>
 8007224:	e7ef      	b.n	8007206 <sbrk_aligned+0x1e>
 8007226:	bf00      	nop
 8007228:	20013110 	.word	0x20013110

0800722c <_malloc_r>:
 800722c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007230:	1ccd      	adds	r5, r1, #3
 8007232:	f025 0503 	bic.w	r5, r5, #3
 8007236:	3508      	adds	r5, #8
 8007238:	2d0c      	cmp	r5, #12
 800723a:	bf38      	it	cc
 800723c:	250c      	movcc	r5, #12
 800723e:	2d00      	cmp	r5, #0
 8007240:	4606      	mov	r6, r0
 8007242:	db01      	blt.n	8007248 <_malloc_r+0x1c>
 8007244:	42a9      	cmp	r1, r5
 8007246:	d904      	bls.n	8007252 <_malloc_r+0x26>
 8007248:	230c      	movs	r3, #12
 800724a:	6033      	str	r3, [r6, #0]
 800724c:	2000      	movs	r0, #0
 800724e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007252:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007328 <_malloc_r+0xfc>
 8007256:	f000 f869 	bl	800732c <__malloc_lock>
 800725a:	f8d8 3000 	ldr.w	r3, [r8]
 800725e:	461c      	mov	r4, r3
 8007260:	bb44      	cbnz	r4, 80072b4 <_malloc_r+0x88>
 8007262:	4629      	mov	r1, r5
 8007264:	4630      	mov	r0, r6
 8007266:	f7ff ffbf 	bl	80071e8 <sbrk_aligned>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	4604      	mov	r4, r0
 800726e:	d158      	bne.n	8007322 <_malloc_r+0xf6>
 8007270:	f8d8 4000 	ldr.w	r4, [r8]
 8007274:	4627      	mov	r7, r4
 8007276:	2f00      	cmp	r7, #0
 8007278:	d143      	bne.n	8007302 <_malloc_r+0xd6>
 800727a:	2c00      	cmp	r4, #0
 800727c:	d04b      	beq.n	8007316 <_malloc_r+0xea>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	4639      	mov	r1, r7
 8007282:	4630      	mov	r0, r6
 8007284:	eb04 0903 	add.w	r9, r4, r3
 8007288:	f000 f98c 	bl	80075a4 <_sbrk_r>
 800728c:	4581      	cmp	r9, r0
 800728e:	d142      	bne.n	8007316 <_malloc_r+0xea>
 8007290:	6821      	ldr	r1, [r4, #0]
 8007292:	1a6d      	subs	r5, r5, r1
 8007294:	4629      	mov	r1, r5
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ffa6 	bl	80071e8 <sbrk_aligned>
 800729c:	3001      	adds	r0, #1
 800729e:	d03a      	beq.n	8007316 <_malloc_r+0xea>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	442b      	add	r3, r5
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	f8d8 3000 	ldr.w	r3, [r8]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	bb62      	cbnz	r2, 8007308 <_malloc_r+0xdc>
 80072ae:	f8c8 7000 	str.w	r7, [r8]
 80072b2:	e00f      	b.n	80072d4 <_malloc_r+0xa8>
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	1b52      	subs	r2, r2, r5
 80072b8:	d420      	bmi.n	80072fc <_malloc_r+0xd0>
 80072ba:	2a0b      	cmp	r2, #11
 80072bc:	d917      	bls.n	80072ee <_malloc_r+0xc2>
 80072be:	1961      	adds	r1, r4, r5
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	6025      	str	r5, [r4, #0]
 80072c4:	bf18      	it	ne
 80072c6:	6059      	strne	r1, [r3, #4]
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	bf08      	it	eq
 80072cc:	f8c8 1000 	streq.w	r1, [r8]
 80072d0:	5162      	str	r2, [r4, r5]
 80072d2:	604b      	str	r3, [r1, #4]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f82f 	bl	8007338 <__malloc_unlock>
 80072da:	f104 000b 	add.w	r0, r4, #11
 80072de:	1d23      	adds	r3, r4, #4
 80072e0:	f020 0007 	bic.w	r0, r0, #7
 80072e4:	1ac2      	subs	r2, r0, r3
 80072e6:	bf1c      	itt	ne
 80072e8:	1a1b      	subne	r3, r3, r0
 80072ea:	50a3      	strne	r3, [r4, r2]
 80072ec:	e7af      	b.n	800724e <_malloc_r+0x22>
 80072ee:	6862      	ldr	r2, [r4, #4]
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	bf0c      	ite	eq
 80072f4:	f8c8 2000 	streq.w	r2, [r8]
 80072f8:	605a      	strne	r2, [r3, #4]
 80072fa:	e7eb      	b.n	80072d4 <_malloc_r+0xa8>
 80072fc:	4623      	mov	r3, r4
 80072fe:	6864      	ldr	r4, [r4, #4]
 8007300:	e7ae      	b.n	8007260 <_malloc_r+0x34>
 8007302:	463c      	mov	r4, r7
 8007304:	687f      	ldr	r7, [r7, #4]
 8007306:	e7b6      	b.n	8007276 <_malloc_r+0x4a>
 8007308:	461a      	mov	r2, r3
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	42a3      	cmp	r3, r4
 800730e:	d1fb      	bne.n	8007308 <_malloc_r+0xdc>
 8007310:	2300      	movs	r3, #0
 8007312:	6053      	str	r3, [r2, #4]
 8007314:	e7de      	b.n	80072d4 <_malloc_r+0xa8>
 8007316:	230c      	movs	r3, #12
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	4630      	mov	r0, r6
 800731c:	f000 f80c 	bl	8007338 <__malloc_unlock>
 8007320:	e794      	b.n	800724c <_malloc_r+0x20>
 8007322:	6005      	str	r5, [r0, #0]
 8007324:	e7d6      	b.n	80072d4 <_malloc_r+0xa8>
 8007326:	bf00      	nop
 8007328:	20013114 	.word	0x20013114

0800732c <__malloc_lock>:
 800732c:	4801      	ldr	r0, [pc, #4]	@ (8007334 <__malloc_lock+0x8>)
 800732e:	f7ff bf0e 	b.w	800714e <__retarget_lock_acquire_recursive>
 8007332:	bf00      	nop
 8007334:	2001310c 	.word	0x2001310c

08007338 <__malloc_unlock>:
 8007338:	4801      	ldr	r0, [pc, #4]	@ (8007340 <__malloc_unlock+0x8>)
 800733a:	f7ff bf09 	b.w	8007150 <__retarget_lock_release_recursive>
 800733e:	bf00      	nop
 8007340:	2001310c 	.word	0x2001310c

08007344 <__sflush_r>:
 8007344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734c:	0716      	lsls	r6, r2, #28
 800734e:	4605      	mov	r5, r0
 8007350:	460c      	mov	r4, r1
 8007352:	d454      	bmi.n	80073fe <__sflush_r+0xba>
 8007354:	684b      	ldr	r3, [r1, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dc02      	bgt.n	8007360 <__sflush_r+0x1c>
 800735a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	dd48      	ble.n	80073f2 <__sflush_r+0xae>
 8007360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007362:	2e00      	cmp	r6, #0
 8007364:	d045      	beq.n	80073f2 <__sflush_r+0xae>
 8007366:	2300      	movs	r3, #0
 8007368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800736c:	682f      	ldr	r7, [r5, #0]
 800736e:	6a21      	ldr	r1, [r4, #32]
 8007370:	602b      	str	r3, [r5, #0]
 8007372:	d030      	beq.n	80073d6 <__sflush_r+0x92>
 8007374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	0759      	lsls	r1, r3, #29
 800737a:	d505      	bpl.n	8007388 <__sflush_r+0x44>
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007382:	b10b      	cbz	r3, 8007388 <__sflush_r+0x44>
 8007384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	2300      	movs	r3, #0
 800738a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	4628      	mov	r0, r5
 8007390:	47b0      	blx	r6
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	d106      	bne.n	80073a6 <__sflush_r+0x62>
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	291d      	cmp	r1, #29
 800739c:	d82b      	bhi.n	80073f6 <__sflush_r+0xb2>
 800739e:	4a2a      	ldr	r2, [pc, #168]	@ (8007448 <__sflush_r+0x104>)
 80073a0:	410a      	asrs	r2, r1
 80073a2:	07d6      	lsls	r6, r2, #31
 80073a4:	d427      	bmi.n	80073f6 <__sflush_r+0xb2>
 80073a6:	2200      	movs	r2, #0
 80073a8:	6062      	str	r2, [r4, #4]
 80073aa:	04d9      	lsls	r1, r3, #19
 80073ac:	6922      	ldr	r2, [r4, #16]
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	d504      	bpl.n	80073bc <__sflush_r+0x78>
 80073b2:	1c42      	adds	r2, r0, #1
 80073b4:	d101      	bne.n	80073ba <__sflush_r+0x76>
 80073b6:	682b      	ldr	r3, [r5, #0]
 80073b8:	b903      	cbnz	r3, 80073bc <__sflush_r+0x78>
 80073ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80073bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073be:	602f      	str	r7, [r5, #0]
 80073c0:	b1b9      	cbz	r1, 80073f2 <__sflush_r+0xae>
 80073c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073c6:	4299      	cmp	r1, r3
 80073c8:	d002      	beq.n	80073d0 <__sflush_r+0x8c>
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7ff fec2 	bl	8007154 <_free_r>
 80073d0:	2300      	movs	r3, #0
 80073d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80073d4:	e00d      	b.n	80073f2 <__sflush_r+0xae>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	4602      	mov	r2, r0
 80073de:	1c50      	adds	r0, r2, #1
 80073e0:	d1c9      	bne.n	8007376 <__sflush_r+0x32>
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0c6      	beq.n	8007376 <__sflush_r+0x32>
 80073e8:	2b1d      	cmp	r3, #29
 80073ea:	d001      	beq.n	80073f0 <__sflush_r+0xac>
 80073ec:	2b16      	cmp	r3, #22
 80073ee:	d11e      	bne.n	800742e <__sflush_r+0xea>
 80073f0:	602f      	str	r7, [r5, #0]
 80073f2:	2000      	movs	r0, #0
 80073f4:	e022      	b.n	800743c <__sflush_r+0xf8>
 80073f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fa:	b21b      	sxth	r3, r3
 80073fc:	e01b      	b.n	8007436 <__sflush_r+0xf2>
 80073fe:	690f      	ldr	r7, [r1, #16]
 8007400:	2f00      	cmp	r7, #0
 8007402:	d0f6      	beq.n	80073f2 <__sflush_r+0xae>
 8007404:	0793      	lsls	r3, r2, #30
 8007406:	680e      	ldr	r6, [r1, #0]
 8007408:	bf08      	it	eq
 800740a:	694b      	ldreq	r3, [r1, #20]
 800740c:	600f      	str	r7, [r1, #0]
 800740e:	bf18      	it	ne
 8007410:	2300      	movne	r3, #0
 8007412:	eba6 0807 	sub.w	r8, r6, r7
 8007416:	608b      	str	r3, [r1, #8]
 8007418:	f1b8 0f00 	cmp.w	r8, #0
 800741c:	dde9      	ble.n	80073f2 <__sflush_r+0xae>
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007422:	4643      	mov	r3, r8
 8007424:	463a      	mov	r2, r7
 8007426:	4628      	mov	r0, r5
 8007428:	47b0      	blx	r6
 800742a:	2800      	cmp	r0, #0
 800742c:	dc08      	bgt.n	8007440 <__sflush_r+0xfc>
 800742e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007436:	81a3      	strh	r3, [r4, #12]
 8007438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	4407      	add	r7, r0
 8007442:	eba8 0800 	sub.w	r8, r8, r0
 8007446:	e7e7      	b.n	8007418 <__sflush_r+0xd4>
 8007448:	dfbffffe 	.word	0xdfbffffe

0800744c <_fflush_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	690b      	ldr	r3, [r1, #16]
 8007450:	4605      	mov	r5, r0
 8007452:	460c      	mov	r4, r1
 8007454:	b913      	cbnz	r3, 800745c <_fflush_r+0x10>
 8007456:	2500      	movs	r5, #0
 8007458:	4628      	mov	r0, r5
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	b118      	cbz	r0, 8007466 <_fflush_r+0x1a>
 800745e:	6a03      	ldr	r3, [r0, #32]
 8007460:	b90b      	cbnz	r3, 8007466 <_fflush_r+0x1a>
 8007462:	f7ff fc8f 	bl	8006d84 <__sinit>
 8007466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f3      	beq.n	8007456 <_fflush_r+0xa>
 800746e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007470:	07d0      	lsls	r0, r2, #31
 8007472:	d404      	bmi.n	800747e <_fflush_r+0x32>
 8007474:	0599      	lsls	r1, r3, #22
 8007476:	d402      	bmi.n	800747e <_fflush_r+0x32>
 8007478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747a:	f7ff fe68 	bl	800714e <__retarget_lock_acquire_recursive>
 800747e:	4628      	mov	r0, r5
 8007480:	4621      	mov	r1, r4
 8007482:	f7ff ff5f 	bl	8007344 <__sflush_r>
 8007486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007488:	07da      	lsls	r2, r3, #31
 800748a:	4605      	mov	r5, r0
 800748c:	d4e4      	bmi.n	8007458 <_fflush_r+0xc>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	059b      	lsls	r3, r3, #22
 8007492:	d4e1      	bmi.n	8007458 <_fflush_r+0xc>
 8007494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007496:	f7ff fe5b 	bl	8007150 <__retarget_lock_release_recursive>
 800749a:	e7dd      	b.n	8007458 <_fflush_r+0xc>

0800749c <__swhatbuf_r>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	2900      	cmp	r1, #0
 80074a6:	b096      	sub	sp, #88	@ 0x58
 80074a8:	4615      	mov	r5, r2
 80074aa:	461e      	mov	r6, r3
 80074ac:	da0d      	bge.n	80074ca <__swhatbuf_r+0x2e>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074b4:	f04f 0100 	mov.w	r1, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2340      	movne	r3, #64	@ 0x40
 80074bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074c0:	2000      	movs	r0, #0
 80074c2:	6031      	str	r1, [r6, #0]
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	b016      	add	sp, #88	@ 0x58
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	466a      	mov	r2, sp
 80074cc:	f000 f848 	bl	8007560 <_fstat_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	dbec      	blt.n	80074ae <__swhatbuf_r+0x12>
 80074d4:	9901      	ldr	r1, [sp, #4]
 80074d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074de:	4259      	negs	r1, r3
 80074e0:	4159      	adcs	r1, r3
 80074e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074e6:	e7eb      	b.n	80074c0 <__swhatbuf_r+0x24>

080074e8 <__smakebuf_r>:
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ec:	079d      	lsls	r5, r3, #30
 80074ee:	4606      	mov	r6, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	d507      	bpl.n	8007504 <__smakebuf_r+0x1c>
 80074f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	2301      	movs	r3, #1
 80074fe:	6163      	str	r3, [r4, #20]
 8007500:	b003      	add	sp, #12
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007504:	ab01      	add	r3, sp, #4
 8007506:	466a      	mov	r2, sp
 8007508:	f7ff ffc8 	bl	800749c <__swhatbuf_r>
 800750c:	9f00      	ldr	r7, [sp, #0]
 800750e:	4605      	mov	r5, r0
 8007510:	4639      	mov	r1, r7
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff fe8a 	bl	800722c <_malloc_r>
 8007518:	b948      	cbnz	r0, 800752e <__smakebuf_r+0x46>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	059a      	lsls	r2, r3, #22
 8007520:	d4ee      	bmi.n	8007500 <__smakebuf_r+0x18>
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	f043 0302 	orr.w	r3, r3, #2
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	e7e2      	b.n	80074f4 <__smakebuf_r+0xc>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	6020      	str	r0, [r4, #0]
 8007532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800753e:	b15b      	cbz	r3, 8007558 <__smakebuf_r+0x70>
 8007540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007544:	4630      	mov	r0, r6
 8007546:	f000 f81d 	bl	8007584 <_isatty_r>
 800754a:	b128      	cbz	r0, 8007558 <__smakebuf_r+0x70>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	431d      	orrs	r5, r3
 800755c:	81a5      	strh	r5, [r4, #12]
 800755e:	e7cf      	b.n	8007500 <__smakebuf_r+0x18>

08007560 <_fstat_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	@ (8007580 <_fstat_r+0x20>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	f7fa f904 	bl	800177a <_fstat>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d102      	bne.n	800757c <_fstat_r+0x1c>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b103      	cbz	r3, 800757c <_fstat_r+0x1c>
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	bf00      	nop
 8007580:	20013108 	.word	0x20013108

08007584 <_isatty_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d06      	ldr	r5, [pc, #24]	@ (80075a0 <_isatty_r+0x1c>)
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	f7fa f903 	bl	800179a <_isatty>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_isatty_r+0x1a>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_isatty_r+0x1a>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20013108 	.word	0x20013108

080075a4 <_sbrk_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d06      	ldr	r5, [pc, #24]	@ (80075c0 <_sbrk_r+0x1c>)
 80075a8:	2300      	movs	r3, #0
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	602b      	str	r3, [r5, #0]
 80075b0:	f000 fa08 	bl	80079c4 <_sbrk>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_sbrk_r+0x1a>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_sbrk_r+0x1a>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20013108 	.word	0x20013108
 80075c4:	00000000 	.word	0x00000000

080075c8 <log>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	ed2d 8b02 	vpush	{d8}
 80075ce:	ec55 4b10 	vmov	r4, r5, d0
 80075d2:	f000 f841 	bl	8007658 <__ieee754_log>
 80075d6:	4622      	mov	r2, r4
 80075d8:	462b      	mov	r3, r5
 80075da:	4620      	mov	r0, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	eeb0 8a40 	vmov.f32	s16, s0
 80075e2:	eef0 8a60 	vmov.f32	s17, s1
 80075e6:	f7f9 fa51 	bl	8000a8c <__aeabi_dcmpun>
 80075ea:	b998      	cbnz	r0, 8007614 <log+0x4c>
 80075ec:	2200      	movs	r2, #0
 80075ee:	2300      	movs	r3, #0
 80075f0:	4620      	mov	r0, r4
 80075f2:	4629      	mov	r1, r5
 80075f4:	f7f9 fa40 	bl	8000a78 <__aeabi_dcmpgt>
 80075f8:	b960      	cbnz	r0, 8007614 <log+0x4c>
 80075fa:	2200      	movs	r2, #0
 80075fc:	2300      	movs	r3, #0
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f9 fa11 	bl	8000a28 <__aeabi_dcmpeq>
 8007606:	b160      	cbz	r0, 8007622 <log+0x5a>
 8007608:	f7ff fd76 	bl	80070f8 <__errno>
 800760c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8007638 <log+0x70>
 8007610:	2322      	movs	r3, #34	@ 0x22
 8007612:	6003      	str	r3, [r0, #0]
 8007614:	eeb0 0a48 	vmov.f32	s0, s16
 8007618:	eef0 0a68 	vmov.f32	s1, s17
 800761c:	ecbd 8b02 	vpop	{d8}
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	f7ff fd69 	bl	80070f8 <__errno>
 8007626:	ecbd 8b02 	vpop	{d8}
 800762a:	2321      	movs	r3, #33	@ 0x21
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007632:	4803      	ldr	r0, [pc, #12]	@ (8007640 <log+0x78>)
 8007634:	f000 b808 	b.w	8007648 <nan>
 8007638:	00000000 	.word	0x00000000
 800763c:	fff00000 	.word	0xfff00000
 8007640:	08007a9c 	.word	0x08007a9c
 8007644:	00000000 	.word	0x00000000

08007648 <nan>:
 8007648:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007650 <nan+0x8>
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	00000000 	.word	0x00000000
 8007654:	7ff80000 	.word	0x7ff80000

08007658 <__ieee754_log>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	ec51 0b10 	vmov	r0, r1, d0
 8007660:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007664:	b087      	sub	sp, #28
 8007666:	460d      	mov	r5, r1
 8007668:	da26      	bge.n	80076b8 <__ieee754_log+0x60>
 800766a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800766e:	4303      	orrs	r3, r0
 8007670:	4602      	mov	r2, r0
 8007672:	d10a      	bne.n	800768a <__ieee754_log+0x32>
 8007674:	49ce      	ldr	r1, [pc, #824]	@ (80079b0 <__ieee754_log+0x358>)
 8007676:	2200      	movs	r2, #0
 8007678:	2300      	movs	r3, #0
 800767a:	2000      	movs	r0, #0
 800767c:	f7f9 f896 	bl	80007ac <__aeabi_ddiv>
 8007680:	ec41 0b10 	vmov	d0, r0, r1
 8007684:	b007      	add	sp, #28
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	2900      	cmp	r1, #0
 800768c:	da05      	bge.n	800769a <__ieee754_log+0x42>
 800768e:	460b      	mov	r3, r1
 8007690:	f7f8 fdaa 	bl	80001e8 <__aeabi_dsub>
 8007694:	2200      	movs	r2, #0
 8007696:	2300      	movs	r3, #0
 8007698:	e7f0      	b.n	800767c <__ieee754_log+0x24>
 800769a:	4bc6      	ldr	r3, [pc, #792]	@ (80079b4 <__ieee754_log+0x35c>)
 800769c:	2200      	movs	r2, #0
 800769e:	f7f8 ff5b 	bl	8000558 <__aeabi_dmul>
 80076a2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80076a6:	460d      	mov	r5, r1
 80076a8:	4ac3      	ldr	r2, [pc, #780]	@ (80079b8 <__ieee754_log+0x360>)
 80076aa:	4295      	cmp	r5, r2
 80076ac:	dd06      	ble.n	80076bc <__ieee754_log+0x64>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	f7f8 fd9b 	bl	80001ec <__adddf3>
 80076b6:	e7e3      	b.n	8007680 <__ieee754_log+0x28>
 80076b8:	2300      	movs	r3, #0
 80076ba:	e7f5      	b.n	80076a8 <__ieee754_log+0x50>
 80076bc:	152c      	asrs	r4, r5, #20
 80076be:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80076c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80076c6:	441c      	add	r4, r3
 80076c8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80076cc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80076d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076d4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80076d8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80076dc:	ea42 0105 	orr.w	r1, r2, r5
 80076e0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80076e4:	2200      	movs	r2, #0
 80076e6:	4bb5      	ldr	r3, [pc, #724]	@ (80079bc <__ieee754_log+0x364>)
 80076e8:	f7f8 fd7e 	bl	80001e8 <__aeabi_dsub>
 80076ec:	1cab      	adds	r3, r5, #2
 80076ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	4682      	mov	sl, r0
 80076f6:	468b      	mov	fp, r1
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	dc53      	bgt.n	80077a6 <__ieee754_log+0x14e>
 80076fe:	2300      	movs	r3, #0
 8007700:	f7f9 f992 	bl	8000a28 <__aeabi_dcmpeq>
 8007704:	b1d0      	cbz	r0, 800773c <__ieee754_log+0xe4>
 8007706:	2c00      	cmp	r4, #0
 8007708:	f000 8120 	beq.w	800794c <__ieee754_log+0x2f4>
 800770c:	4620      	mov	r0, r4
 800770e:	f7f8 feb9 	bl	8000484 <__aeabi_i2d>
 8007712:	a391      	add	r3, pc, #580	@ (adr r3, 8007958 <__ieee754_log+0x300>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	4606      	mov	r6, r0
 800771a:	460f      	mov	r7, r1
 800771c:	f7f8 ff1c 	bl	8000558 <__aeabi_dmul>
 8007720:	a38f      	add	r3, pc, #572	@ (adr r3, 8007960 <__ieee754_log+0x308>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	4604      	mov	r4, r0
 8007728:	460d      	mov	r5, r1
 800772a:	4630      	mov	r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	f7f8 ff13 	bl	8000558 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4620      	mov	r0, r4
 8007738:	4629      	mov	r1, r5
 800773a:	e7ba      	b.n	80076b2 <__ieee754_log+0x5a>
 800773c:	a38a      	add	r3, pc, #552	@ (adr r3, 8007968 <__ieee754_log+0x310>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	4650      	mov	r0, sl
 8007744:	4659      	mov	r1, fp
 8007746:	f7f8 ff07 	bl	8000558 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	2000      	movs	r0, #0
 8007750:	499b      	ldr	r1, [pc, #620]	@ (80079c0 <__ieee754_log+0x368>)
 8007752:	f7f8 fd49 	bl	80001e8 <__aeabi_dsub>
 8007756:	4652      	mov	r2, sl
 8007758:	4606      	mov	r6, r0
 800775a:	460f      	mov	r7, r1
 800775c:	465b      	mov	r3, fp
 800775e:	4650      	mov	r0, sl
 8007760:	4659      	mov	r1, fp
 8007762:	f7f8 fef9 	bl	8000558 <__aeabi_dmul>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4630      	mov	r0, r6
 800776c:	4639      	mov	r1, r7
 800776e:	f7f8 fef3 	bl	8000558 <__aeabi_dmul>
 8007772:	4606      	mov	r6, r0
 8007774:	460f      	mov	r7, r1
 8007776:	b914      	cbnz	r4, 800777e <__ieee754_log+0x126>
 8007778:	4632      	mov	r2, r6
 800777a:	463b      	mov	r3, r7
 800777c:	e0a0      	b.n	80078c0 <__ieee754_log+0x268>
 800777e:	4620      	mov	r0, r4
 8007780:	f7f8 fe80 	bl	8000484 <__aeabi_i2d>
 8007784:	a374      	add	r3, pc, #464	@ (adr r3, 8007958 <__ieee754_log+0x300>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	4680      	mov	r8, r0
 800778c:	4689      	mov	r9, r1
 800778e:	f7f8 fee3 	bl	8000558 <__aeabi_dmul>
 8007792:	a373      	add	r3, pc, #460	@ (adr r3, 8007960 <__ieee754_log+0x308>)
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	4604      	mov	r4, r0
 800779a:	460d      	mov	r5, r1
 800779c:	4640      	mov	r0, r8
 800779e:	4649      	mov	r1, r9
 80077a0:	f7f8 feda 	bl	8000558 <__aeabi_dmul>
 80077a4:	e0a5      	b.n	80078f2 <__ieee754_log+0x29a>
 80077a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077aa:	f7f8 fd1f 	bl	80001ec <__adddf3>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	f7f8 fff9 	bl	80007ac <__aeabi_ddiv>
 80077ba:	e9cd 0100 	strd	r0, r1, [sp]
 80077be:	4620      	mov	r0, r4
 80077c0:	f7f8 fe60 	bl	8000484 <__aeabi_i2d>
 80077c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077cc:	4610      	mov	r0, r2
 80077ce:	4619      	mov	r1, r3
 80077d0:	f7f8 fec2 	bl	8000558 <__aeabi_dmul>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077dc:	f7f8 febc 	bl	8000558 <__aeabi_dmul>
 80077e0:	a363      	add	r3, pc, #396	@ (adr r3, 8007970 <__ieee754_log+0x318>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	4680      	mov	r8, r0
 80077e8:	4689      	mov	r9, r1
 80077ea:	f7f8 feb5 	bl	8000558 <__aeabi_dmul>
 80077ee:	a362      	add	r3, pc, #392	@ (adr r3, 8007978 <__ieee754_log+0x320>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fcfa 	bl	80001ec <__adddf3>
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	f7f8 feac 	bl	8000558 <__aeabi_dmul>
 8007800:	a35f      	add	r3, pc, #380	@ (adr r3, 8007980 <__ieee754_log+0x328>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fcf1 	bl	80001ec <__adddf3>
 800780a:	4642      	mov	r2, r8
 800780c:	464b      	mov	r3, r9
 800780e:	f7f8 fea3 	bl	8000558 <__aeabi_dmul>
 8007812:	a35d      	add	r3, pc, #372	@ (adr r3, 8007988 <__ieee754_log+0x330>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fce8 	bl	80001ec <__adddf3>
 800781c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007820:	f7f8 fe9a 	bl	8000558 <__aeabi_dmul>
 8007824:	a35a      	add	r3, pc, #360	@ (adr r3, 8007990 <__ieee754_log+0x338>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fe91 	bl	8000558 <__aeabi_dmul>
 8007836:	a358      	add	r3, pc, #352	@ (adr r3, 8007998 <__ieee754_log+0x340>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fcd6 	bl	80001ec <__adddf3>
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	f7f8 fe88 	bl	8000558 <__aeabi_dmul>
 8007848:	a355      	add	r3, pc, #340	@ (adr r3, 80079a0 <__ieee754_log+0x348>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fccd 	bl	80001ec <__adddf3>
 8007852:	4642      	mov	r2, r8
 8007854:	464b      	mov	r3, r9
 8007856:	f7f8 fe7f 	bl	8000558 <__aeabi_dmul>
 800785a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8007866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800786a:	f7f8 fcbf 	bl	80001ec <__adddf3>
 800786e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007872:	3551      	adds	r5, #81	@ 0x51
 8007874:	4335      	orrs	r5, r6
 8007876:	2d00      	cmp	r5, #0
 8007878:	4680      	mov	r8, r0
 800787a:	4689      	mov	r9, r1
 800787c:	dd48      	ble.n	8007910 <__ieee754_log+0x2b8>
 800787e:	4b50      	ldr	r3, [pc, #320]	@ (80079c0 <__ieee754_log+0x368>)
 8007880:	2200      	movs	r2, #0
 8007882:	4650      	mov	r0, sl
 8007884:	4659      	mov	r1, fp
 8007886:	f7f8 fe67 	bl	8000558 <__aeabi_dmul>
 800788a:	4652      	mov	r2, sl
 800788c:	465b      	mov	r3, fp
 800788e:	f7f8 fe63 	bl	8000558 <__aeabi_dmul>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4606      	mov	r6, r0
 8007898:	460f      	mov	r7, r1
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f8 fca5 	bl	80001ec <__adddf3>
 80078a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078a6:	f7f8 fe57 	bl	8000558 <__aeabi_dmul>
 80078aa:	4680      	mov	r8, r0
 80078ac:	4689      	mov	r9, r1
 80078ae:	b964      	cbnz	r4, 80078ca <__ieee754_log+0x272>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fc96 	bl	80001e8 <__aeabi_dsub>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4650      	mov	r0, sl
 80078c2:	4659      	mov	r1, fp
 80078c4:	f7f8 fc90 	bl	80001e8 <__aeabi_dsub>
 80078c8:	e6da      	b.n	8007680 <__ieee754_log+0x28>
 80078ca:	a323      	add	r3, pc, #140	@ (adr r3, 8007958 <__ieee754_log+0x300>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d4:	f7f8 fe40 	bl	8000558 <__aeabi_dmul>
 80078d8:	a321      	add	r3, pc, #132	@ (adr r3, 8007960 <__ieee754_log+0x308>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	4604      	mov	r4, r0
 80078e0:	460d      	mov	r5, r1
 80078e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e6:	f7f8 fe37 	bl	8000558 <__aeabi_dmul>
 80078ea:	4642      	mov	r2, r8
 80078ec:	464b      	mov	r3, r9
 80078ee:	f7f8 fc7d 	bl	80001ec <__adddf3>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	f7f8 fc75 	bl	80001e8 <__aeabi_dsub>
 80078fe:	4652      	mov	r2, sl
 8007900:	465b      	mov	r3, fp
 8007902:	f7f8 fc71 	bl	80001e8 <__aeabi_dsub>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4620      	mov	r0, r4
 800790c:	4629      	mov	r1, r5
 800790e:	e7d9      	b.n	80078c4 <__ieee754_log+0x26c>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4650      	mov	r0, sl
 8007916:	4659      	mov	r1, fp
 8007918:	f7f8 fc66 	bl	80001e8 <__aeabi_dsub>
 800791c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007920:	f7f8 fe1a 	bl	8000558 <__aeabi_dmul>
 8007924:	4606      	mov	r6, r0
 8007926:	460f      	mov	r7, r1
 8007928:	2c00      	cmp	r4, #0
 800792a:	f43f af25 	beq.w	8007778 <__ieee754_log+0x120>
 800792e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007958 <__ieee754_log+0x300>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007938:	f7f8 fe0e 	bl	8000558 <__aeabi_dmul>
 800793c:	a308      	add	r3, pc, #32	@ (adr r3, 8007960 <__ieee754_log+0x308>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	4604      	mov	r4, r0
 8007944:	460d      	mov	r5, r1
 8007946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794a:	e729      	b.n	80077a0 <__ieee754_log+0x148>
 800794c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80079a8 <__ieee754_log+0x350>
 8007950:	e698      	b.n	8007684 <__ieee754_log+0x2c>
 8007952:	bf00      	nop
 8007954:	f3af 8000 	nop.w
 8007958:	fee00000 	.word	0xfee00000
 800795c:	3fe62e42 	.word	0x3fe62e42
 8007960:	35793c76 	.word	0x35793c76
 8007964:	3dea39ef 	.word	0x3dea39ef
 8007968:	55555555 	.word	0x55555555
 800796c:	3fd55555 	.word	0x3fd55555
 8007970:	df3e5244 	.word	0xdf3e5244
 8007974:	3fc2f112 	.word	0x3fc2f112
 8007978:	96cb03de 	.word	0x96cb03de
 800797c:	3fc74664 	.word	0x3fc74664
 8007980:	94229359 	.word	0x94229359
 8007984:	3fd24924 	.word	0x3fd24924
 8007988:	55555593 	.word	0x55555593
 800798c:	3fe55555 	.word	0x3fe55555
 8007990:	d078c69f 	.word	0xd078c69f
 8007994:	3fc39a09 	.word	0x3fc39a09
 8007998:	1d8e78af 	.word	0x1d8e78af
 800799c:	3fcc71c5 	.word	0x3fcc71c5
 80079a0:	9997fa04 	.word	0x9997fa04
 80079a4:	3fd99999 	.word	0x3fd99999
	...
 80079b0:	c3500000 	.word	0xc3500000
 80079b4:	43500000 	.word	0x43500000
 80079b8:	7fefffff 	.word	0x7fefffff
 80079bc:	3ff00000 	.word	0x3ff00000
 80079c0:	3fe00000 	.word	0x3fe00000

080079c4 <_sbrk>:
 80079c4:	4a04      	ldr	r2, [pc, #16]	@ (80079d8 <_sbrk+0x14>)
 80079c6:	6811      	ldr	r1, [r2, #0]
 80079c8:	4603      	mov	r3, r0
 80079ca:	b909      	cbnz	r1, 80079d0 <_sbrk+0xc>
 80079cc:	4903      	ldr	r1, [pc, #12]	@ (80079dc <_sbrk+0x18>)
 80079ce:	6011      	str	r1, [r2, #0]
 80079d0:	6810      	ldr	r0, [r2, #0]
 80079d2:	4403      	add	r3, r0
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	4770      	bx	lr
 80079d8:	20013118 	.word	0x20013118
 80079dc:	20013120 	.word	0x20013120

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
