
HeatingMask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d84  08007d84  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d8c  08007d8c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000130b8  20000084  08007e18  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001313c  08007e18  0002313c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139d9  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003189  00000000  00000000  00033ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00036c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da2  00000000  00000000  00037df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1fa  00000000  00000000  00038b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e27  00000000  00000000  00052d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a348c  00000000  00000000  00068bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000545c  00000000  00000000  0010c040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b70 	.word	0x08007b70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08007b70 	.word	0x08007b70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 fcda 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f80e 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 f9b0 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f04:	f000 f98e 	bl	8001224 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f08:	f000 f872 	bl	8000ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f0c:	f000 f960 	bl	80011d0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f10:	f000 f906 	bl	8001120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initTasks();
 8000f14:	f003 ffea 	bl	8004eec <initTasks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f18:	e7fe      	b.n	8000f18 <main+0x24>
	...

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fe10 	bl	8006b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <SystemClock_Config+0xd0>)
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f94:	2354      	movs	r3, #84	; 0x54
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fea5 	bl	8002cf4 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fb0:	f000 f9c2 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 f907 	bl	80031e4 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fdc:	f000 f9ac 	bl	8001338 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	; 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001002:	4b44      	ldr	r3, [pc, #272]	; (8001114 <MX_ADC1_Init+0x124>)
 8001004:	4a44      	ldr	r2, [pc, #272]	; (8001118 <MX_ADC1_Init+0x128>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001008:	4b42      	ldr	r3, [pc, #264]	; (8001114 <MX_ADC1_Init+0x124>)
 800100a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b40      	ldr	r3, [pc, #256]	; (8001114 <MX_ADC1_Init+0x124>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <MX_ADC1_Init+0x124>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101c:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <MX_ADC1_Init+0x124>)
 800101e:	2200      	movs	r2, #0
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <MX_ADC1_Init+0x124>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <MX_ADC1_Init+0x124>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b38      	ldr	r3, [pc, #224]	; (8001114 <MX_ADC1_Init+0x124>)
 8001032:	4a3a      	ldr	r2, [pc, #232]	; (800111c <MX_ADC1_Init+0x12c>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <MX_ADC1_Init+0x124>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <MX_ADC1_Init+0x124>)
 800103e:	2206      	movs	r2, #6
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_ADC1_Init+0x124>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <MX_ADC1_Init+0x124>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	4830      	ldr	r0, [pc, #192]	; (8001114 <MX_ADC1_Init+0x124>)
 8001052:	f000 fc6f 	bl	8001934 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f000 f96c 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001060:	230a      	movs	r3, #10
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4828      	ldr	r0, [pc, #160]	; (8001114 <MX_ADC1_Init+0x124>)
 8001072:	f000 fdb1 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 f95c 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001080:	230b      	movs	r3, #11
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <MX_ADC1_Init+0x124>)
 800108e:	f000 fda3 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001098:	f000 f94e 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800109c:	230c      	movs	r3, #12
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010a0:	2303      	movs	r3, #3
 80010a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	481a      	ldr	r0, [pc, #104]	; (8001114 <MX_ADC1_Init+0x124>)
 80010aa:	f000 fd95 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010b4:	f000 f940 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010b8:	230d      	movs	r3, #13
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <MX_ADC1_Init+0x124>)
 80010c6:	f000 fd87 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010d0:	f000 f932 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80010d4:	230e      	movs	r3, #14
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010d8:	2305      	movs	r3, #5
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_ADC1_Init+0x124>)
 80010e2:	f000 fd79 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010ec:	f000 f924 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010f0:	230f      	movs	r3, #15
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80010f4:	2306      	movs	r3, #6
 80010f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_ADC1_Init+0x124>)
 80010fe:	f000 fd6b 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001108:	f000 f916 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000a0 	.word	0x200000a0
 8001118:	40012000 	.word	0x40012000
 800111c:	0f000001 	.word	0x0f000001

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_TIM2_Init+0xac>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_TIM2_Init+0xac>)
 800114c:	2201      	movs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_TIM2_Init+0xac>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_TIM2_Init+0xac>)
 8001158:	f241 0267 	movw	r2, #4199	; 0x1067
 800115c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_TIM2_Init+0xac>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_TIM2_Init+0xac>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM2_Init+0xac>)
 800116c:	f002 fba2 	bl	80038b4 <HAL_TIM_PWM_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001176:	f000 f8df 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_TIM2_Init+0xac>)
 800118a:	f003 f8ab 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001194:	f000 f8d0 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM2_Init+0xac>)
 80011b0:	f002 fd70 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011ba:	f000 f8bd 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM2_Init+0xac>)
 80011c0:	f000 f97e 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000148 	.word	0x20000148

080011d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_USART1_UART_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USART1_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART1_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USART1_UART_Init+0x4c>)
 8001208:	f003 f8ee 	bl	80043e8 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001212:	f000 f891 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000190 	.word	0x20000190
 8001220:	40011000 	.word	0x40011000

08001224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_DMA_Init+0x3c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <MX_DMA_Init+0x3c>)
 8001234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_DMA_Init+0x3c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2038      	movs	r0, #56	; 0x38
 800124c:	f001 f81c 	bl	8002288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001250:	2038      	movs	r0, #56	; 0x38
 8001252:	f001 f835 	bl	80022c0 <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_GPIO_Init+0xa8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <MX_GPIO_Init+0xa8>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_GPIO_Init+0xa8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_GPIO_Init+0xa8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <MX_GPIO_Init+0xa8>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_GPIO_Init+0xa8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_GPIO_Init+0xa8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <MX_GPIO_Init+0xa8>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_GPIO_Init+0xa8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_GPIO_Init+0xa8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0d      	ldr	r2, [pc, #52]	; (800130c <MX_GPIO_Init+0xa8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_GPIO_Init+0xa8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80012ea:	231e      	movs	r3, #30
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_GPIO_Init+0xac>)
 80012fe:	f001 fb5d 	bl	80029bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001326:	f000 fae5 	bl	80018f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40000c00 	.word	0x40000c00

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_MspInit+0x4c>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_MspInit+0x4c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a2e      	ldr	r2, [pc, #184]	; (800146c <HAL_ADC_MspInit+0xd8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d156      	bne.n	8001464 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_ADC_MspInit+0xdc>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a2c      	ldr	r2, [pc, #176]	; (8001470 <HAL_ADC_MspInit+0xdc>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_ADC_MspInit+0xdc>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_ADC_MspInit+0xdc>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a25      	ldr	r2, [pc, #148]	; (8001470 <HAL_ADC_MspInit+0xdc>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_ADC_MspInit+0xdc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013ee:	233f      	movs	r3, #63	; 0x3f
 80013f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	2303      	movs	r3, #3
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	481c      	ldr	r0, [pc, #112]	; (8001474 <HAL_ADC_MspInit+0xe0>)
 8001402:	f001 fadb 	bl	80029bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001408:	4a1c      	ldr	r2, [pc, #112]	; (800147c <HAL_ADC_MspInit+0xe8>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 800144a:	f000 ff47 	bl	80022dc <HAL_DMA_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001454:	f7ff ff70 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 800145c:	639a      	str	r2, [r3, #56]	; 0x38
 800145e:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40012000 	.word	0x40012000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020800 	.word	0x40020800
 8001478:	200000e8 	.word	0x200000e8
 800147c:	40026410 	.word	0x40026410

08001480 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d10d      	bne.n	80014ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_PWM_MspInit+0x3c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_TIM_PWM_MspInit+0x3c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_TIM_PWM_MspInit+0x3c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d11d      	bne.n	800151e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_TIM_MspPostInit+0x68>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_TIM_MspPostInit+0x68>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_TIM_MspPostInit+0x68>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014fe:	2301      	movs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150e:	2301      	movs	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <HAL_TIM_MspPostInit+0x6c>)
 800151a:	f001 fa4f 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12c      	bne.n	80015ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_UART_MspInit+0x88>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800158a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159c:	2307      	movs	r3, #7
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0x8c>)
 80015a8:	f001 fa08 	bl	80029bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_InitTick+0xe4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_InitTick+0xe4>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_InitTick+0xe4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 f814 	bl	8003624 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001606:	f001 ffe5 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 800160a:	6378      	str	r0, [r7, #52]	; 0x34
 800160c:	e004      	b.n	8001618 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800160e:	f001 ffe1 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8001612:	4603      	mov	r3, r0
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161a:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_InitTick+0xe8>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3b01      	subs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_InitTick+0xec>)
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_InitTick+0xf0>)
 800162a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_InitTick+0xec>)
 800162e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_InitTick+0xec>)
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_InitTick+0xec>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_InitTick+0xec>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_InitTick+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <HAL_InitTick+0xec>)
 800164e:	f002 f81b 	bl	8003688 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165c:	2b00      	cmp	r3, #0
 800165e:	d11b      	bne.n	8001698 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <HAL_InitTick+0xec>)
 8001662:	f002 f8c5 	bl	80037f0 <HAL_TIM_Base_Start_IT>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800166c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fe23 	bl	80022c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d808      	bhi.n	8001692 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	2032      	movs	r0, #50	; 0x32
 8001686:	f000 fdff 	bl	8002288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_InitTick+0xf4>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e002      	b.n	8001698 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800169c:	4618      	mov	r0, r3
 800169e:	3738      	adds	r7, #56	; 0x38
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	200001d8 	.word	0x200001d8
 80016b0:	40000c00 	.word	0x40000c00
 80016b4:	20000004 	.word	0x20000004

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM5_IRQHandler+0x10>)
 80016ea:	f002 f9e3 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200001d8 	.word	0x200001d8

080016f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <DMA2_Stream0_IRQHandler+0x10>)
 80016fe:	f000 fef3 	bl	80024e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000e8 	.word	0x200000e8

0800170c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <ITM_SendChar+0x48>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <ITM_SendChar+0x48>)
 800171c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001720:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <ITM_SendChar+0x4c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <ITM_SendChar+0x4c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800172e:	bf00      	nop
 8001730:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f8      	beq.n	8001730 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800173e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	6013      	str	r3, [r2, #0]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000edfc 	.word	0xe000edfc
 8001758:	e0000e00 	.word	0xe0000e00

0800175c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
  }

  return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ffab 	bl	800170c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
  }
  return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001860:	f7ff ffea 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001866:	490d      	ldr	r1, [pc, #52]	; (800189c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800187c:	4c0a      	ldr	r4, [pc, #40]	; (80018a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800188a:	f005 f9b5 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff fb31 	bl	8000ef4 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80018a0:	08007d94 	.word	0x08007d94
  ldr r2, =_sbss
 80018a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80018a8:	2001313c 	.word	0x2001313c

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_Init+0x40>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_Init+0x40>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_Init+0x40>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 fcca 	bl	8002272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	200f      	movs	r0, #15
 80018e0:	f7ff fe6e 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fd2e 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	20000220 	.word	0x20000220

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000220 	.word	0x20000220

08001934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e033      	b.n	80019b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fd1e 	bl	8001394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fa48 	bl	8001e1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
 80019a2:	e001      	b.n	80019a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Start_DMA+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0ce      	b.n	8001b78 <HAL_ADC_Start_DMA+0x1bc>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d018      	beq.n	8001a22 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a00:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_ADC_Start_DMA+0x1c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5f      	ldr	r2, [pc, #380]	; (8001b84 <HAL_ADC_Start_DMA+0x1c8>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9a      	lsrs	r2, r3, #18
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a30:	d107      	bne.n	8001a42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f040 8086 	bne.w	8001b5e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a90:	d106      	bne.n	8001aa0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f023 0206 	bic.w	r2, r3, #6
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a9e:	e002      	b.n	8001aa6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_ADC_Start_DMA+0x1cc>)
 8001ab0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <HAL_ADC_Start_DMA+0x1d0>)
 8001ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_ADC_Start_DMA+0x1d4>)
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <HAL_ADC_Start_DMA+0x1d8>)
 8001ac8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ae2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	334c      	adds	r3, #76	; 0x4c
 8001afe:	4619      	mov	r1, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f000 fc98 	bl	8002438 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10f      	bne.n	8001b34 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d129      	bne.n	8001b76 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	e020      	b.n	8001b76 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_ADC_Start_DMA+0x1dc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d11b      	bne.n	8001b76 <HAL_ADC_Start_DMA+0x1ba>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d114      	bne.n	8001b76 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e00b      	b.n	8001b76 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f043 0210 	orr.w	r2, r3, #16
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000000 	.word	0x20000000
 8001b84:	431bde83 	.word	0x431bde83
 8001b88:	40012300 	.word	0x40012300
 8001b8c:	08002015 	.word	0x08002015
 8001b90:	080020cf 	.word	0x080020cf
 8001b94:	080020eb 	.word	0x080020eb
 8001b98:	40012000 	.word	0x40012000

08001b9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x1c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e105      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x228>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d925      	bls.n	8001c50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43da      	mvns	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	400a      	ands	r2, r1
 8001c28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68d9      	ldr	r1, [r3, #12]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	409a      	lsls	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	e022      	b.n	8001c96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6919      	ldr	r1, [r3, #16]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	2207      	movs	r2, #7
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6919      	ldr	r1, [r3, #16]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4403      	add	r3, r0
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d824      	bhi.n	8001ce8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b05      	subs	r3, #5
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b05      	subs	r3, #5
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce6:	e04c      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d824      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b23      	subs	r3, #35	; 0x23
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	400a      	ands	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b23      	subs	r3, #35	; 0x23
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
 8001d38:	e023      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b41      	subs	r3, #65	; 0x41
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b41      	subs	r3, #65	; 0x41
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_ADC_ConfigChannel+0x234>)
 8001d84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_ADC_ConfigChannel+0x238>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1cc>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b12      	cmp	r3, #18
 8001d96:	d105      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_ADC_ConfigChannel+0x238>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d123      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x1e6>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b11      	cmp	r3, #17
 8001dbc:	d11b      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d111      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_ADC_ConfigChannel+0x23c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_ADC_ConfigChannel+0x240>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9a      	lsrs	r2, r3, #18
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f9      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	40012000 	.word	0x40012000
 8001e14:	20000000 	.word	0x20000000
 8001e18:	431bde83 	.word	0x431bde83

08001e1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e24:	4b79      	ldr	r3, [pc, #484]	; (800200c <ADC_Init+0x1f0>)
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	021a      	lsls	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	4a58      	ldr	r2, [pc, #352]	; (8002010 <ADC_Init+0x1f4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d022      	beq.n	8001efa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e00f      	b.n	8001f1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0202 	bic.w	r2, r2, #2
 8001f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
 8001f34:	005a      	lsls	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	3b01      	subs	r3, #1
 8001f74:	035a      	lsls	r2, r3, #13
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	e007      	b.n	8001f90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	051a      	lsls	r2, r3, #20
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd2:	025a      	lsls	r2, r3, #9
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	029a      	lsls	r2, r3, #10
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40012300 	.word	0x40012300
 8002010:	0f000001 	.word	0x0f000001

08002014 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d13c      	bne.n	80020a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d12b      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d127      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002068:	2b00      	cmp	r3, #0
 800206a:	d119      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0220 	bic.w	r2, r2, #32
 800207a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff fd7b 	bl	8001b9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020a6:	e00e      	b.n	80020c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fd85 	bl	8001bc4 <HAL_ADC_ErrorCallback>
}
 80020ba:	e004      	b.n	80020c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff fd67 	bl	8001bb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff fd5a 	bl	8001bc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff4c 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229a:	f7ff ff61 	bl	8002160 <__NVIC_GetPriorityGrouping>
 800229e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7ff ffb1 	bl	800220c <NVIC_EncodePriority>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff80 	bl	80021b8 <__NVIC_SetPriority>
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff54 	bl	800217c <__NVIC_EnableIRQ>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff fb18 	bl	800191c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e099      	b.n	800242c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002318:	e00f      	b.n	800233a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231a:	f7ff faff 	bl	800191c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b05      	cmp	r3, #5
 8002326:	d908      	bls.n	800233a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e078      	b.n	800242c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e8      	bne.n	800231a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_DMA_Init+0x158>)
 8002354:	4013      	ands	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2b04      	cmp	r3, #4
 8002392:	d107      	bne.n	80023a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4313      	orrs	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d117      	bne.n	80023fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fa6f 	bl	80028c4 <DMA_CheckFifoParam>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023fa:	2301      	movs	r3, #1
 80023fc:	e016      	b.n	800242c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa26 	bl	8002858 <DMA_CalcBaseAndBitshift>
 800240c:	4603      	mov	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	223f      	movs	r2, #63	; 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	f010803f 	.word	0xf010803f

08002438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_DMA_Start_IT+0x26>
 800245a:	2302      	movs	r3, #2
 800245c:	e040      	b.n	80024e0 <HAL_DMA_Start_IT+0xa8>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12f      	bne.n	80024d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f9b8 	bl	80027fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	223f      	movs	r2, #63	; 0x3f
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0216 	orr.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e005      	b.n	80024de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024f4:	4b8e      	ldr	r3, [pc, #568]	; (8002730 <HAL_DMA_IRQHandler+0x248>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a8e      	ldr	r2, [pc, #568]	; (8002734 <HAL_DMA_IRQHandler+0x24c>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0a9b      	lsrs	r3, r3, #10
 8002500:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2208      	movs	r2, #8
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01a      	beq.n	8002554 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	2208      	movs	r2, #8
 8002542:	409a      	lsls	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	2201      	movs	r2, #1
 800255a:	409a      	lsls	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d012      	beq.n	800258a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	2201      	movs	r2, #1
 8002578:	409a      	lsls	r2, r3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0202 	orr.w	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	2204      	movs	r2, #4
 8002590:	409a      	lsls	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d012      	beq.n	80025c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	2204      	movs	r2, #4
 80025ae:	409a      	lsls	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	2210      	movs	r2, #16
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d043      	beq.n	8002658 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03c      	beq.n	8002658 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2210      	movs	r2, #16
 80025e4:	409a      	lsls	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d018      	beq.n	800262a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d108      	bne.n	8002618 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d024      	beq.n	8002658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
 8002616:	e01f      	b.n	8002658 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
 8002628:	e016      	b.n	8002658 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0208 	bic.w	r2, r2, #8
 8002646:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2220      	movs	r2, #32
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 808f 	beq.w	8002788 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8087 	beq.w	8002788 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2220      	movs	r2, #32
 8002680:	409a      	lsls	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b05      	cmp	r3, #5
 8002690:	d136      	bne.n	8002700 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0216 	bic.w	r2, r2, #22
 80026a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <HAL_DMA_IRQHandler+0x1da>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	223f      	movs	r2, #63	; 0x3f
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d07e      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
        }
        return;
 80026fe:	e079      	b.n	80027f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01d      	beq.n	800274a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	2b00      	cmp	r3, #0
 8002722:	d031      	beq.n	8002788 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e02c      	b.n	8002788 <HAL_DMA_IRQHandler+0x2a0>
 800272e:	bf00      	nop
 8002730:	20000000 	.word	0x20000000
 8002734:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d023      	beq.n	8002788 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
 8002748:	e01e      	b.n	8002788 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10f      	bne.n	8002778 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0210 	bic.w	r2, r2, #16
 8002766:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	2b00      	cmp	r3, #0
 800278e:	d032      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d022      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2205      	movs	r2, #5
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3301      	adds	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d307      	bcc.n	80027d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f2      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x2cc>
 80027ce:	e000      	b.n	80027d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
 80027f2:	e000      	b.n	80027f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027f4:	bf00      	nop
    }
  }
}
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002818:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d108      	bne.n	800283c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800283a:	e007      	b.n	800284c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3b10      	subs	r3, #16
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <DMA_CalcBaseAndBitshift+0x64>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d909      	bls.n	800289a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	1d1a      	adds	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	659a      	str	r2, [r3, #88]	; 0x58
 8002898:	e007      	b.n	80028aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	aaaaaaab 	.word	0xaaaaaaab
 80028c0:	08007c48 	.word	0x08007c48

080028c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11f      	bne.n	800291e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d856      	bhi.n	8002992 <DMA_CheckFifoParam+0xce>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <DMA_CheckFifoParam+0x28>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	080028fd 	.word	0x080028fd
 80028f8:	08002993 	.word	0x08002993
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d046      	beq.n	8002996 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290c:	e043      	b.n	8002996 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002916:	d140      	bne.n	800299a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291c:	e03d      	b.n	800299a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002926:	d121      	bne.n	800296c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d837      	bhi.n	800299e <DMA_CheckFifoParam+0xda>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <DMA_CheckFifoParam+0x70>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294b 	.word	0x0800294b
 800293c:	08002945 	.word	0x08002945
 8002940:	0800295d 	.word	0x0800295d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      break;
 8002948:	e030      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d025      	beq.n	80029a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295a:	e022      	b.n	80029a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002964:	d11f      	bne.n	80029a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800296a:	e01c      	b.n	80029a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d903      	bls.n	800297a <DMA_CheckFifoParam+0xb6>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d003      	beq.n	8002980 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002978:	e018      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
      break;
 800297e:	e015      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      break;
 8002990:	e00b      	b.n	80029aa <DMA_CheckFifoParam+0xe6>
      break;
 8002992:	bf00      	nop
 8002994:	e00a      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e008      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e006      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
 80029a0:	e004      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
 80029a4:	e002      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      break;   
 80029a6:	bf00      	nop
 80029a8:	e000      	b.n	80029ac <DMA_CheckFifoParam+0xe8>
      break;
 80029aa:	bf00      	nop
    }
  } 
  
  return status; 
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e159      	b.n	8002c8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d8:	2201      	movs	r2, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f040 8148 	bne.w	8002c86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d005      	beq.n	8002a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d130      	bne.n	8002a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 0201 	and.w	r2, r3, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d017      	beq.n	8002aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d123      	bne.n	8002b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	69b9      	ldr	r1, [r7, #24]
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a2 	beq.w	8002c86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <HAL_GPIO_Init+0x2e8>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_GPIO_Init+0x2e8>)
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b54      	ldr	r3, [pc, #336]	; (8002ca4 <HAL_GPIO_Init+0x2e8>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5e:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_GPIO_Init+0x2ec>)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a49      	ldr	r2, [pc, #292]	; (8002cac <HAL_GPIO_Init+0x2f0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_GPIO_Init+0x202>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a48      	ldr	r2, [pc, #288]	; (8002cb0 <HAL_GPIO_Init+0x2f4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x1fe>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a47      	ldr	r2, [pc, #284]	; (8002cb4 <HAL_GPIO_Init+0x2f8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x1fa>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <HAL_GPIO_Init+0x2fc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x1f6>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a45      	ldr	r2, [pc, #276]	; (8002cbc <HAL_GPIO_Init+0x300>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x1f2>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x204>
 8002bae:	2307      	movs	r3, #7
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x204>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x204>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x204>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x204>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd0:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x2ec>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c56:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_GPIO_Init+0x304>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	f67f aea2 	bls.w	80029d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40013c00 	.word	0x40013c00

08002cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e001      	b.n	8002ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e267      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d075      	beq.n	8002dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d112      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4b7e      	ldr	r3, [pc, #504]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05b      	beq.n	8002dfc <HAL_RCC_OscConfig+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d157      	bne.n	8002dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e242      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x74>
 8002d5a:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a75      	ldr	r2, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6f      	ldr	r2, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6c      	ldr	r2, [pc, #432]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	4b69      	ldr	r3, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a68      	ldr	r2, [pc, #416]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b66      	ldr	r3, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a65      	ldr	r2, [pc, #404]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fdb6 	bl	800191c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fdb2 	bl	800191c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e207      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0xc0>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fda2 	bl	800191c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fd9e 	bl	800191c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1f3      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe8>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e0a:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b44      	ldr	r3, [pc, #272]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d116      	bne.n	8002e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x152>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e1c7      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4937      	ldr	r1, [pc, #220]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	e03a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_OscConfig+0x244>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fd57 	bl	800191c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e72:	f7fe fd53 	bl	800191c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1a8      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4925      	ldr	r1, [pc, #148]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x244>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fd36 	bl	800191c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fd32 	bl	800191c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e187      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d036      	beq.n	8002f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_RCC_OscConfig+0x248>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fd16 	bl	800191c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fd12 	bl	800191c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e167      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_OscConfig+0x240>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x200>
 8002f12:	e01b      	b.n	8002f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_OscConfig+0x248>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fcff 	bl	800191c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	e00e      	b.n	8002f40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f22:	f7fe fcfb 	bl	800191c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d907      	bls.n	8002f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e150      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
 8002f34:	40023800 	.word	0x40023800
 8002f38:	42470000 	.word	0x42470000
 8002f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ea      	bne.n	8002f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8097 	beq.w	8003088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b81      	ldr	r3, [pc, #516]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a7c      	ldr	r2, [pc, #496]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b77      	ldr	r3, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x474>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b74      	ldr	r3, [pc, #464]	; (8003168 <HAL_RCC_OscConfig+0x474>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a73      	ldr	r2, [pc, #460]	; (8003168 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fcbb 	bl	800191c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe fcb7 	bl	800191c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e10c      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x474>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x2ea>
 8002fd0:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a63      	ldr	r2, [pc, #396]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	e01c      	b.n	8003018 <HAL_RCC_OscConfig+0x324>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x30c>
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a5e      	ldr	r2, [pc, #376]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a5b      	ldr	r2, [pc, #364]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x324>
 8003000:	4b58      	ldr	r3, [pc, #352]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a57      	ldr	r2, [pc, #348]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	4b55      	ldr	r3, [pc, #340]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a54      	ldr	r2, [pc, #336]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d015      	beq.n	800304c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe fc7c 	bl	800191c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe fc78 	bl	800191c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0cb      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	4b49      	ldr	r3, [pc, #292]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ee      	beq.n	8003028 <HAL_RCC_OscConfig+0x334>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fc66 	bl	800191c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fc62 	bl	800191c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0b5      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306a:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ee      	bne.n	8003054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	4a38      	ldr	r2, [pc, #224]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a1 	beq.w	80031d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b08      	cmp	r3, #8
 800309c:	d05c      	beq.n	8003158 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d141      	bne.n	800312a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x478>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fc36 	bl	800191c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fc32 	bl	800191c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e087      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	491b      	ldr	r1, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x478>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe fc0b 	bl	800191c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe fc07 	bl	800191c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e05c      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x416>
 8003128:	e054      	b.n	80031d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCC_OscConfig+0x478>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe fbf4 	bl	800191c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe fbf0 	bl	800191c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e045      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_OscConfig+0x470>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x444>
 8003156:	e03d      	b.n	80031d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e038      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000
 800316c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x4ec>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d028      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d121      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d11a      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	3b01      	subs	r3, #1
 80031ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cc      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b68      	ldr	r3, [pc, #416]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d90c      	bls.n	8003220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b65      	ldr	r3, [pc, #404]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b63      	ldr	r3, [pc, #396]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0b8      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a58      	ldr	r2, [pc, #352]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800325a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	494d      	ldr	r1, [pc, #308]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d044      	beq.n	8003304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d119      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e067      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4934      	ldr	r1, [pc, #208]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d4:	f7fe fb22 	bl	800191c <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fe fb1e 	bl	800191c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20c      	bcs.n	800332c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e032      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4916      	ldr	r1, [pc, #88]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	490e      	ldr	r1, [pc, #56]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800336a:	f000 f821 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490a      	ldr	r1, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe f918 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023c00 	.word	0x40023c00
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08007c30 	.word	0x08007c30
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000004 	.word	0x20000004

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b094      	sub	sp, #80	; 0x50
 80033b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	647b      	str	r3, [r7, #68]	; 0x44
 80033bc:	2300      	movs	r3, #0
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c0:	2300      	movs	r3, #0
 80033c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c8:	4b79      	ldr	r3, [pc, #484]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d00d      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x40>
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	f200 80e1 	bhi.w	800359c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x34>
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x3a>
 80033e2:	e0db      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033e8:	e0db      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ea:	4b73      	ldr	r3, [pc, #460]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ee:	e0d8      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4b6f      	ldr	r3, [pc, #444]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fa:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d063      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003406:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	2200      	movs	r2, #0
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003418:	633b      	str	r3, [r7, #48]	; 0x30
 800341a:	2300      	movs	r3, #0
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
 800341e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003422:	4622      	mov	r2, r4
 8003424:	462b      	mov	r3, r5
 8003426:	f04f 0000 	mov.w	r0, #0
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	0159      	lsls	r1, r3, #5
 8003430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003434:	0150      	lsls	r0, r2, #5
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4621      	mov	r1, r4
 800343c:	1a51      	subs	r1, r2, r1
 800343e:	6139      	str	r1, [r7, #16]
 8003440:	4629      	mov	r1, r5
 8003442:	eb63 0301 	sbc.w	r3, r3, r1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003454:	4659      	mov	r1, fp
 8003456:	018b      	lsls	r3, r1, #6
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345e:	4651      	mov	r1, sl
 8003460:	018a      	lsls	r2, r1, #6
 8003462:	4651      	mov	r1, sl
 8003464:	ebb2 0801 	subs.w	r8, r2, r1
 8003468:	4659      	mov	r1, fp
 800346a:	eb63 0901 	sbc.w	r9, r3, r1
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	4623      	mov	r3, r4
 8003488:	eb18 0303 	adds.w	r3, r8, r3
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	462b      	mov	r3, r5
 8003490:	eb49 0303 	adc.w	r3, r9, r3
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034a2:	4629      	mov	r1, r5
 80034a4:	024b      	lsls	r3, r1, #9
 80034a6:	4621      	mov	r1, r4
 80034a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ac:	4621      	mov	r1, r4
 80034ae:	024a      	lsls	r2, r1, #9
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b6:	2200      	movs	r2, #0
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034c0:	f7fd fb9a 	bl	8000bf8 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	e058      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ce:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	099b      	lsrs	r3, r3, #6
 80034d4:	2200      	movs	r2, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	4611      	mov	r1, r2
 80034da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0159      	lsls	r1, r3, #5
 80034f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fa:	0150      	lsls	r0, r2, #5
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4641      	mov	r1, r8
 8003502:	ebb2 0a01 	subs.w	sl, r2, r1
 8003506:	4649      	mov	r1, r9
 8003508:	eb63 0b01 	sbc.w	fp, r3, r1
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800351c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003520:	ebb2 040a 	subs.w	r4, r2, sl
 8003524:	eb63 050b 	sbc.w	r5, r3, fp
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	00eb      	lsls	r3, r5, #3
 8003532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003536:	00e2      	lsls	r2, r4, #3
 8003538:	4614      	mov	r4, r2
 800353a:	461d      	mov	r5, r3
 800353c:	4643      	mov	r3, r8
 800353e:	18e3      	adds	r3, r4, r3
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	464b      	mov	r3, r9
 8003544:	eb45 0303 	adc.w	r3, r5, r3
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003556:	4629      	mov	r1, r5
 8003558:	028b      	lsls	r3, r1, #10
 800355a:	4621      	mov	r1, r4
 800355c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003560:	4621      	mov	r1, r4
 8003562:	028a      	lsls	r2, r1, #10
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356a:	2200      	movs	r2, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	61fa      	str	r2, [r7, #28]
 8003570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003574:	f7fd fb40 	bl	8000bf8 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800359e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3750      	adds	r7, #80	; 0x50
 80035a8:	46bd      	mov	sp, r7
 80035aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	007a1200 	.word	0x007a1200

080035bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000000 	.word	0x20000000

080035d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d8:	f7ff fff0 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0a9b      	lsrs	r3, r3, #10
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4903      	ldr	r1, [pc, #12]	; (80035f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	08007c40 	.word	0x08007c40

080035fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003600:	f7ff ffdc 	bl	80035bc <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0b5b      	lsrs	r3, r3, #13
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4903      	ldr	r1, [pc, #12]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	08007c40 	.word	0x08007c40

08003624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	220f      	movs	r2, #15
 8003632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0203 	and.w	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <HAL_RCC_GetClockConfig+0x5c>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <HAL_RCC_GetClockConfig+0x5c>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_GetClockConfig+0x5c>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_RCC_GetClockConfig+0x60>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0207 	and.w	r2, r3, #7
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	40023c00 	.word	0x40023c00

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e041      	b.n	800371e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f839 	bl	8003726 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fbce 	bl	8003e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e03c      	b.n	80037ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_TIM_Base_Start+0xa0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_TIM_Base_Start+0x5c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d013      	beq.n	8003798 <HAL_TIM_Base_Start+0x5c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <HAL_TIM_Base_Start+0xa4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <HAL_TIM_Base_Start+0x5c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_TIM_Base_Start+0xa8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_TIM_Base_Start+0x5c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_TIM_Base_Start+0xac>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_Base_Start+0x5c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	; (80037ec <HAL_TIM_Base_Start+0xb0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d010      	beq.n	80037cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e007      	b.n	80037cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40014000 	.word	0x40014000

080037f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d001      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e044      	b.n	8003892 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d018      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d013      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00e      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_TIM_Base_Start_IT+0xbc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a16      	ldr	r2, [pc, #88]	; (80038b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d111      	bne.n	8003880 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d010      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	e007      	b.n	8003890 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e041      	b.n	800394a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fdd0 	bl	8001480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f000 fab8 	bl	8003e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_TIM_PWM_Start+0x24>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e022      	b.n	80039be <HAL_TIM_PWM_Start+0x6a>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d109      	bne.n	8003992 <HAL_TIM_PWM_Start+0x3e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	e015      	b.n	80039be <HAL_TIM_PWM_Start+0x6a>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d109      	bne.n	80039ac <HAL_TIM_PWM_Start+0x58>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e008      	b.n	80039be <HAL_TIM_PWM_Start+0x6a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e068      	b.n	8003a98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_PWM_Start+0x82>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d4:	e013      	b.n	80039fe <HAL_TIM_PWM_Start+0xaa>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_PWM_Start+0x92>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e4:	e00b      	b.n	80039fe <HAL_TIM_PWM_Start+0xaa>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d104      	bne.n	80039f6 <HAL_TIM_PWM_Start+0xa2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f4:	e003      	b.n	80039fe <HAL_TIM_PWM_Start+0xaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fc46 	bl	8004298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <HAL_TIM_PWM_Start+0x14c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d107      	bne.n	8003a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_TIM_PWM_Start+0x14c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x10e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d013      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x10e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_TIM_PWM_Start+0x150>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x10e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <HAL_TIM_PWM_Start+0x154>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x10e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_TIM_PWM_Start+0x158>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x10e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_TIM_PWM_Start+0x15c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d111      	bne.n	8003a86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d010      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	e007      	b.n	8003a96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40014000 	.word	0x40014000

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f994 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f986 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f997 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f96e 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f960 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f971 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f948 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f93a 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f94b 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f922 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f914 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f925 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fb7a 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fbc8 	bl	80043d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8f6 	bl	8003e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fb9a 	bl	80043c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0ae      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	f200 809f 	bhi.w	8003e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003e01 	.word	0x08003e01
 8003cd0:	08003e01 	.word	0x08003e01
 8003cd4:	08003e01 	.word	0x08003e01
 8003cd8:	08003d3d 	.word	0x08003d3d
 8003cdc:	08003e01 	.word	0x08003e01
 8003ce0:	08003e01 	.word	0x08003e01
 8003ce4:	08003e01 	.word	0x08003e01
 8003ce8:	08003d7f 	.word	0x08003d7f
 8003cec:	08003e01 	.word	0x08003e01
 8003cf0:	08003e01 	.word	0x08003e01
 8003cf4:	08003e01 	.word	0x08003e01
 8003cf8:	08003dbf 	.word	0x08003dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f93c 	bl	8003f80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0208 	orr.w	r2, r2, #8
 8003d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6999      	ldr	r1, [r3, #24]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	619a      	str	r2, [r3, #24]
      break;
 8003d3a:	e064      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f982 	bl	800404c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6999      	ldr	r1, [r3, #24]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	619a      	str	r2, [r3, #24]
      break;
 8003d7c:	e043      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f9cd 	bl	8004124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0208 	orr.w	r2, r2, #8
 8003d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0204 	bic.w	r2, r2, #4
 8003da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69d9      	ldr	r1, [r3, #28]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	61da      	str	r2, [r3, #28]
      break;
 8003dbc:	e023      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fa17 	bl	80041f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69d9      	ldr	r1, [r3, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	021a      	lsls	r2, r3, #8
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	61da      	str	r2, [r3, #28]
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <TIM_Base_SetConfig+0xfc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d00b      	beq.n	8003ea0 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a37      	ldr	r2, [pc, #220]	; (8003f68 <TIM_Base_SetConfig+0x100>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_Base_SetConfig+0x38>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a36      	ldr	r2, [pc, #216]	; (8003f6c <TIM_Base_SetConfig+0x104>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_Base_SetConfig+0x38>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a35      	ldr	r2, [pc, #212]	; (8003f70 <TIM_Base_SetConfig+0x108>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <TIM_Base_SetConfig+0xfc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x100>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x104>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x108>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0x10c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <TIM_Base_SetConfig+0x110>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <TIM_Base_SetConfig+0xfc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	611a      	str	r2, [r3, #16]
  }
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f023 0201 	bic.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0302 	bic.w	r3, r3, #2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <TIM_OC1_SetConfig+0xc8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10c      	bne.n	8003ff6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0308 	bic.w	r3, r3, #8
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <TIM_OC1_SetConfig+0xc8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d111      	bne.n	8004022 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40010000 	.word	0x40010000

0800404c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f023 0210 	bic.w	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0320 	bic.w	r3, r3, #32
 8004096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <TIM_OC2_SetConfig+0xd4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10d      	bne.n	80040c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <TIM_OC2_SetConfig+0xd4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d113      	bne.n	80040f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000

08004124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <TIM_OC3_SetConfig+0xd0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10d      	bne.n	800419e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800419c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <TIM_OC3_SetConfig+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d113      	bne.n	80041ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40010000 	.word	0x40010000

080041f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	031b      	lsls	r3, r3, #12
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <TIM_OC4_SetConfig+0x9c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d109      	bne.n	800426c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800425e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000

08004298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e050      	b.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d013      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40014000 	.word	0x40014000

080043c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e042      	b.n	8004480 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f88e 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f973 	bl	8004718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d175      	bne.n	8004594 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_UART_Transmit+0x2c>
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e06e      	b.n	8004596 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2221      	movs	r2, #33	; 0x21
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c6:	f7fd fa29 	bl	800191c <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d108      	bne.n	80044f4 <HAL_UART_Transmit+0x6c>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e003      	b.n	80044fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044fc:	e02e      	b.n	800455c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f848 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e03a      	b.n	8004596 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3302      	adds	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e007      	b.n	800454e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	3301      	adds	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1cb      	bne.n	80044fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	2140      	movs	r1, #64	; 0x40
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f814 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e006      	b.n	8004596 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	e03b      	b.n	8004628 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d037      	beq.n	8004628 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fd f9b0 	bl	800191c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <UART_WaitOnFlagUntilTimeout+0x30>
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e03a      	b.n	8004648 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d020      	beq.n	8004628 <UART_WaitOnFlagUntilTimeout+0x8a>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d01d      	beq.n	8004628 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d116      	bne.n	8004628 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f81d 	bl	8004650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2208      	movs	r2, #8
 800461a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e00f      	b.n	8004648 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	429a      	cmp	r2, r3
 8004644:	d0b4      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b095      	sub	sp, #84	; 0x54
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004678:	643a      	str	r2, [r7, #64]	; 0x40
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800467e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e5      	bne.n	8004658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	61fb      	str	r3, [r7, #28]
   return(result);
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e5      	bne.n	800468c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d119      	bne.n	80046fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f023 0310 	bic.w	r3, r3, #16
 80046de:	647b      	str	r3, [r7, #68]	; 0x44
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e8:	61ba      	str	r2, [r7, #24]
 80046ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6979      	ldr	r1, [r7, #20]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	613b      	str	r3, [r7, #16]
   return(result);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
}
 800470a:	bf00      	nop
 800470c:	3754      	adds	r7, #84	; 0x54
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b0c0      	sub	sp, #256	; 0x100
 800471e:	af00      	add	r7, sp, #0
 8004720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	68d9      	ldr	r1, [r3, #12]
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	ea40 0301 	orr.w	r3, r0, r1
 8004740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004770:	f021 010c 	bic.w	r1, r1, #12
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800477e:	430b      	orrs	r3, r1
 8004780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	6999      	ldr	r1, [r3, #24]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	ea40 0301 	orr.w	r3, r0, r1
 800479e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b8f      	ldr	r3, [pc, #572]	; (80049e4 <UART_SetConfig+0x2cc>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d005      	beq.n	80047b8 <UART_SetConfig+0xa0>
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b8d      	ldr	r3, [pc, #564]	; (80049e8 <UART_SetConfig+0x2d0>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d104      	bne.n	80047c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe ff20 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 80047bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047c0:	e003      	b.n	80047ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7fe ff07 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 80047c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	f040 810c 	bne.w	80049f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	1891      	adds	r1, r2, r2
 80047f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047f2:	415b      	adcs	r3, r3
 80047f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047fa:	4621      	mov	r1, r4
 80047fc:	eb12 0801 	adds.w	r8, r2, r1
 8004800:	4629      	mov	r1, r5
 8004802:	eb43 0901 	adc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	462b      	mov	r3, r5
 800482a:	eb49 0303 	adc.w	r3, r9, r3
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800483e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004846:	460b      	mov	r3, r1
 8004848:	18db      	adds	r3, r3, r3
 800484a:	653b      	str	r3, [r7, #80]	; 0x50
 800484c:	4613      	mov	r3, r2
 800484e:	eb42 0303 	adc.w	r3, r2, r3
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
 8004854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800485c:	f7fc f9cc 	bl	8000bf8 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b61      	ldr	r3, [pc, #388]	; (80049ec <UART_SetConfig+0x2d4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800487c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	64b9      	str	r1, [r7, #72]	; 0x48
 8004888:	415b      	adcs	r3, r3
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004890:	4641      	mov	r1, r8
 8004892:	eb12 0a01 	adds.w	sl, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0b01 	adc.w	fp, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048b0:	4692      	mov	sl, r2
 80048b2:	469b      	mov	fp, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048be:	464b      	mov	r3, r9
 80048c0:	eb4b 0303 	adc.w	r3, fp, r3
 80048c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048dc:	460b      	mov	r3, r1
 80048de:	18db      	adds	r3, r3, r3
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
 80048e2:	4613      	mov	r3, r2
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048f2:	f7fc f981 	bl	8000bf8 <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <UART_SetConfig+0x2d4>)
 80048fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2264      	movs	r2, #100	; 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	1acb      	subs	r3, r1, r3
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <UART_SetConfig+0x2d4>)
 8004914:	fba3 2302 	umull	r2, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004920:	441c      	add	r4, r3
 8004922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800492c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	63b9      	str	r1, [r7, #56]	; 0x38
 800493c:	415b      	adcs	r3, r3
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004944:	4641      	mov	r1, r8
 8004946:	1851      	adds	r1, r2, r1
 8004948:	6339      	str	r1, [r7, #48]	; 0x30
 800494a:	4649      	mov	r1, r9
 800494c:	414b      	adcs	r3, r1
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800495c:	4659      	mov	r1, fp
 800495e:	00cb      	lsls	r3, r1, #3
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004966:	4651      	mov	r1, sl
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	4603      	mov	r3, r0
 8004970:	4642      	mov	r2, r8
 8004972:	189b      	adds	r3, r3, r2
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	464b      	mov	r3, r9
 800497a:	460a      	mov	r2, r1
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ae:	f7fc f923 	bl	8000bf8 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UART_SetConfig+0x2d4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	; 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	3332      	adds	r3, #50	; 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <UART_SetConfig+0x2d4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 0207 	and.w	r2, r3, #7
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e0:	e106      	b.n	8004bf0 <UART_SetConfig+0x4d8>
 80049e2:	bf00      	nop
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40011400 	.word	0x40011400
 80049ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a02:	4642      	mov	r2, r8
 8004a04:	464b      	mov	r3, r9
 8004a06:	1891      	adds	r1, r2, r2
 8004a08:	6239      	str	r1, [r7, #32]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a12:	4641      	mov	r1, r8
 8004a14:	1854      	adds	r4, r2, r1
 8004a16:	4649      	mov	r1, r9
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a38:	464b      	mov	r3, r9
 8004a3a:	eb45 0303 	adc.w	r3, r5, r3
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a5e:	4629      	mov	r1, r5
 8004a60:	008b      	lsls	r3, r1, #2
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a68:	4621      	mov	r1, r4
 8004a6a:	008a      	lsls	r2, r1, #2
 8004a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a70:	f7fc f8c2 	bl	8000bf8 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	011c      	lsls	r4, r3, #4
 8004a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	61b9      	str	r1, [r7, #24]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6139      	str	r1, [r7, #16]
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad8:	464b      	mov	r3, r9
 8004ada:	460a      	mov	r2, r1
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004afc:	4649      	mov	r1, r9
 8004afe:	008b      	lsls	r3, r1, #2
 8004b00:	4641      	mov	r1, r8
 8004b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b06:	4641      	mov	r1, r8
 8004b08:	008a      	lsls	r2, r1, #2
 8004b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b0e:	f7fc f873 	bl	8000bf8 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2264      	movs	r2, #100	; 0x64
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	1acb      	subs	r3, r1, r3
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	3332      	adds	r3, #50	; 0x32
 8004b2c:	4a33      	ldr	r2, [pc, #204]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b38:	441c      	add	r4, r3
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	673b      	str	r3, [r7, #112]	; 0x70
 8004b42:	677a      	str	r2, [r7, #116]	; 0x74
 8004b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	415b      	adcs	r3, r3
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b58:	4641      	mov	r1, r8
 8004b5a:	1851      	adds	r1, r2, r1
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	4649      	mov	r1, r9
 8004b60:	414b      	adcs	r3, r1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b70:	4659      	mov	r1, fp
 8004b72:	00cb      	lsls	r3, r1, #3
 8004b74:	4651      	mov	r1, sl
 8004b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	00ca      	lsls	r2, r1, #3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	4642      	mov	r2, r8
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	eb42 0303 	adc.w	r3, r2, r3
 8004b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9e:	667a      	str	r2, [r7, #100]	; 0x64
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bac:	4649      	mov	r1, r9
 8004bae:	008b      	lsls	r3, r1, #2
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	008a      	lsls	r2, r1, #2
 8004bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bbe:	f7fc f81b 	bl	8000bf8 <__aeabi_uldivmod>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	2164      	movs	r1, #100	; 0x64
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	3332      	adds	r3, #50	; 0x32
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	f003 020f 	and.w	r2, r3, #15
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4422      	add	r2, r4
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <readFromAdc>:
////	readFromAdc(temp);
//}


void readFromAdc(struct ntc_sensor *NTC_SENS)
{
 8004c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 6; i++)
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	e0b1      	b.n	8004d78 <readFromAdc+0x178>
	{
		NTC_SENS[i].Vout = adc_result_dma[i];
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	4a62      	ldr	r2, [pc, #392]	; (8004da0 <readFromAdc+0x1a0>)
 8004c18:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4413      	add	r3, r2
 8004c24:	ee07 1a90 	vmov	s15, r1
 8004c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2c:	edc3 7a00 	vstr	s15, [r3]
		NTC_SENS[i].Vout = NTC_SENS[i].Vout * (3.3/4095);
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fc84 	bl	8000548 <__aeabi_f2d>
 8004c40:	a353      	add	r3, pc, #332	; (adr r3, 8004d90 <readFromAdc+0x190>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb fcd7 	bl	80005f8 <__aeabi_dmul>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	18d4      	adds	r4, r2, r3
 8004c5a:	f7fb ff7d 	bl	8000b58 <__aeabi_d2f>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6023      	str	r3, [r4, #0]
		NTC_SENS[i].R_NTC = (NTC_SENS[i].Vout * R_10k) / (Vsupply - NTC_SENS[i].Vout);
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	ed93 7a00 	vldr	s14, [r3]
 8004c6e:	4b4d      	ldr	r3, [pc, #308]	; (8004da4 <readFromAdc+0x1a4>)
 8004c70:	edd3 7a00 	vldr	s15, [r3]
 8004c74:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <readFromAdc+0x1a8>)
 8004c7a:	ed93 7a00 	vldr	s14, [r3]
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c9a:	edc3 7a01 	vstr	s15, [r3, #4]
		NTC_SENS[i].Temp_K = (T0 * B_param) / (T0 * log(NTC_SENS[i].R_NTC / R_10k) + B_param);
 8004c9e:	4b43      	ldr	r3, [pc, #268]	; (8004dac <readFromAdc+0x1ac>)
 8004ca0:	ed93 7a00 	vldr	s14, [r3]
 8004ca4:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <readFromAdc+0x1b0>)
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	ee17 0a90 	vmov	r0, s15
 8004cb2:	f7fb fc49 	bl	8000548 <__aeabi_f2d>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <readFromAdc+0x1ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb fc42 	bl	8000548 <__aeabi_f2d>
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4413      	add	r3, r2
 8004cd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004cd4:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <readFromAdc+0x1a4>)
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cde:	ee16 0a90 	vmov	r0, s13
 8004ce2:	f7fb fc31 	bl	8000548 <__aeabi_f2d>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	ec43 2b10 	vmov	d0, r2, r3
 8004cee:	f002 fd2f 	bl	8007750 <log>
 8004cf2:	ec53 2b10 	vmov	r2, r3, d0
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	f7fb fc7d 	bl	80005f8 <__aeabi_dmul>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4690      	mov	r8, r2
 8004d04:	4699      	mov	r9, r3
 8004d06:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <readFromAdc+0x1b0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fc1c 	bl	8000548 <__aeabi_f2d>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fab8 	bl	800028c <__adddf3>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fd92 	bl	800084c <__aeabi_ddiv>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	18d4      	adds	r4, r2, r3
 8004d38:	f7fb ff0e 	bl	8000b58 <__aeabi_d2f>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	60a3      	str	r3, [r4, #8]
		NTC_SENS[i].Temp_C = NTC_SENS[i].Temp_K - 273.15;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	4413      	add	r3, r2
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fbfc 	bl	8000548 <__aeabi_f2d>
 8004d50:	a311      	add	r3, pc, #68	; (adr r3, 8004d98 <readFromAdc+0x198>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fa97 	bl	8000288 <__aeabi_dsub>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	18d4      	adds	r4, r2, r3
 8004d6a:	f7fb fef5 	bl	8000b58 <__aeabi_d2f>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	60e3      	str	r3, [r4, #12]
	for(i = 0; i < 6; i++)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	3301      	adds	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	f67f af4a 	bls.w	8004c14 <readFromAdc+0x14>
	}
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d8c:	f3af 8000 	nop.w
 8004d90:	e734d9b4 	.word	0xe734d9b4
 8004d94:	3f4a680c 	.word	0x3f4a680c
 8004d98:	66666666 	.word	0x66666666
 8004d9c:	40711266 	.word	0x40711266
 8004da0:	20000224 	.word	0x20000224
 8004da4:	20000010 	.word	0x20000010
 8004da8:	2000000c 	.word	0x2000000c
 8004dac:	20000018 	.word	0x20000018
 8004db0:	20000014 	.word	0x20000014

08004db4 <updateSensors>:


void updateSensors(struct ntc_sensor *temp)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_result_dma, 6);
 8004dbc:	2206      	movs	r2, #6
 8004dbe:	4905      	ldr	r1, [pc, #20]	; (8004dd4 <updateSensors+0x20>)
 8004dc0:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <updateSensors+0x24>)
 8004dc2:	f7fc fdfb 	bl	80019bc <HAL_ADC_Start_DMA>
	readFromAdc(temp);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff1a 	bl	8004c00 <readFromAdc>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000224 	.word	0x20000224
 8004dd8:	200000a0 	.word	0x200000a0

08004ddc <GetChar>:

extern UART_HandleTypeDef huart1;
uint8_t msg1[17];

char GetChar(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
 	while((huart1.Instance->SR & USART_SR_RXNE) != USART_SR_RXNE);
 8004de0:	bf00      	nop
 8004de2:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <GetChar+0x28>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d1f8      	bne.n	8004de2 <GetChar+0x6>
	return huart1.Instance->DR;
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <GetChar+0x28>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b2db      	uxtb	r3, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000190 	.word	0x20000190

08004e08 <GetString>:

void GetString(char* buffer, int maxLength)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
    int i = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
    char receivedChar;

    while ((huart1.Instance->SR & USART_SR_RXNE) != 0)
 8004e16:	e003      	b.n	8004e20 <GetString+0x18>
    {
        char dummy = huart1.Instance->DR; // Čitanje podataka iz RX buffera i odbacivanje
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <GetString+0x6c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	72bb      	strb	r3, [r7, #10]
    while ((huart1.Instance->SR & USART_SR_RXNE) != 0)
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <GetString+0x6c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f4      	bne.n	8004e18 <GetString+0x10>
        (void)dummy; // Koristi se dummy promenljiva da bi se izbeglo upozorenje o nepotrebnom promenljivoj
    }

    // Čitanje karaktera sve dok ne pročitamo terminator stringa ('\0') ili dostignemo maksimalnu dužinu
    for(i = 0; i < 3; i++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e013      	b.n	8004e5c <GetString+0x54>
    {
    	receivedChar = GetChar();
 8004e34:	f7ff ffd2 	bl	8004ddc <GetChar>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	72fb      	strb	r3, [r7, #11]
        // Ako nije null karakter i nismo premašili maksimalnu dužinu, dodajemo karakter u bafer
        if (receivedChar != '\0' && i < maxLength - 1)
 8004e3c:	7afb      	ldrb	r3, [r7, #11]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00f      	beq.n	8004e62 <GetString+0x5a>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	da0a      	bge.n	8004e62 <GetString+0x5a>
        {
            buffer[i] = receivedChar;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	7afa      	ldrb	r2, [r7, #11]
 8004e54:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 3; i++)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	dde8      	ble.n	8004e34 <GetString+0x2c>
            break;  // Ako smo pročitali null karakter ili dostigli maksimalnu dužinu, prekidamo petlju
        }
    }

    // Dodajemo null terminator na kraj stringa
    buffer[i] = '\0';
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000190 	.word	0x20000190

08004e78 <sendDataOverBT>:

void sendDataOverBT(struct ntc_sensor *temp)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 6; i++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e01f      	b.n	8004eca <sendDataOverBT+0x52>
	{
		sprintf((char*)msg1,"TEMP[%d] = %d",i, (int)temp[i].Temp_C);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9a:	ee17 3a90 	vmov	r3, s15
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	490e      	ldr	r1, [pc, #56]	; (8004edc <sendDataOverBT+0x64>)
 8004ea2:	480f      	ldr	r0, [pc, #60]	; (8004ee0 <sendDataOverBT+0x68>)
 8004ea4:	f001 fd5c 	bl	8006960 <siprintf>
		HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), HAL_MAX_DELAY);
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	2211      	movs	r2, #17
 8004eae:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <sendDataOverBT+0x68>)
 8004eb0:	480c      	ldr	r0, [pc, #48]	; (8004ee4 <sendDataOverBT+0x6c>)
 8004eb2:	f7ff fae9 	bl	8004488 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 3, 1000);
 8004eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eba:	2203      	movs	r2, #3
 8004ebc:	490a      	ldr	r1, [pc, #40]	; (8004ee8 <sendDataOverBT+0x70>)
 8004ebe:	4809      	ldr	r0, [pc, #36]	; (8004ee4 <sendDataOverBT+0x6c>)
 8004ec0:	f7ff fae2 	bl	8004488 <HAL_UART_Transmit>
	for(i = 0; i < 6; i++)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	dddc      	ble.n	8004e8a <sendDataOverBT+0x12>
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	08007b88 	.word	0x08007b88
 8004ee0:	20000230 	.word	0x20000230
 8004ee4:	20000190 	.word	0x20000190
 8004ee8:	08007b98 	.word	0x08007b98

08004eec <initTasks>:
uint8_t msg[17];
char myString[3];


void initTasks(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af02      	add	r7, sp, #8
	TaskHandle_t UART_handle;
	TaskHandle_t Switch_handle;

	BaseType_t status;

	HAL_TIM_Base_Start(&htim2);
 8004ef2:	482f      	ldr	r0, [pc, #188]	; (8004fb0 <initTasks+0xc4>)
 8004ef4:	f7fe fc22 	bl	800373c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	482d      	ldr	r0, [pc, #180]	; (8004fb0 <initTasks+0xc4>)
 8004efc:	f7fe fd2a 	bl	8003954 <HAL_TIM_PWM_Start>

	setPWM(0);
 8004f00:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004fb4 <initTasks+0xc8>
 8004f04:	f000 f954 	bl	80051b0 <setPWM>

	status = xTaskCreate(adc_handler, "LED-Task", 200, NULL, 2, &ADC_handle);
 8004f08:	f107 030c 	add.w	r3, r7, #12
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2302      	movs	r3, #2
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	22c8      	movs	r2, #200	; 0xc8
 8004f16:	4928      	ldr	r1, [pc, #160]	; (8004fb8 <initTasks+0xcc>)
 8004f18:	4828      	ldr	r0, [pc, #160]	; (8004fbc <initTasks+0xd0>)
 8004f1a:	f000 f9fd 	bl	8005318 <xTaskCreate>
 8004f1e:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d00a      	beq.n	8004f3c <initTasks+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <initTasks+0x4e>
	status = xTaskCreate(uart_handler, "UART-Task", 200, NULL, 2, &UART_handle);
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	2302      	movs	r3, #2
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	22c8      	movs	r2, #200	; 0xc8
 8004f4a:	491d      	ldr	r1, [pc, #116]	; (8004fc0 <initTasks+0xd4>)
 8004f4c:	481d      	ldr	r0, [pc, #116]	; (8004fc4 <initTasks+0xd8>)
 8004f4e:	f000 f9e3 	bl	8005318 <xTaskCreate>
 8004f52:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d00a      	beq.n	8004f70 <initTasks+0x84>
        __asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	617b      	str	r3, [r7, #20]
    }
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <initTasks+0x82>
	status = xTaskCreate(switch_handler, "Switch-Task", 200, NULL, 2, &Switch_handle);
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	2302      	movs	r3, #2
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	22c8      	movs	r2, #200	; 0xc8
 8004f7c:	4912      	ldr	r1, [pc, #72]	; (8004fc8 <initTasks+0xdc>)
 8004f7e:	4813      	ldr	r0, [pc, #76]	; (8004fcc <initTasks+0xe0>)
 8004f80:	f000 f9ca 	bl	8005318 <xTaskCreate>
 8004f84:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d00a      	beq.n	8004fa2 <initTasks+0xb6>
        __asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	613b      	str	r3, [r7, #16]
    }
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <initTasks+0xb4>

	vTaskStartScheduler();
 8004fa2:	f000 fb57 	bl	8005654 <vTaskStartScheduler>
}
 8004fa6:	bf00      	nop
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000148 	.word	0x20000148
 8004fb4:	00000000 	.word	0x00000000
 8004fb8:	08007b9c 	.word	0x08007b9c
 8004fbc:	08004fd1 	.word	0x08004fd1
 8004fc0:	08007ba8 	.word	0x08007ba8
 8004fc4:	0800500d 	.word	0x0800500d
 8004fc8:	08007bb4 	.word	0x08007bb4
 8004fcc:	080050b9 	.word	0x080050b9

08004fd0 <adc_handler>:

 void adc_handler(void *parameters)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	static uint8_t i = 0;
	while(1)
	{
		updateSensors(ntc_sensors);
 8004fd8:	480a      	ldr	r0, [pc, #40]	; (8005004 <adc_handler+0x34>)
 8004fda:	f7ff feeb 	bl	8004db4 <updateSensors>

		for(i = 0; i < 1; i++)
 8004fde:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <adc_handler+0x38>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	e005      	b.n	8004ff2 <adc_handler+0x22>
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <adc_handler+0x38>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	3301      	adds	r3, #1
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <adc_handler+0x38>)
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <adc_handler+0x38>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f5      	beq.n	8004fe6 <adc_handler+0x16>
//				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 3, 1000);
//				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
			}
		}

		vTaskDelay(250);
 8004ffa:	20fa      	movs	r0, #250	; 0xfa
 8004ffc:	f000 faf6 	bl	80055ec <vTaskDelay>
		updateSensors(ntc_sensors);
 8005000:	e7ea      	b.n	8004fd8 <adc_handler+0x8>
 8005002:	bf00      	nop
 8005004:	20000244 	.word	0x20000244
 8005008:	200002bb 	.word	0x200002bb

0800500c <uart_handler>:
	}
}

 void uart_handler(void *parameters)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
		static char ch = '1';
		while(1)
		{
			ch= GetChar();
 8005014:	f7ff fee2 	bl	8004ddc <GetChar>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <uart_handler+0x88>)
 800501e:	701a      	strb	r2, [r3, #0]
			if(ch == '1')
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <uart_handler+0x88>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b31      	cmp	r3, #49	; 0x31
 8005026:	d103      	bne.n	8005030 <uart_handler+0x24>
			{
				sendDataOverBT(ntc_sensors);
 8005028:	481b      	ldr	r0, [pc, #108]	; (8005098 <uart_handler+0x8c>)
 800502a:	f7ff ff25 	bl	8004e78 <sendDataOverBT>
 800502e:	e02b      	b.n	8005088 <uart_handler+0x7c>
	//			{
	//				sprintf(msg,"TEMP[%d] = %.2f\n\r",i, ntc_sensors[i].Temp_C);
	//				HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);
	//			}
			}
			else if(ch == '2')
 8005030:	4b18      	ldr	r3, [pc, #96]	; (8005094 <uart_handler+0x88>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b32      	cmp	r3, #50	; 0x32
 8005036:	d116      	bne.n	8005066 <uart_handler+0x5a>
			{
				sprintf((char*)msg,"Write MAX TEMP:");
 8005038:	4918      	ldr	r1, [pc, #96]	; (800509c <uart_handler+0x90>)
 800503a:	4819      	ldr	r0, [pc, #100]	; (80050a0 <uart_handler+0x94>)
 800503c:	f001 fc90 	bl	8006960 <siprintf>
				HAL_UART_Transmit(&huart1, msg, sizeof(msg)+5, HAL_MAX_DELAY);
 8005040:	f04f 33ff 	mov.w	r3, #4294967295
 8005044:	2216      	movs	r2, #22
 8005046:	4916      	ldr	r1, [pc, #88]	; (80050a0 <uart_handler+0x94>)
 8005048:	4816      	ldr	r0, [pc, #88]	; (80050a4 <uart_handler+0x98>)
 800504a:	f7ff fa1d 	bl	8004488 <HAL_UART_Transmit>
				//HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 3, 1000);

				GetString(myString, 3);
 800504e:	2103      	movs	r1, #3
 8005050:	4815      	ldr	r0, [pc, #84]	; (80050a8 <uart_handler+0x9c>)
 8005052:	f7ff fed9 	bl	8004e08 <GetString>
				MAX_TEMP = atoi(myString);
 8005056:	4814      	ldr	r0, [pc, #80]	; (80050a8 <uart_handler+0x9c>)
 8005058:	f001 fad4 	bl	8006604 <atoi>
 800505c:	4603      	mov	r3, r0
 800505e:	b2da      	uxtb	r2, r3
 8005060:	4b12      	ldr	r3, [pc, #72]	; (80050ac <uart_handler+0xa0>)
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	e010      	b.n	8005088 <uart_handler+0x7c>

			}
			else if(ch == '3')
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <uart_handler+0x88>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b33      	cmp	r3, #51	; 0x33
 800506c:	d104      	bne.n	8005078 <uart_handler+0x6c>
				setPWM(100);
 800506e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80050b0 <uart_handler+0xa4>
 8005072:	f000 f89d 	bl	80051b0 <setPWM>
 8005076:	e007      	b.n	8005088 <uart_handler+0x7c>
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
//				setPWM(100);

			else if(ch == '4')
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <uart_handler+0x88>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b34      	cmp	r3, #52	; 0x34
 800507e:	d103      	bne.n	8005088 <uart_handler+0x7c>
				setPWM(0);
 8005080:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80050b4 <uart_handler+0xa8>
 8005084:	f000 f894 	bl	80051b0 <setPWM>
//				GetString(myString, 3);
//				PWM = atoi(myString);
//				setPWM((float)PWM);
//			}

			vTaskDelay(750);
 8005088:	f240 20ee 	movw	r0, #750	; 0x2ee
 800508c:	f000 faae 	bl	80055ec <vTaskDelay>
			ch= GetChar();
 8005090:	e7c0      	b.n	8005014 <uart_handler+0x8>
 8005092:	bf00      	nop
 8005094:	2000001d 	.word	0x2000001d
 8005098:	20000244 	.word	0x20000244
 800509c:	08007bc0 	.word	0x08007bc0
 80050a0:	200002a4 	.word	0x200002a4
 80050a4:	20000190 	.word	0x20000190
 80050a8:	200002b8 	.word	0x200002b8
 80050ac:	2000001c 	.word	0x2000001c
 80050b0:	42c80000 	.word	0x42c80000
 80050b4:	00000000 	.word	0x00000000

080050b8 <switch_handler>:
		}
}

void switch_handler(void *parameters)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	static uint8_t positions[4];
	static uint8_t switch_position = 0;

	while(1)
	{
		positions[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80050c0:	2102      	movs	r1, #2
 80050c2:	4831      	ldr	r0, [pc, #196]	; (8005188 <switch_handler+0xd0>)
 80050c4:	f7fd fdfe 	bl	8002cc4 <HAL_GPIO_ReadPin>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4b2f      	ldr	r3, [pc, #188]	; (800518c <switch_handler+0xd4>)
 80050ce:	701a      	strb	r2, [r3, #0]
		positions[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80050d0:	2104      	movs	r1, #4
 80050d2:	482d      	ldr	r0, [pc, #180]	; (8005188 <switch_handler+0xd0>)
 80050d4:	f7fd fdf6 	bl	8002cc4 <HAL_GPIO_ReadPin>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	4b2b      	ldr	r3, [pc, #172]	; (800518c <switch_handler+0xd4>)
 80050de:	705a      	strb	r2, [r3, #1]
		positions[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80050e0:	2108      	movs	r1, #8
 80050e2:	4829      	ldr	r0, [pc, #164]	; (8005188 <switch_handler+0xd0>)
 80050e4:	f7fd fdee 	bl	8002cc4 <HAL_GPIO_ReadPin>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <switch_handler+0xd4>)
 80050ee:	709a      	strb	r2, [r3, #2]
		positions[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80050f0:	2110      	movs	r1, #16
 80050f2:	4825      	ldr	r0, [pc, #148]	; (8005188 <switch_handler+0xd0>)
 80050f4:	f7fd fde6 	bl	8002cc4 <HAL_GPIO_ReadPin>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b23      	ldr	r3, [pc, #140]	; (800518c <switch_handler+0xd4>)
 80050fe:	70da      	strb	r2, [r3, #3]

		switch_position = (positions[0] << 3) | (positions[1] << 2) | (positions[2] << 1) | (positions[3]);
 8005100:	4b22      	ldr	r3, [pc, #136]	; (800518c <switch_handler+0xd4>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	b25a      	sxtb	r2, r3
 8005108:	4b20      	ldr	r3, [pc, #128]	; (800518c <switch_handler+0xd4>)
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	b25b      	sxtb	r3, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	b25a      	sxtb	r2, r3
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <switch_handler+0xd4>)
 8005116:	789b      	ldrb	r3, [r3, #2]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	b25b      	sxtb	r3, r3
 800511c:	4313      	orrs	r3, r2
 800511e:	b25a      	sxtb	r2, r3
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <switch_handler+0xd4>)
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	b25b      	sxtb	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b25b      	sxtb	r3, r3
 800512a:	b2da      	uxtb	r2, r3
 800512c:	4b18      	ldr	r3, [pc, #96]	; (8005190 <switch_handler+0xd8>)
 800512e:	701a      	strb	r2, [r3, #0]

		switch(switch_position)
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <switch_handler+0xd8>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b0f      	cmp	r3, #15
 8005136:	d00d      	beq.n	8005154 <switch_handler+0x9c>
 8005138:	2b0f      	cmp	r3, #15
 800513a:	dc17      	bgt.n	800516c <switch_handler+0xb4>
 800513c:	2b0b      	cmp	r3, #11
 800513e:	d011      	beq.n	8005164 <switch_handler+0xac>
 8005140:	2b0d      	cmp	r3, #13
 8005142:	d113      	bne.n	800516c <switch_handler+0xb4>
		{
	    case 0x0D:
	        printf("Switch position: 0\n");
 8005144:	4813      	ldr	r0, [pc, #76]	; (8005194 <switch_handler+0xdc>)
 8005146:	f001 fc03 	bl	8006950 <puts>
	        setPWM(0);
 800514a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005198 <switch_handler+0xe0>
 800514e:	f000 f82f 	bl	80051b0 <setPWM>
	        break;
 8005152:	e013      	b.n	800517c <switch_handler+0xc4>
	    case 0xF:
	        printf("Switch position: 1\n");
 8005154:	4811      	ldr	r0, [pc, #68]	; (800519c <switch_handler+0xe4>)
 8005156:	f001 fbfb 	bl	8006950 <puts>
	        setPWM(90);
 800515a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80051a0 <switch_handler+0xe8>
 800515e:	f000 f827 	bl	80051b0 <setPWM>
	        break;
 8005162:	e00b      	b.n	800517c <switch_handler+0xc4>
	    case 0x0B:
	        printf("Switch position: 2\n");
 8005164:	480f      	ldr	r0, [pc, #60]	; (80051a4 <switch_handler+0xec>)
 8005166:	f001 fbf3 	bl	8006950 <puts>
	        break;
 800516a:	e007      	b.n	800517c <switch_handler+0xc4>
	    default:
	        printf("Switch position: undefined\n");
 800516c:	480e      	ldr	r0, [pc, #56]	; (80051a8 <switch_handler+0xf0>)
 800516e:	f001 fbef 	bl	8006950 <puts>
	        setPWM(100);
 8005172:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80051ac <switch_handler+0xf4>
 8005176:	f000 f81b 	bl	80051b0 <setPWM>
	        break;
 800517a:	bf00      	nop
		}
		vTaskDelay(500);
 800517c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005180:	f000 fa34 	bl	80055ec <vTaskDelay>
		positions[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8005184:	e79c      	b.n	80050c0 <switch_handler+0x8>
 8005186:	bf00      	nop
 8005188:	40020000 	.word	0x40020000
 800518c:	200002bc 	.word	0x200002bc
 8005190:	200002c0 	.word	0x200002c0
 8005194:	08007bd0 	.word	0x08007bd0
 8005198:	00000000 	.word	0x00000000
 800519c:	08007be4 	.word	0x08007be4
 80051a0:	42b40000 	.word	0x42b40000
 80051a4:	08007bf8 	.word	0x08007bf8
 80051a8:	08007c0c 	.word	0x08007c0c
 80051ac:	42c80000 	.word	0x42c80000

080051b0 <setPWM>:


}

void setPWM(float dc)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t counterTicks = (dc * 7680) / 100;
 80051ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80051be:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80051ec <setPWM+0x3c>
 80051c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051c6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80051f0 <setPWM+0x40>
 80051ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d2:	ee17 3a90 	vmov	r3, s15
 80051d6:	81fb      	strh	r3, [r7, #14]

//    htim1->Instance->CCR1 = counterTicks;
    htim2.Instance->CCR1 = counterTicks;
 80051d8:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <setPWM+0x44>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	89fa      	ldrh	r2, [r7, #14]
 80051de:	635a      	str	r2, [r3, #52]	; 0x34

}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	45f00000 	.word	0x45f00000
 80051f0:	42c80000 	.word	0x42c80000
 80051f4:	20000148 	.word	0x20000148

080051f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f103 0208 	add.w	r2, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f04f 32ff 	mov.w	r2, #4294967295
 8005210:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f103 0208 	add.w	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d103      	bne.n	8005272 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e00c      	b.n	800528c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3308      	adds	r3, #8
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e002      	b.n	8005280 <vListInsert+0x2e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d2f6      	bcs.n	800527a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6892      	ldr	r2, [r2, #8]
 80052da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6852      	ldr	r2, [r2, #4]
 80052e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d103      	bne.n	80052f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af04      	add	r7, sp, #16
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4618      	mov	r0, r3
 800532e:	f000 ff9d 	bl	800626c <pvPortMalloc>
 8005332:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d013      	beq.n	8005362 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800533a:	2058      	movs	r0, #88	; 0x58
 800533c:	f000 ff96 	bl	800626c <pvPortMalloc>
 8005340:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005348:	2258      	movs	r2, #88	; 0x58
 800534a:	2100      	movs	r1, #0
 800534c:	69f8      	ldr	r0, [r7, #28]
 800534e:	f001 fbff 	bl	8006b50 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
 8005358:	e005      	b.n	8005366 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f001 f840 	bl	80063e0 <vPortFree>
 8005360:	e001      	b.n	8005366 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	2300      	movs	r3, #0
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	9302      	str	r3, [sp, #8]
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f80e 	bl	80053a4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005388:	69f8      	ldr	r0, [r7, #28]
 800538a:	f000 f899 	bl	80054c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800538e:	2301      	movs	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	e002      	b.n	800539a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
 8005398:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800539a:	69bb      	ldr	r3, [r7, #24]
    }
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	21a5      	movs	r1, #165	; 0xa5
 80053be:	f001 fbc7 	bl	8006b50 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053cc:	3b01      	subs	r3, #1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <prvInitialiseNewTask+0x58>
        __asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	617b      	str	r3, [r7, #20]
    }
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01e      	beq.n	8005440 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e012      	b.n	800542e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	7819      	ldrb	r1, [r3, #0]
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	3334      	adds	r3, #52	; 0x34
 8005418:	460a      	mov	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d006      	beq.n	8005436 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b09      	cmp	r3, #9
 8005432:	d9e9      	bls.n	8005408 <prvInitialiseNewTask+0x64>
 8005434:	e000      	b.n	8005438 <prvInitialiseNewTask+0x94>
            {
                break;
 8005436:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b04      	cmp	r3, #4
 8005444:	d90a      	bls.n	800545c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	613b      	str	r3, [r7, #16]
    }
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b04      	cmp	r3, #4
 8005460:	d901      	bls.n	8005466 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005462:	2304      	movs	r3, #4
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005470:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fede 	bl	8005238 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	3318      	adds	r3, #24
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fed9 	bl	8005238 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	f1c3 0205 	rsb	r2, r3, #5
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	69b8      	ldr	r0, [r7, #24]
 80054a2:	f000 fcd1 	bl	8005e48 <pxPortInitialiseStack>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054b8:	bf00      	nop
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80054c8:	f000 fdee 	bl	80060a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80054cc:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <prvAddNewTaskToReadyList+0x110>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	4a3f      	ldr	r2, [pc, #252]	; (80055d0 <prvAddNewTaskToReadyList+0x110>)
 80054d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80054d6:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <prvAddNewTaskToReadyList+0x114>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80054de:	4a3d      	ldr	r2, [pc, #244]	; (80055d4 <prvAddNewTaskToReadyList+0x114>)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054e4:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <prvAddNewTaskToReadyList+0x110>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d110      	bne.n	800550e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80054ec:	f000 fb92 	bl	8005c14 <prvInitialiseTaskLists>
 80054f0:	e00d      	b.n	800550e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80054f2:	4b39      	ldr	r3, [pc, #228]	; (80055d8 <prvAddNewTaskToReadyList+0x118>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054fa:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <prvAddNewTaskToReadyList+0x114>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	429a      	cmp	r2, r3
 8005506:	d802      	bhi.n	800550e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005508:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <prvAddNewTaskToReadyList+0x114>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800550e:	4b33      	ldr	r3, [pc, #204]	; (80055dc <prvAddNewTaskToReadyList+0x11c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a31      	ldr	r2, [pc, #196]	; (80055dc <prvAddNewTaskToReadyList+0x11c>)
 8005516:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005518:	4b30      	ldr	r3, [pc, #192]	; (80055dc <prvAddNewTaskToReadyList+0x11c>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	2201      	movs	r2, #1
 8005526:	409a      	lsls	r2, r3
 8005528:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <prvAddNewTaskToReadyList+0x120>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4313      	orrs	r3, r2
 800552e:	4a2c      	ldr	r2, [pc, #176]	; (80055e0 <prvAddNewTaskToReadyList+0x120>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	492b      	ldr	r1, [pc, #172]	; (80055e4 <prvAddNewTaskToReadyList+0x124>)
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	3304      	adds	r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	609a      	str	r2, [r3, #8]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	3204      	adds	r2, #4
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	609a      	str	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <prvAddNewTaskToReadyList+0x124>)
 8005576:	441a      	add	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	615a      	str	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	4918      	ldr	r1, [pc, #96]	; (80055e4 <prvAddNewTaskToReadyList+0x124>)
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	4814      	ldr	r0, [pc, #80]	; (80055e4 <prvAddNewTaskToReadyList+0x124>)
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4403      	add	r3, r0
 800559c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800559e:	f000 fdb3 	bl	8006108 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <prvAddNewTaskToReadyList+0x118>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00e      	beq.n	80055c8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <prvAddNewTaskToReadyList+0x114>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d207      	bcs.n	80055c8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <prvAddNewTaskToReadyList+0x128>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	2000039c 	.word	0x2000039c
 80055d4:	200002c4 	.word	0x200002c4
 80055d8:	200003a8 	.word	0x200003a8
 80055dc:	200003b8 	.word	0x200003b8
 80055e0:	200003a4 	.word	0x200003a4
 80055e4:	200002c8 	.word	0x200002c8
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <vTaskDelay+0x60>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <vTaskDelay+0x30>
        __asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
    }
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800561c:	f000 f866 	bl	80056ec <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb90 	bl	8005d48 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005628:	f000 f86e 	bl	8005708 <xTaskResumeAll>
 800562c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <vTaskDelay+0x64>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200003c4 	.word	0x200003c4
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800565a:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <vTaskStartScheduler+0x7c>)
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	2282      	movs	r2, #130	; 0x82
 8005666:	491b      	ldr	r1, [pc, #108]	; (80056d4 <vTaskStartScheduler+0x80>)
 8005668:	481b      	ldr	r0, [pc, #108]	; (80056d8 <vTaskStartScheduler+0x84>)
 800566a:	f7ff fe55 	bl	8005318 <xTaskCreate>
 800566e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d116      	bne.n	80056a4 <vTaskStartScheduler+0x50>
        __asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	60bb      	str	r3, [r7, #8]
    }
 8005688:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <vTaskStartScheduler+0x88>)
 800568c:	f04f 32ff 	mov.w	r2, #4294967295
 8005690:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005692:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <vTaskStartScheduler+0x8c>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <vTaskStartScheduler+0x90>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800569e:	f000 fc61 	bl	8005f64 <xPortStartScheduler>
 80056a2:	e00e      	b.n	80056c2 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d10a      	bne.n	80056c2 <vTaskStartScheduler+0x6e>
        __asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	607b      	str	r3, [r7, #4]
    }
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <vTaskStartScheduler+0x94>)
 80056c4:	681b      	ldr	r3, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200003c0 	.word	0x200003c0
 80056d4:	08007c28 	.word	0x08007c28
 80056d8:	08005be5 	.word	0x08005be5
 80056dc:	200003bc 	.word	0x200003bc
 80056e0:	200003a8 	.word	0x200003a8
 80056e4:	200003a0 	.word	0x200003a0
 80056e8:	20000020 	.word	0x20000020

080056ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <vTaskSuspendAll+0x18>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	4a03      	ldr	r2, [pc, #12]	; (8005704 <vTaskSuspendAll+0x18>)
 80056f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80056fa:	bf00      	nop
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	200003c4 	.word	0x200003c4

08005708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005716:	4b71      	ldr	r3, [pc, #452]	; (80058dc <xTaskResumeAll+0x1d4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10a      	bne.n	8005734 <xTaskResumeAll+0x2c>
        __asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
    }
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005734:	f000 fcb8 	bl	80060a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005738:	4b68      	ldr	r3, [pc, #416]	; (80058dc <xTaskResumeAll+0x1d4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3b01      	subs	r3, #1
 800573e:	4a67      	ldr	r2, [pc, #412]	; (80058dc <xTaskResumeAll+0x1d4>)
 8005740:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005742:	4b66      	ldr	r3, [pc, #408]	; (80058dc <xTaskResumeAll+0x1d4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 80c0 	bne.w	80058cc <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800574c:	4b64      	ldr	r3, [pc, #400]	; (80058e0 <xTaskResumeAll+0x1d8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80bb 	beq.w	80058cc <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005756:	e08a      	b.n	800586e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005758:	4b62      	ldr	r3, [pc, #392]	; (80058e4 <xTaskResumeAll+0x1dc>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	6a12      	ldr	r2, [r2, #32]
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	69d2      	ldr	r2, [r2, #28]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3318      	adds	r3, #24
 8005782:	429a      	cmp	r2, r3
 8005784:	d103      	bne.n	800578e <xTaskResumeAll+0x86>
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	6a1a      	ldr	r2, [r3, #32]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2200      	movs	r2, #0
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1e5a      	subs	r2, r3, #1
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	68d2      	ldr	r2, [r2, #12]
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	6892      	ldr	r2, [r2, #8]
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3304      	adds	r3, #4
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d103      	bne.n	80057cc <xTaskResumeAll+0xc4>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2200      	movs	r2, #0
 80057d0:	615a      	str	r2, [r3, #20]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <xTaskResumeAll+0x1e0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	4a3f      	ldr	r2, [pc, #252]	; (80058e8 <xTaskResumeAll+0x1e0>)
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	493e      	ldr	r1, [pc, #248]	; (80058ec <xTaskResumeAll+0x1e4>)
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	3304      	adds	r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	3204      	adds	r2, #4
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <xTaskResumeAll+0x1e4>)
 8005832:	441a      	add	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	615a      	str	r2, [r3, #20]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	492b      	ldr	r1, [pc, #172]	; (80058ec <xTaskResumeAll+0x1e4>)
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	4827      	ldr	r0, [pc, #156]	; (80058ec <xTaskResumeAll+0x1e4>)
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4403      	add	r3, r0
 8005858:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <xTaskResumeAll+0x1e8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005868:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <xTaskResumeAll+0x1ec>)
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <xTaskResumeAll+0x1dc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f af70 	bne.w	8005758 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800587e:	f000 fa47 	bl	8005d10 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <xTaskResumeAll+0x1f0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800588e:	f000 f837 	bl	8005900 <xTaskIncrementTick>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005898:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <xTaskResumeAll+0x1ec>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f1      	bne.n	800588e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <xTaskResumeAll+0x1f0>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <xTaskResumeAll+0x1ec>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <xTaskResumeAll+0x1f4>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80058cc:	f000 fc1c 	bl	8006108 <vPortExitCritical>

    return xAlreadyYielded;
 80058d0:	69bb      	ldr	r3, [r7, #24]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200003c4 	.word	0x200003c4
 80058e0:	2000039c 	.word	0x2000039c
 80058e4:	2000035c 	.word	0x2000035c
 80058e8:	200003a4 	.word	0x200003a4
 80058ec:	200002c8 	.word	0x200002c8
 80058f0:	200002c4 	.word	0x200002c4
 80058f4:	200003b0 	.word	0x200003b0
 80058f8:	200003ac 	.word	0x200003ac
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590a:	4b7d      	ldr	r3, [pc, #500]	; (8005b00 <xTaskIncrementTick+0x200>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 80ec 	bne.w	8005aec <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005914:	4b7b      	ldr	r3, [pc, #492]	; (8005b04 <xTaskIncrementTick+0x204>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800591c:	4a79      	ldr	r2, [pc, #484]	; (8005b04 <xTaskIncrementTick+0x204>)
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d120      	bne.n	800596a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005928:	4b77      	ldr	r3, [pc, #476]	; (8005b08 <xTaskIncrementTick+0x208>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <xTaskIncrementTick+0x48>
        __asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	607b      	str	r3, [r7, #4]
    }
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xTaskIncrementTick+0x46>
 8005948:	4b6f      	ldr	r3, [pc, #444]	; (8005b08 <xTaskIncrementTick+0x208>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	4b6f      	ldr	r3, [pc, #444]	; (8005b0c <xTaskIncrementTick+0x20c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a6d      	ldr	r2, [pc, #436]	; (8005b08 <xTaskIncrementTick+0x208>)
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4a6d      	ldr	r2, [pc, #436]	; (8005b0c <xTaskIncrementTick+0x20c>)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b6c      	ldr	r3, [pc, #432]	; (8005b10 <xTaskIncrementTick+0x210>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	4a6b      	ldr	r2, [pc, #428]	; (8005b10 <xTaskIncrementTick+0x210>)
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	f000 f9d3 	bl	8005d10 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <xTaskIncrementTick+0x214>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	429a      	cmp	r2, r3
 8005972:	f0c0 80a6 	bcc.w	8005ac2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005976:	4b64      	ldr	r3, [pc, #400]	; (8005b08 <xTaskIncrementTick+0x208>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005980:	4b64      	ldr	r3, [pc, #400]	; (8005b14 <xTaskIncrementTick+0x214>)
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	601a      	str	r2, [r3, #0]
                    break;
 8005988:	e09b      	b.n	8005ac2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598a:	4b5f      	ldr	r3, [pc, #380]	; (8005b08 <xTaskIncrementTick+0x208>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d203      	bcs.n	80059aa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80059a2:	4a5c      	ldr	r2, [pc, #368]	; (8005b14 <xTaskIncrementTick+0x214>)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80059a8:	e08b      	b.n	8005ac2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	68d2      	ldr	r2, [r2, #12]
 80059b8:	609a      	str	r2, [r3, #8]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3304      	adds	r3, #4
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d103      	bne.n	80059d8 <xTaskIncrementTick+0xd8>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2200      	movs	r2, #0
 80059dc:	615a      	str	r2, [r3, #20]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01e      	beq.n	8005a2e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	6a12      	ldr	r2, [r2, #32]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	69d2      	ldr	r2, [r2, #28]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	3318      	adds	r3, #24
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d103      	bne.n	8005a1e <xTaskIncrementTick+0x11e>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	6a1a      	ldr	r2, [r3, #32]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2200      	movs	r2, #0
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	2201      	movs	r2, #1
 8005a34:	409a      	lsls	r2, r3
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <xTaskIncrementTick+0x218>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	4a36      	ldr	r2, [pc, #216]	; (8005b18 <xTaskIncrementTick+0x218>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	4935      	ldr	r1, [pc, #212]	; (8005b1c <xTaskIncrementTick+0x21c>)
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	3304      	adds	r3, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	3204      	adds	r2, #4
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	1d1a      	adds	r2, r3, #4
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	609a      	str	r2, [r3, #8]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <xTaskIncrementTick+0x21c>)
 8005a84:	441a      	add	r2, r3
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	615a      	str	r2, [r3, #20]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4923      	ldr	r1, [pc, #140]	; (8005b1c <xTaskIncrementTick+0x21c>)
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	1c59      	adds	r1, r3, #1
 8005a9e:	481f      	ldr	r0, [pc, #124]	; (8005b1c <xTaskIncrementTick+0x21c>)
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4403      	add	r3, r0
 8005aaa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <xTaskIncrementTick+0x220>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	f67f af5d 	bls.w	8005976 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac0:	e759      	b.n	8005976 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ac2:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <xTaskIncrementTick+0x220>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4914      	ldr	r1, [pc, #80]	; (8005b1c <xTaskIncrementTick+0x21c>)
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d901      	bls.n	8005ade <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <xTaskIncrementTick+0x224>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	e004      	b.n	8005af6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005aec:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <xTaskIncrementTick+0x228>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <xTaskIncrementTick+0x228>)
 8005af4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3728      	adds	r7, #40	; 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	200003c4 	.word	0x200003c4
 8005b04:	200003a0 	.word	0x200003a0
 8005b08:	20000354 	.word	0x20000354
 8005b0c:	20000358 	.word	0x20000358
 8005b10:	200003b4 	.word	0x200003b4
 8005b14:	200003bc 	.word	0x200003bc
 8005b18:	200003a4 	.word	0x200003a4
 8005b1c:	200002c8 	.word	0x200002c8
 8005b20:	200002c4 	.word	0x200002c4
 8005b24:	200003b0 	.word	0x200003b0
 8005b28:	200003ac 	.word	0x200003ac

08005b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b32:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <vTaskSwitchContext+0xa4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <vTaskSwitchContext+0xa8>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005b40:	e03f      	b.n	8005bc2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <vTaskSwitchContext+0xa8>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b48:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <vTaskSwitchContext+0xac>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	f1c3 031f 	rsb	r3, r3, #31
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	491f      	ldr	r1, [pc, #124]	; (8005bdc <vTaskSwitchContext+0xb0>)
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	607b      	str	r3, [r7, #4]
    }
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <vTaskSwitchContext+0x5a>
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <vTaskSwitchContext+0xb0>)
 8005b94:	4413      	add	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	605a      	str	r2, [r3, #4]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d104      	bne.n	8005bb8 <vTaskSwitchContext+0x8c>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <vTaskSwitchContext+0xb4>)
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	200003c4 	.word	0x200003c4
 8005bd4:	200003b0 	.word	0x200003b0
 8005bd8:	200003a4 	.word	0x200003a4
 8005bdc:	200002c8 	.word	0x200002c8
 8005be0:	200002c4 	.word	0x200002c4

08005be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005bec:	f000 f852 	bl	8005c94 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <prvIdleTask+0x28>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d9f9      	bls.n	8005bec <prvIdleTask+0x8>
            {
                taskYIELD();
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <prvIdleTask+0x2c>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005c08:	e7f0      	b.n	8005bec <prvIdleTask+0x8>
 8005c0a:	bf00      	nop
 8005c0c:	200002c8 	.word	0x200002c8
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	e00c      	b.n	8005c3a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <prvInitialiseTaskLists+0x60>)
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fae2 	bl	80051f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3301      	adds	r3, #1
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d9ef      	bls.n	8005c20 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005c40:	480d      	ldr	r0, [pc, #52]	; (8005c78 <prvInitialiseTaskLists+0x64>)
 8005c42:	f7ff fad9 	bl	80051f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005c46:	480d      	ldr	r0, [pc, #52]	; (8005c7c <prvInitialiseTaskLists+0x68>)
 8005c48:	f7ff fad6 	bl	80051f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005c4c:	480c      	ldr	r0, [pc, #48]	; (8005c80 <prvInitialiseTaskLists+0x6c>)
 8005c4e:	f7ff fad3 	bl	80051f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005c52:	480c      	ldr	r0, [pc, #48]	; (8005c84 <prvInitialiseTaskLists+0x70>)
 8005c54:	f7ff fad0 	bl	80051f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005c58:	480b      	ldr	r0, [pc, #44]	; (8005c88 <prvInitialiseTaskLists+0x74>)
 8005c5a:	f7ff facd 	bl	80051f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <prvInitialiseTaskLists+0x78>)
 8005c60:	4a05      	ldr	r2, [pc, #20]	; (8005c78 <prvInitialiseTaskLists+0x64>)
 8005c62:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <prvInitialiseTaskLists+0x7c>)
 8005c66:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <prvInitialiseTaskLists+0x68>)
 8005c68:	601a      	str	r2, [r3, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200002c8 	.word	0x200002c8
 8005c78:	2000032c 	.word	0x2000032c
 8005c7c:	20000340 	.word	0x20000340
 8005c80:	2000035c 	.word	0x2000035c
 8005c84:	20000370 	.word	0x20000370
 8005c88:	20000388 	.word	0x20000388
 8005c8c:	20000354 	.word	0x20000354
 8005c90:	20000358 	.word	0x20000358

08005c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c9a:	e019      	b.n	8005cd0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005c9c:	f000 fa04 	bl	80060a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <prvCheckTasksWaitingTermination+0x50>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fb09 	bl	80052c4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <prvCheckTasksWaitingTermination+0x54>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	4a0b      	ldr	r2, [pc, #44]	; (8005ce8 <prvCheckTasksWaitingTermination+0x54>)
 8005cba:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <prvCheckTasksWaitingTermination+0x58>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <prvCheckTasksWaitingTermination+0x58>)
 8005cc4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005cc6:	f000 fa1f 	bl	8006108 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f810 	bl	8005cf0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <prvCheckTasksWaitingTermination+0x58>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e1      	bne.n	8005c9c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000370 	.word	0x20000370
 8005ce8:	2000039c 	.word	0x2000039c
 8005cec:	20000384 	.word	0x20000384

08005cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fb6f 	bl	80063e0 <vPortFree>
            vPortFree( pxTCB );
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb6c 	bl	80063e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <prvResetNextTaskUnblockTime+0x30>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <prvResetNextTaskUnblockTime+0x34>)
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005d26:	e005      	b.n	8005d34 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <prvResetNextTaskUnblockTime+0x30>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a04      	ldr	r2, [pc, #16]	; (8005d44 <prvResetNextTaskUnblockTime+0x34>)
 8005d32:	6013      	str	r3, [r2, #0]
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000354 	.word	0x20000354
 8005d44:	200003bc 	.word	0x200003bc

08005d48 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005d52:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <prvAddCurrentTaskToDelayedList+0xe4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d58:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fab0 	bl	80052c4 <uxListRemove>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d6a:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	2201      	movs	r2, #1
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43da      	mvns	r2, r3
 8005d78:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <prvAddCurrentTaskToDelayedList+0xec>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	4a2d      	ldr	r2, [pc, #180]	; (8005e34 <prvAddCurrentTaskToDelayedList+0xec>)
 8005d80:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d124      	bne.n	8005dd4 <prvAddCurrentTaskToDelayedList+0x8c>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d021      	beq.n	8005dd4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d90:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	609a      	str	r2, [r3, #8]
 8005d9e:	4b24      	ldr	r3, [pc, #144]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	6892      	ldr	r2, [r2, #8]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	3204      	adds	r2, #4
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	1d1a      	adds	r2, r3, #4
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	609a      	str	r2, [r3, #8]
 8005dbe:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005dc4:	615a      	str	r2, [r3, #20]
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005dd2:	e026      	b.n	8005e22 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4413      	add	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ddc:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d209      	bcs.n	8005e00 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dec:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7ff fa2a 	bl	8005252 <vListInsert>
}
 8005dfe:	e010      	b.n	8005e22 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f7ff fa20 	bl	8005252 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005e12:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d202      	bcs.n	8005e22 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005e1c:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6013      	str	r3, [r2, #0]
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200003a0 	.word	0x200003a0
 8005e30:	200002c4 	.word	0x200002c4
 8005e34:	200003a4 	.word	0x200003a4
 8005e38:	20000388 	.word	0x20000388
 8005e3c:	20000358 	.word	0x20000358
 8005e40:	20000354 	.word	0x20000354
 8005e44:	200003bc 	.word	0x200003bc

08005e48 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3b04      	subs	r3, #4
 8005e58:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b04      	subs	r3, #4
 8005e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0201 	bic.w	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005e78:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <pxPortInitialiseStack+0x64>)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b14      	subs	r3, #20
 8005e82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f06f 0202 	mvn.w	r2, #2
 8005e96:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3b20      	subs	r3, #32
 8005e9c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	08005eb1 	.word	0x08005eb1

08005eb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <prvTaskExitError+0x54>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d00a      	beq.n	8005eda <prvTaskExitError+0x2a>
        __asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60fb      	str	r3, [r7, #12]
    }
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <prvTaskExitError+0x28>
        __asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60bb      	str	r3, [r7, #8]
    }
 8005eec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005eee:	bf00      	nop
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0fc      	beq.n	8005ef0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	20000024 	.word	0x20000024
	...

08005f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <pxCurrentTCBConst2>)
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	6808      	ldr	r0, [r1, #0]
 8005f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	f380 8809 	msr	PSP, r0
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8811 	msr	BASEPRI, r0
 8005f2a:	4770      	bx	lr
 8005f2c:	f3af 8000 	nop.w

08005f30 <pxCurrentTCBConst2>:
 8005f30:	200002c4 	.word	0x200002c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop

08005f38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005f38:	4808      	ldr	r0, [pc, #32]	; (8005f5c <prvPortStartFirstTask+0x24>)
 8005f3a:	6800      	ldr	r0, [r0, #0]
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f380 8808 	msr	MSP, r0
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8814 	msr	CONTROL, r0
 8005f4a:	b662      	cpsie	i
 8005f4c:	b661      	cpsie	f
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	df00      	svc	0
 8005f58:	bf00      	nop
 8005f5a:	0000      	.short	0x0000
 8005f5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop

08005f64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f6a:	4b46      	ldr	r3, [pc, #280]	; (8006084 <xPortStartScheduler+0x120>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a46      	ldr	r2, [pc, #280]	; (8006088 <xPortStartScheduler+0x124>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d10a      	bne.n	8005f8a <xPortStartScheduler+0x26>
        __asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	613b      	str	r3, [r7, #16]
    }
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f8a:	4b3e      	ldr	r3, [pc, #248]	; (8006084 <xPortStartScheduler+0x120>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a3f      	ldr	r2, [pc, #252]	; (800608c <xPortStartScheduler+0x128>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d10a      	bne.n	8005faa <xPortStartScheduler+0x46>
        __asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	60fb      	str	r3, [r7, #12]
    }
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005faa:	4b39      	ldr	r3, [pc, #228]	; (8006090 <xPortStartScheduler+0x12c>)
 8005fac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	22ff      	movs	r2, #255	; 0xff
 8005fba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4b31      	ldr	r3, [pc, #196]	; (8006094 <xPortStartScheduler+0x130>)
 8005fd0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <xPortStartScheduler+0x134>)
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fd8:	e009      	b.n	8005fee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8005fda:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <xPortStartScheduler+0x134>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <xPortStartScheduler+0x134>)
 8005fe2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff6:	2b80      	cmp	r3, #128	; 0x80
 8005ff8:	d0ef      	beq.n	8005fda <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ffa:	4b27      	ldr	r3, [pc, #156]	; (8006098 <xPortStartScheduler+0x134>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f1c3 0307 	rsb	r3, r3, #7
 8006002:	2b04      	cmp	r3, #4
 8006004:	d00a      	beq.n	800601c <xPortStartScheduler+0xb8>
        __asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60bb      	str	r3, [r7, #8]
    }
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800601c:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <xPortStartScheduler+0x134>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <xPortStartScheduler+0x134>)
 8006024:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800602e:	4a1a      	ldr	r2, [pc, #104]	; (8006098 <xPortStartScheduler+0x134>)
 8006030:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800603a:	4b18      	ldr	r3, [pc, #96]	; (800609c <xPortStartScheduler+0x138>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a17      	ldr	r2, [pc, #92]	; (800609c <xPortStartScheduler+0x138>)
 8006040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006044:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <xPortStartScheduler+0x138>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a14      	ldr	r2, [pc, #80]	; (800609c <xPortStartScheduler+0x138>)
 800604c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006050:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006052:	f000 f8db 	bl	800620c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <xPortStartScheduler+0x13c>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800605c:	f000 f8fa 	bl	8006254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006060:	4b10      	ldr	r3, [pc, #64]	; (80060a4 <xPortStartScheduler+0x140>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0f      	ldr	r2, [pc, #60]	; (80060a4 <xPortStartScheduler+0x140>)
 8006066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800606a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800606c:	f7ff ff64 	bl	8005f38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006070:	f7ff fd5c 	bl	8005b2c <vTaskSwitchContext>
    prvTaskExitError();
 8006074:	f7ff ff1c 	bl	8005eb0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	e000ed00 	.word	0xe000ed00
 8006088:	410fc271 	.word	0x410fc271
 800608c:	410fc270 	.word	0x410fc270
 8006090:	e000e400 	.word	0xe000e400
 8006094:	200003c8 	.word	0x200003c8
 8006098:	200003cc 	.word	0x200003cc
 800609c:	e000ed20 	.word	0xe000ed20
 80060a0:	20000024 	.word	0x20000024
 80060a4:	e000ef34 	.word	0xe000ef34

080060a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
        __asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	607b      	str	r3, [r7, #4]
    }
 80060c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <vPortEnterCritical+0x58>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3301      	adds	r3, #1
 80060c8:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <vPortEnterCritical+0x58>)
 80060ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80060cc:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <vPortEnterCritical+0x58>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d10f      	bne.n	80060f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <vPortEnterCritical+0x5c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	603b      	str	r3, [r7, #0]
    }
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vPortEnterCritical+0x4a>
    }
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000024 	.word	0x20000024
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <vPortExitCritical+0x50>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <vPortExitCritical+0x24>
        __asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	607b      	str	r3, [r7, #4]
    }
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <vPortExitCritical+0x50>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	4a09      	ldr	r2, [pc, #36]	; (8006158 <vPortExitCritical+0x50>)
 8006134:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <vPortExitCritical+0x50>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <vPortExitCritical+0x42>
 800613e:	2300      	movs	r3, #0
 8006140:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006148:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000024 	.word	0x20000024
 800615c:	00000000 	.word	0x00000000

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <pxCurrentTCBConst>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f01e 0f10 	tst.w	lr, #16
 8006170:	bf08      	it	eq
 8006172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006184:	f380 8811 	msr	BASEPRI, r0
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f7ff fccc 	bl	8005b2c <vTaskSwitchContext>
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f380 8811 	msr	BASEPRI, r0
 800619c:	bc09      	pop	{r0, r3}
 800619e:	6819      	ldr	r1, [r3, #0]
 80061a0:	6808      	ldr	r0, [r1, #0]
 80061a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	f01e 0f10 	tst.w	lr, #16
 80061aa:	bf08      	it	eq
 80061ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061b0:	f380 8809 	msr	PSP, r0
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst>:
 80061c0:	200002c4 	.word	0x200002c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
        __asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
    }
 80061e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80061e2:	f7ff fb8d 	bl	8005900 <xTaskIncrementTick>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <SysTick_Handler+0x40>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
    }
 80061fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <vPortSetupTimerInterrupt+0x38>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <vPortSetupTimerInterrupt+0x3c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <vPortSetupTimerInterrupt+0x40>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <vPortSetupTimerInterrupt+0x44>)
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800622e:	4b04      	ldr	r3, [pc, #16]	; (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010
 8006244:	e000e018 	.word	0xe000e018
 8006248:	20000000 	.word	0x20000000
 800624c:	10624dd3 	.word	0x10624dd3
 8006250:	e000e014 	.word	0xe000e014

08006254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006264 <vPortEnableVFP+0x10>
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800625e:	6001      	str	r1, [r0, #0]
 8006260:	4770      	bx	lr
 8006262:	0000      	.short	0x0000
 8006264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop

0800626c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006278:	f7ff fa38 	bl	80056ec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800627c:	4b53      	ldr	r3, [pc, #332]	; (80063cc <pvPortMalloc+0x160>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006284:	f000 f908 	bl	8006498 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800628e:	2208      	movs	r2, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	3308      	adds	r3, #8
 800629a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	43db      	mvns	r3, r3
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d804      	bhi.n	80062b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	4413      	add	r3, r2
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	e001      	b.n	80062b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	db70      	blt.n	800639c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d06d      	beq.n	800639c <pvPortMalloc+0x130>
 80062c0:	4b43      	ldr	r3, [pc, #268]	; (80063d0 <pvPortMalloc+0x164>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d868      	bhi.n	800639c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80062ca:	4b42      	ldr	r3, [pc, #264]	; (80063d4 <pvPortMalloc+0x168>)
 80062cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80062ce:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <pvPortMalloc+0x168>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062d4:	e004      	b.n	80062e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <pvPortMalloc+0x86>
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f1      	bne.n	80062d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80062f2:	4b36      	ldr	r3, [pc, #216]	; (80063cc <pvPortMalloc+0x160>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d04f      	beq.n	800639c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	4413      	add	r3, r2
 8006304:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	2308      	movs	r3, #8
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	429a      	cmp	r2, r3
 800631c:	d91f      	bls.n	800635e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800631e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <pvPortMalloc+0xda>
        __asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
    }
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006358:	6978      	ldr	r0, [r7, #20]
 800635a:	f000 f8f9 	bl	8006550 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800635e:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <pvPortMalloc+0x164>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <pvPortMalloc+0x164>)
 800636a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <pvPortMalloc+0x164>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <pvPortMalloc+0x16c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d203      	bcs.n	8006380 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <pvPortMalloc+0x164>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <pvPortMalloc+0x16c>)
 800637e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <pvPortMalloc+0x170>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	4a10      	ldr	r2, [pc, #64]	; (80063dc <pvPortMalloc+0x170>)
 800639a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800639c:	f7ff f9b4 	bl	8005708 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <pvPortMalloc+0x154>
        __asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60fb      	str	r3, [r7, #12]
    }
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <pvPortMalloc+0x152>
    return pvReturn;
 80063c0:	69fb      	ldr	r3, [r7, #28]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20012fd8 	.word	0x20012fd8
 80063d0:	20012fdc 	.word	0x20012fdc
 80063d4:	20012fd0 	.word	0x20012fd0
 80063d8:	20012fe0 	.word	0x20012fe0
 80063dc:	20012fe4 	.word	0x20012fe4

080063e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d049      	beq.n	8006486 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80063f2:	2308      	movs	r3, #8
 80063f4:	425b      	negs	r3, r3
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	db0a      	blt.n	800641e <vPortFree+0x3e>
        __asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60fb      	str	r3, [r7, #12]
    }
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <vPortFree+0x5c>
        __asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
    }
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	0fdb      	lsrs	r3, r3, #31
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01c      	beq.n	8006486 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d118      	bne.n	8006486 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006460:	f7ff f944 	bl	80056ec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4b09      	ldr	r3, [pc, #36]	; (8006490 <vPortFree+0xb0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4413      	add	r3, r2
 800646e:	4a08      	ldr	r2, [pc, #32]	; (8006490 <vPortFree+0xb0>)
 8006470:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006472:	6938      	ldr	r0, [r7, #16]
 8006474:	f000 f86c 	bl	8006550 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <vPortFree+0xb4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	4a05      	ldr	r2, [pc, #20]	; (8006494 <vPortFree+0xb4>)
 8006480:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006482:	f7ff f941 	bl	8005708 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006486:	bf00      	nop
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20012fdc 	.word	0x20012fdc
 8006494:	20012fe8 	.word	0x20012fe8

08006498 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800649e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80064a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <prvHeapInit+0xa4>)
 80064a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00c      	beq.n	80064cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3307      	adds	r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0307 	bic.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	4a1d      	ldr	r2, [pc, #116]	; (800653c <prvHeapInit+0xa4>)
 80064c8:	4413      	add	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064d0:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <prvHeapInit+0xa8>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <prvHeapInit+0xa8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4413      	add	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80064e4:	2208      	movs	r2, #8
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0307 	bic.w	r3, r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <prvHeapInit+0xac>)
 80064f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <prvHeapInit+0xac>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <prvHeapInit+0xac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	1ad2      	subs	r2, r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <prvHeapInit+0xac>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4a08      	ldr	r2, [pc, #32]	; (8006548 <prvHeapInit+0xb0>)
 8006526:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a07      	ldr	r2, [pc, #28]	; (800654c <prvHeapInit+0xb4>)
 800652e:	6013      	str	r3, [r2, #0]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	200003d0 	.word	0x200003d0
 8006540:	20012fd0 	.word	0x20012fd0
 8006544:	20012fd8 	.word	0x20012fd8
 8006548:	20012fe0 	.word	0x20012fe0
 800654c:	20012fdc 	.word	0x20012fdc

08006550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006558:	4b28      	ldr	r3, [pc, #160]	; (80065fc <prvInsertBlockIntoFreeList+0xac>)
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e002      	b.n	8006564 <prvInsertBlockIntoFreeList+0x14>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d8f7      	bhi.n	800655e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4413      	add	r3, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d108      	bne.n	8006592 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	441a      	add	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d118      	bne.n	80065d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b15      	ldr	r3, [pc, #84]	; (8006600 <prvInsertBlockIntoFreeList+0xb0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d00d      	beq.n	80065ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e008      	b.n	80065e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <prvInsertBlockIntoFreeList+0xb0>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e003      	b.n	80065e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d002      	beq.n	80065ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20012fd0 	.word	0x20012fd0
 8006600:	20012fd8 	.word	0x20012fd8

08006604 <atoi>:
 8006604:	220a      	movs	r2, #10
 8006606:	2100      	movs	r1, #0
 8006608:	f000 b882 	b.w	8006710 <strtol>

0800660c <_strtol_l.constprop.0>:
 800660c:	2b01      	cmp	r3, #1
 800660e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006612:	d001      	beq.n	8006618 <_strtol_l.constprop.0+0xc>
 8006614:	2b24      	cmp	r3, #36	; 0x24
 8006616:	d906      	bls.n	8006626 <_strtol_l.constprop.0+0x1a>
 8006618:	f000 fae8 	bl	8006bec <__errno>
 800661c:	2316      	movs	r3, #22
 800661e:	6003      	str	r3, [r0, #0]
 8006620:	2000      	movs	r0, #0
 8006622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006626:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800670c <_strtol_l.constprop.0+0x100>
 800662a:	460d      	mov	r5, r1
 800662c:	462e      	mov	r6, r5
 800662e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006632:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006636:	f017 0708 	ands.w	r7, r7, #8
 800663a:	d1f7      	bne.n	800662c <_strtol_l.constprop.0+0x20>
 800663c:	2c2d      	cmp	r4, #45	; 0x2d
 800663e:	d132      	bne.n	80066a6 <_strtol_l.constprop.0+0x9a>
 8006640:	782c      	ldrb	r4, [r5, #0]
 8006642:	2701      	movs	r7, #1
 8006644:	1cb5      	adds	r5, r6, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d05b      	beq.n	8006702 <_strtol_l.constprop.0+0xf6>
 800664a:	2b10      	cmp	r3, #16
 800664c:	d109      	bne.n	8006662 <_strtol_l.constprop.0+0x56>
 800664e:	2c30      	cmp	r4, #48	; 0x30
 8006650:	d107      	bne.n	8006662 <_strtol_l.constprop.0+0x56>
 8006652:	782c      	ldrb	r4, [r5, #0]
 8006654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006658:	2c58      	cmp	r4, #88	; 0x58
 800665a:	d14d      	bne.n	80066f8 <_strtol_l.constprop.0+0xec>
 800665c:	786c      	ldrb	r4, [r5, #1]
 800665e:	2310      	movs	r3, #16
 8006660:	3502      	adds	r5, #2
 8006662:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006666:	f108 38ff 	add.w	r8, r8, #4294967295
 800666a:	f04f 0e00 	mov.w	lr, #0
 800666e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006672:	4676      	mov	r6, lr
 8006674:	fb03 8a19 	mls	sl, r3, r9, r8
 8006678:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800667c:	f1bc 0f09 	cmp.w	ip, #9
 8006680:	d816      	bhi.n	80066b0 <_strtol_l.constprop.0+0xa4>
 8006682:	4664      	mov	r4, ip
 8006684:	42a3      	cmp	r3, r4
 8006686:	dd24      	ble.n	80066d2 <_strtol_l.constprop.0+0xc6>
 8006688:	f1be 3fff 	cmp.w	lr, #4294967295
 800668c:	d008      	beq.n	80066a0 <_strtol_l.constprop.0+0x94>
 800668e:	45b1      	cmp	r9, r6
 8006690:	d31c      	bcc.n	80066cc <_strtol_l.constprop.0+0xc0>
 8006692:	d101      	bne.n	8006698 <_strtol_l.constprop.0+0x8c>
 8006694:	45a2      	cmp	sl, r4
 8006696:	db19      	blt.n	80066cc <_strtol_l.constprop.0+0xc0>
 8006698:	fb06 4603 	mla	r6, r6, r3, r4
 800669c:	f04f 0e01 	mov.w	lr, #1
 80066a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066a4:	e7e8      	b.n	8006678 <_strtol_l.constprop.0+0x6c>
 80066a6:	2c2b      	cmp	r4, #43	; 0x2b
 80066a8:	bf04      	itt	eq
 80066aa:	782c      	ldrbeq	r4, [r5, #0]
 80066ac:	1cb5      	addeq	r5, r6, #2
 80066ae:	e7ca      	b.n	8006646 <_strtol_l.constprop.0+0x3a>
 80066b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80066b4:	f1bc 0f19 	cmp.w	ip, #25
 80066b8:	d801      	bhi.n	80066be <_strtol_l.constprop.0+0xb2>
 80066ba:	3c37      	subs	r4, #55	; 0x37
 80066bc:	e7e2      	b.n	8006684 <_strtol_l.constprop.0+0x78>
 80066be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80066c2:	f1bc 0f19 	cmp.w	ip, #25
 80066c6:	d804      	bhi.n	80066d2 <_strtol_l.constprop.0+0xc6>
 80066c8:	3c57      	subs	r4, #87	; 0x57
 80066ca:	e7db      	b.n	8006684 <_strtol_l.constprop.0+0x78>
 80066cc:	f04f 3eff 	mov.w	lr, #4294967295
 80066d0:	e7e6      	b.n	80066a0 <_strtol_l.constprop.0+0x94>
 80066d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80066d6:	d105      	bne.n	80066e4 <_strtol_l.constprop.0+0xd8>
 80066d8:	2322      	movs	r3, #34	; 0x22
 80066da:	6003      	str	r3, [r0, #0]
 80066dc:	4646      	mov	r6, r8
 80066de:	b942      	cbnz	r2, 80066f2 <_strtol_l.constprop.0+0xe6>
 80066e0:	4630      	mov	r0, r6
 80066e2:	e79e      	b.n	8006622 <_strtol_l.constprop.0+0x16>
 80066e4:	b107      	cbz	r7, 80066e8 <_strtol_l.constprop.0+0xdc>
 80066e6:	4276      	negs	r6, r6
 80066e8:	2a00      	cmp	r2, #0
 80066ea:	d0f9      	beq.n	80066e0 <_strtol_l.constprop.0+0xd4>
 80066ec:	f1be 0f00 	cmp.w	lr, #0
 80066f0:	d000      	beq.n	80066f4 <_strtol_l.constprop.0+0xe8>
 80066f2:	1e69      	subs	r1, r5, #1
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	e7f3      	b.n	80066e0 <_strtol_l.constprop.0+0xd4>
 80066f8:	2430      	movs	r4, #48	; 0x30
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1b1      	bne.n	8006662 <_strtol_l.constprop.0+0x56>
 80066fe:	2308      	movs	r3, #8
 8006700:	e7af      	b.n	8006662 <_strtol_l.constprop.0+0x56>
 8006702:	2c30      	cmp	r4, #48	; 0x30
 8006704:	d0a5      	beq.n	8006652 <_strtol_l.constprop.0+0x46>
 8006706:	230a      	movs	r3, #10
 8006708:	e7ab      	b.n	8006662 <_strtol_l.constprop.0+0x56>
 800670a:	bf00      	nop
 800670c:	08007c51 	.word	0x08007c51

08006710 <strtol>:
 8006710:	4613      	mov	r3, r2
 8006712:	460a      	mov	r2, r1
 8006714:	4601      	mov	r1, r0
 8006716:	4802      	ldr	r0, [pc, #8]	; (8006720 <strtol+0x10>)
 8006718:	6800      	ldr	r0, [r0, #0]
 800671a:	f7ff bf77 	b.w	800660c <_strtol_l.constprop.0>
 800671e:	bf00      	nop
 8006720:	20000080 	.word	0x20000080

08006724 <std>:
 8006724:	2300      	movs	r3, #0
 8006726:	b510      	push	{r4, lr}
 8006728:	4604      	mov	r4, r0
 800672a:	e9c0 3300 	strd	r3, r3, [r0]
 800672e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006732:	6083      	str	r3, [r0, #8]
 8006734:	8181      	strh	r1, [r0, #12]
 8006736:	6643      	str	r3, [r0, #100]	; 0x64
 8006738:	81c2      	strh	r2, [r0, #14]
 800673a:	6183      	str	r3, [r0, #24]
 800673c:	4619      	mov	r1, r3
 800673e:	2208      	movs	r2, #8
 8006740:	305c      	adds	r0, #92	; 0x5c
 8006742:	f000 fa05 	bl	8006b50 <memset>
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <std+0x58>)
 8006748:	6263      	str	r3, [r4, #36]	; 0x24
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <std+0x5c>)
 800674c:	62a3      	str	r3, [r4, #40]	; 0x28
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <std+0x60>)
 8006750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006752:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <std+0x64>)
 8006754:	6323      	str	r3, [r4, #48]	; 0x30
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <std+0x68>)
 8006758:	6224      	str	r4, [r4, #32]
 800675a:	429c      	cmp	r4, r3
 800675c:	d006      	beq.n	800676c <std+0x48>
 800675e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006762:	4294      	cmp	r4, r2
 8006764:	d002      	beq.n	800676c <std+0x48>
 8006766:	33d0      	adds	r3, #208	; 0xd0
 8006768:	429c      	cmp	r4, r3
 800676a:	d105      	bne.n	8006778 <std+0x54>
 800676c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006774:	f000 ba64 	b.w	8006c40 <__retarget_lock_init_recursive>
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	080069a1 	.word	0x080069a1
 8006780:	080069c3 	.word	0x080069c3
 8006784:	080069fb 	.word	0x080069fb
 8006788:	08006a1f 	.word	0x08006a1f
 800678c:	20012fec 	.word	0x20012fec

08006790 <stdio_exit_handler>:
 8006790:	4a02      	ldr	r2, [pc, #8]	; (800679c <stdio_exit_handler+0xc>)
 8006792:	4903      	ldr	r1, [pc, #12]	; (80067a0 <stdio_exit_handler+0x10>)
 8006794:	4803      	ldr	r0, [pc, #12]	; (80067a4 <stdio_exit_handler+0x14>)
 8006796:	f000 b869 	b.w	800686c <_fwalk_sglue>
 800679a:	bf00      	nop
 800679c:	20000028 	.word	0x20000028
 80067a0:	08007531 	.word	0x08007531
 80067a4:	20000034 	.word	0x20000034

080067a8 <cleanup_stdio>:
 80067a8:	6841      	ldr	r1, [r0, #4]
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <cleanup_stdio+0x34>)
 80067ac:	4299      	cmp	r1, r3
 80067ae:	b510      	push	{r4, lr}
 80067b0:	4604      	mov	r4, r0
 80067b2:	d001      	beq.n	80067b8 <cleanup_stdio+0x10>
 80067b4:	f000 febc 	bl	8007530 <_fflush_r>
 80067b8:	68a1      	ldr	r1, [r4, #8]
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <cleanup_stdio+0x38>)
 80067bc:	4299      	cmp	r1, r3
 80067be:	d002      	beq.n	80067c6 <cleanup_stdio+0x1e>
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 feb5 	bl	8007530 <_fflush_r>
 80067c6:	68e1      	ldr	r1, [r4, #12]
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <cleanup_stdio+0x3c>)
 80067ca:	4299      	cmp	r1, r3
 80067cc:	d004      	beq.n	80067d8 <cleanup_stdio+0x30>
 80067ce:	4620      	mov	r0, r4
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	f000 beac 	b.w	8007530 <_fflush_r>
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	20012fec 	.word	0x20012fec
 80067e0:	20013054 	.word	0x20013054
 80067e4:	200130bc 	.word	0x200130bc

080067e8 <global_stdio_init.part.0>:
 80067e8:	b510      	push	{r4, lr}
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <global_stdio_init.part.0+0x30>)
 80067ec:	4c0b      	ldr	r4, [pc, #44]	; (800681c <global_stdio_init.part.0+0x34>)
 80067ee:	4a0c      	ldr	r2, [pc, #48]	; (8006820 <global_stdio_init.part.0+0x38>)
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	4620      	mov	r0, r4
 80067f4:	2200      	movs	r2, #0
 80067f6:	2104      	movs	r1, #4
 80067f8:	f7ff ff94 	bl	8006724 <std>
 80067fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006800:	2201      	movs	r2, #1
 8006802:	2109      	movs	r1, #9
 8006804:	f7ff ff8e 	bl	8006724 <std>
 8006808:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800680c:	2202      	movs	r2, #2
 800680e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006812:	2112      	movs	r1, #18
 8006814:	f7ff bf86 	b.w	8006724 <std>
 8006818:	20013124 	.word	0x20013124
 800681c:	20012fec 	.word	0x20012fec
 8006820:	08006791 	.word	0x08006791

08006824 <__sfp_lock_acquire>:
 8006824:	4801      	ldr	r0, [pc, #4]	; (800682c <__sfp_lock_acquire+0x8>)
 8006826:	f000 ba0c 	b.w	8006c42 <__retarget_lock_acquire_recursive>
 800682a:	bf00      	nop
 800682c:	2001312d 	.word	0x2001312d

08006830 <__sfp_lock_release>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__sfp_lock_release+0x8>)
 8006832:	f000 ba07 	b.w	8006c44 <__retarget_lock_release_recursive>
 8006836:	bf00      	nop
 8006838:	2001312d 	.word	0x2001312d

0800683c <__sinit>:
 800683c:	b510      	push	{r4, lr}
 800683e:	4604      	mov	r4, r0
 8006840:	f7ff fff0 	bl	8006824 <__sfp_lock_acquire>
 8006844:	6a23      	ldr	r3, [r4, #32]
 8006846:	b11b      	cbz	r3, 8006850 <__sinit+0x14>
 8006848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800684c:	f7ff bff0 	b.w	8006830 <__sfp_lock_release>
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <__sinit+0x28>)
 8006852:	6223      	str	r3, [r4, #32]
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <__sinit+0x2c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f5      	bne.n	8006848 <__sinit+0xc>
 800685c:	f7ff ffc4 	bl	80067e8 <global_stdio_init.part.0>
 8006860:	e7f2      	b.n	8006848 <__sinit+0xc>
 8006862:	bf00      	nop
 8006864:	080067a9 	.word	0x080067a9
 8006868:	20013124 	.word	0x20013124

0800686c <_fwalk_sglue>:
 800686c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006870:	4607      	mov	r7, r0
 8006872:	4688      	mov	r8, r1
 8006874:	4614      	mov	r4, r2
 8006876:	2600      	movs	r6, #0
 8006878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800687c:	f1b9 0901 	subs.w	r9, r9, #1
 8006880:	d505      	bpl.n	800688e <_fwalk_sglue+0x22>
 8006882:	6824      	ldr	r4, [r4, #0]
 8006884:	2c00      	cmp	r4, #0
 8006886:	d1f7      	bne.n	8006878 <_fwalk_sglue+0xc>
 8006888:	4630      	mov	r0, r6
 800688a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688e:	89ab      	ldrh	r3, [r5, #12]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d907      	bls.n	80068a4 <_fwalk_sglue+0x38>
 8006894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006898:	3301      	adds	r3, #1
 800689a:	d003      	beq.n	80068a4 <_fwalk_sglue+0x38>
 800689c:	4629      	mov	r1, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	47c0      	blx	r8
 80068a2:	4306      	orrs	r6, r0
 80068a4:	3568      	adds	r5, #104	; 0x68
 80068a6:	e7e9      	b.n	800687c <_fwalk_sglue+0x10>

080068a8 <_puts_r>:
 80068a8:	6a03      	ldr	r3, [r0, #32]
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	6884      	ldr	r4, [r0, #8]
 80068ae:	4605      	mov	r5, r0
 80068b0:	460e      	mov	r6, r1
 80068b2:	b90b      	cbnz	r3, 80068b8 <_puts_r+0x10>
 80068b4:	f7ff ffc2 	bl	800683c <__sinit>
 80068b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ba:	07db      	lsls	r3, r3, #31
 80068bc:	d405      	bmi.n	80068ca <_puts_r+0x22>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	0598      	lsls	r0, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_puts_r+0x22>
 80068c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068c6:	f000 f9bc 	bl	8006c42 <__retarget_lock_acquire_recursive>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	0719      	lsls	r1, r3, #28
 80068ce:	d513      	bpl.n	80068f8 <_puts_r+0x50>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	b18b      	cbz	r3, 80068f8 <_puts_r+0x50>
 80068d4:	3e01      	subs	r6, #1
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068dc:	3b01      	subs	r3, #1
 80068de:	60a3      	str	r3, [r4, #8]
 80068e0:	b9e9      	cbnz	r1, 800691e <_puts_r+0x76>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da2e      	bge.n	8006944 <_puts_r+0x9c>
 80068e6:	4622      	mov	r2, r4
 80068e8:	210a      	movs	r1, #10
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f89b 	bl	8006a26 <__swbuf_r>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d007      	beq.n	8006904 <_puts_r+0x5c>
 80068f4:	250a      	movs	r5, #10
 80068f6:	e007      	b.n	8006908 <_puts_r+0x60>
 80068f8:	4621      	mov	r1, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 f8d0 	bl	8006aa0 <__swsetup_r>
 8006900:	2800      	cmp	r0, #0
 8006902:	d0e7      	beq.n	80068d4 <_puts_r+0x2c>
 8006904:	f04f 35ff 	mov.w	r5, #4294967295
 8006908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800690a:	07da      	lsls	r2, r3, #31
 800690c:	d405      	bmi.n	800691a <_puts_r+0x72>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	d402      	bmi.n	800691a <_puts_r+0x72>
 8006914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006916:	f000 f995 	bl	8006c44 <__retarget_lock_release_recursive>
 800691a:	4628      	mov	r0, r5
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	2b00      	cmp	r3, #0
 8006920:	da04      	bge.n	800692c <_puts_r+0x84>
 8006922:	69a2      	ldr	r2, [r4, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	dc06      	bgt.n	8006936 <_puts_r+0x8e>
 8006928:	290a      	cmp	r1, #10
 800692a:	d004      	beq.n	8006936 <_puts_r+0x8e>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	6022      	str	r2, [r4, #0]
 8006932:	7019      	strb	r1, [r3, #0]
 8006934:	e7cf      	b.n	80068d6 <_puts_r+0x2e>
 8006936:	4622      	mov	r2, r4
 8006938:	4628      	mov	r0, r5
 800693a:	f000 f874 	bl	8006a26 <__swbuf_r>
 800693e:	3001      	adds	r0, #1
 8006940:	d1c9      	bne.n	80068d6 <_puts_r+0x2e>
 8006942:	e7df      	b.n	8006904 <_puts_r+0x5c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	250a      	movs	r5, #10
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	701d      	strb	r5, [r3, #0]
 800694e:	e7db      	b.n	8006908 <_puts_r+0x60>

08006950 <puts>:
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <puts+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f7ff bfa7 	b.w	80068a8 <_puts_r>
 800695a:	bf00      	nop
 800695c:	20000080 	.word	0x20000080

08006960 <siprintf>:
 8006960:	b40e      	push	{r1, r2, r3}
 8006962:	b500      	push	{lr}
 8006964:	b09c      	sub	sp, #112	; 0x70
 8006966:	ab1d      	add	r3, sp, #116	; 0x74
 8006968:	9002      	str	r0, [sp, #8]
 800696a:	9006      	str	r0, [sp, #24]
 800696c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006970:	4809      	ldr	r0, [pc, #36]	; (8006998 <siprintf+0x38>)
 8006972:	9107      	str	r1, [sp, #28]
 8006974:	9104      	str	r1, [sp, #16]
 8006976:	4909      	ldr	r1, [pc, #36]	; (800699c <siprintf+0x3c>)
 8006978:	f853 2b04 	ldr.w	r2, [r3], #4
 800697c:	9105      	str	r1, [sp, #20]
 800697e:	6800      	ldr	r0, [r0, #0]
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	a902      	add	r1, sp, #8
 8006984:	f000 fac0 	bl	8006f08 <_svfiprintf_r>
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	b01c      	add	sp, #112	; 0x70
 8006990:	f85d eb04 	ldr.w	lr, [sp], #4
 8006994:	b003      	add	sp, #12
 8006996:	4770      	bx	lr
 8006998:	20000080 	.word	0x20000080
 800699c:	ffff0208 	.word	0xffff0208

080069a0 <__sread>:
 80069a0:	b510      	push	{r4, lr}
 80069a2:	460c      	mov	r4, r1
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	f000 f8fc 	bl	8006ba4 <_read_r>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	bfab      	itete	ge
 80069b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069b2:	89a3      	ldrhlt	r3, [r4, #12]
 80069b4:	181b      	addge	r3, r3, r0
 80069b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069ba:	bfac      	ite	ge
 80069bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80069be:	81a3      	strhlt	r3, [r4, #12]
 80069c0:	bd10      	pop	{r4, pc}

080069c2 <__swrite>:
 80069c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	461f      	mov	r7, r3
 80069c8:	898b      	ldrh	r3, [r1, #12]
 80069ca:	05db      	lsls	r3, r3, #23
 80069cc:	4605      	mov	r5, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	4616      	mov	r6, r2
 80069d2:	d505      	bpl.n	80069e0 <__swrite+0x1e>
 80069d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d8:	2302      	movs	r3, #2
 80069da:	2200      	movs	r2, #0
 80069dc:	f000 f8d0 	bl	8006b80 <_lseek_r>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	4628      	mov	r0, r5
 80069f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069f6:	f000 b8e7 	b.w	8006bc8 <_write_r>

080069fa <__sseek>:
 80069fa:	b510      	push	{r4, lr}
 80069fc:	460c      	mov	r4, r1
 80069fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a02:	f000 f8bd 	bl	8006b80 <_lseek_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	bf15      	itete	ne
 8006a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a16:	81a3      	strheq	r3, [r4, #12]
 8006a18:	bf18      	it	ne
 8006a1a:	81a3      	strhne	r3, [r4, #12]
 8006a1c:	bd10      	pop	{r4, pc}

08006a1e <__sclose>:
 8006a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a22:	f000 b89d 	b.w	8006b60 <_close_r>

08006a26 <__swbuf_r>:
 8006a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a28:	460e      	mov	r6, r1
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	b118      	cbz	r0, 8006a38 <__swbuf_r+0x12>
 8006a30:	6a03      	ldr	r3, [r0, #32]
 8006a32:	b90b      	cbnz	r3, 8006a38 <__swbuf_r+0x12>
 8006a34:	f7ff ff02 	bl	800683c <__sinit>
 8006a38:	69a3      	ldr	r3, [r4, #24]
 8006a3a:	60a3      	str	r3, [r4, #8]
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	071a      	lsls	r2, r3, #28
 8006a40:	d525      	bpl.n	8006a8e <__swbuf_r+0x68>
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	b31b      	cbz	r3, 8006a8e <__swbuf_r+0x68>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	1a98      	subs	r0, r3, r2
 8006a4c:	6963      	ldr	r3, [r4, #20]
 8006a4e:	b2f6      	uxtb	r6, r6
 8006a50:	4283      	cmp	r3, r0
 8006a52:	4637      	mov	r7, r6
 8006a54:	dc04      	bgt.n	8006a60 <__swbuf_r+0x3a>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fd69 	bl	8007530 <_fflush_r>
 8006a5e:	b9e0      	cbnz	r0, 8006a9a <__swbuf_r+0x74>
 8006a60:	68a3      	ldr	r3, [r4, #8]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	60a3      	str	r3, [r4, #8]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	701e      	strb	r6, [r3, #0]
 8006a6e:	6962      	ldr	r2, [r4, #20]
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d004      	beq.n	8006a80 <__swbuf_r+0x5a>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	07db      	lsls	r3, r3, #31
 8006a7a:	d506      	bpl.n	8006a8a <__swbuf_r+0x64>
 8006a7c:	2e0a      	cmp	r6, #10
 8006a7e:	d104      	bne.n	8006a8a <__swbuf_r+0x64>
 8006a80:	4621      	mov	r1, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 fd54 	bl	8007530 <_fflush_r>
 8006a88:	b938      	cbnz	r0, 8006a9a <__swbuf_r+0x74>
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 f805 	bl	8006aa0 <__swsetup_r>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d0d5      	beq.n	8006a46 <__swbuf_r+0x20>
 8006a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a9e:	e7f4      	b.n	8006a8a <__swbuf_r+0x64>

08006aa0 <__swsetup_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4b2a      	ldr	r3, [pc, #168]	; (8006b4c <__swsetup_r+0xac>)
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	b118      	cbz	r0, 8006ab4 <__swsetup_r+0x14>
 8006aac:	6a03      	ldr	r3, [r0, #32]
 8006aae:	b90b      	cbnz	r3, 8006ab4 <__swsetup_r+0x14>
 8006ab0:	f7ff fec4 	bl	800683c <__sinit>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aba:	0718      	lsls	r0, r3, #28
 8006abc:	d422      	bmi.n	8006b04 <__swsetup_r+0x64>
 8006abe:	06d9      	lsls	r1, r3, #27
 8006ac0:	d407      	bmi.n	8006ad2 <__swsetup_r+0x32>
 8006ac2:	2309      	movs	r3, #9
 8006ac4:	602b      	str	r3, [r5, #0]
 8006ac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e034      	b.n	8006b3c <__swsetup_r+0x9c>
 8006ad2:	0758      	lsls	r0, r3, #29
 8006ad4:	d512      	bpl.n	8006afc <__swsetup_r+0x5c>
 8006ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ad8:	b141      	cbz	r1, 8006aec <__swsetup_r+0x4c>
 8006ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	d002      	beq.n	8006ae8 <__swsetup_r+0x48>
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 f8be 	bl	8006c64 <_free_r>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6363      	str	r3, [r4, #52]	; 0x34
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	2300      	movs	r3, #0
 8006af6:	6063      	str	r3, [r4, #4]
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f043 0308 	orr.w	r3, r3, #8
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	b94b      	cbnz	r3, 8006b1c <__swsetup_r+0x7c>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b12:	d003      	beq.n	8006b1c <__swsetup_r+0x7c>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fd58 	bl	80075cc <__smakebuf_r>
 8006b1c:	89a0      	ldrh	r0, [r4, #12]
 8006b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b22:	f010 0301 	ands.w	r3, r0, #1
 8006b26:	d00a      	beq.n	8006b3e <__swsetup_r+0x9e>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60a3      	str	r3, [r4, #8]
 8006b2c:	6963      	ldr	r3, [r4, #20]
 8006b2e:	425b      	negs	r3, r3
 8006b30:	61a3      	str	r3, [r4, #24]
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	b943      	cbnz	r3, 8006b48 <__swsetup_r+0xa8>
 8006b36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b3a:	d1c4      	bne.n	8006ac6 <__swsetup_r+0x26>
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
 8006b3e:	0781      	lsls	r1, r0, #30
 8006b40:	bf58      	it	pl
 8006b42:	6963      	ldrpl	r3, [r4, #20]
 8006b44:	60a3      	str	r3, [r4, #8]
 8006b46:	e7f4      	b.n	8006b32 <__swsetup_r+0x92>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e7f7      	b.n	8006b3c <__swsetup_r+0x9c>
 8006b4c:	20000080 	.word	0x20000080

08006b50 <memset>:
 8006b50:	4402      	add	r2, r0
 8006b52:	4603      	mov	r3, r0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d100      	bne.n	8006b5a <memset+0xa>
 8006b58:	4770      	bx	lr
 8006b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5e:	e7f9      	b.n	8006b54 <memset+0x4>

08006b60 <_close_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	; (8006b7c <_close_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa fe2f 	bl	80017ce <_close>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_close_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_close_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	20013128 	.word	0x20013128

08006b80 <_lseek_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d07      	ldr	r5, [pc, #28]	; (8006ba0 <_lseek_r+0x20>)
 8006b84:	4604      	mov	r4, r0
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	602a      	str	r2, [r5, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f7fa fe44 	bl	800181c <_lseek>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_lseek_r+0x1e>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_lseek_r+0x1e>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20013128 	.word	0x20013128

08006ba4 <_read_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	; (8006bc4 <_read_r+0x20>)
 8006ba8:	4604      	mov	r4, r0
 8006baa:	4608      	mov	r0, r1
 8006bac:	4611      	mov	r1, r2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	602a      	str	r2, [r5, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f7fa fdd2 	bl	800175c <_read>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_read_r+0x1e>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_read_r+0x1e>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20013128 	.word	0x20013128

08006bc8 <_write_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <_write_r+0x20>)
 8006bcc:	4604      	mov	r4, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f7fa fddd 	bl	8001796 <_write>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_write_r+0x1e>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_write_r+0x1e>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20013128 	.word	0x20013128

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000080 	.word	0x20000080

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4d0d      	ldr	r5, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2600      	movs	r6, #0
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4d0b      	ldr	r5, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f000 ffb0 	bl	8007b70 <_init>
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2600      	movs	r6, #0
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	08007d8c 	.word	0x08007d8c
 8006c34:	08007d8c 	.word	0x08007d8c
 8006c38:	08007d8c 	.word	0x08007d8c
 8006c3c:	08007d90 	.word	0x08007d90

08006c40 <__retarget_lock_init_recursive>:
 8006c40:	4770      	bx	lr

08006c42 <__retarget_lock_acquire_recursive>:
 8006c42:	4770      	bx	lr

08006c44 <__retarget_lock_release_recursive>:
 8006c44:	4770      	bx	lr

08006c46 <memcpy>:
 8006c46:	440a      	add	r2, r1
 8006c48:	4291      	cmp	r1, r2
 8006c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c4e:	d100      	bne.n	8006c52 <memcpy+0xc>
 8006c50:	4770      	bx	lr
 8006c52:	b510      	push	{r4, lr}
 8006c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c5c:	4291      	cmp	r1, r2
 8006c5e:	d1f9      	bne.n	8006c54 <memcpy+0xe>
 8006c60:	bd10      	pop	{r4, pc}
	...

08006c64 <_free_r>:
 8006c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c66:	2900      	cmp	r1, #0
 8006c68:	d044      	beq.n	8006cf4 <_free_r+0x90>
 8006c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6e:	9001      	str	r0, [sp, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f1a1 0404 	sub.w	r4, r1, #4
 8006c76:	bfb8      	it	lt
 8006c78:	18e4      	addlt	r4, r4, r3
 8006c7a:	f000 f8df 	bl	8006e3c <__malloc_lock>
 8006c7e:	4a1e      	ldr	r2, [pc, #120]	; (8006cf8 <_free_r+0x94>)
 8006c80:	9801      	ldr	r0, [sp, #4]
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	b933      	cbnz	r3, 8006c94 <_free_r+0x30>
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	6014      	str	r4, [r2, #0]
 8006c8a:	b003      	add	sp, #12
 8006c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c90:	f000 b8da 	b.w	8006e48 <__malloc_unlock>
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d908      	bls.n	8006caa <_free_r+0x46>
 8006c98:	6825      	ldr	r5, [r4, #0]
 8006c9a:	1961      	adds	r1, r4, r5
 8006c9c:	428b      	cmp	r3, r1
 8006c9e:	bf01      	itttt	eq
 8006ca0:	6819      	ldreq	r1, [r3, #0]
 8006ca2:	685b      	ldreq	r3, [r3, #4]
 8006ca4:	1949      	addeq	r1, r1, r5
 8006ca6:	6021      	streq	r1, [r4, #0]
 8006ca8:	e7ed      	b.n	8006c86 <_free_r+0x22>
 8006caa:	461a      	mov	r2, r3
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b10b      	cbz	r3, 8006cb4 <_free_r+0x50>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d9fa      	bls.n	8006caa <_free_r+0x46>
 8006cb4:	6811      	ldr	r1, [r2, #0]
 8006cb6:	1855      	adds	r5, r2, r1
 8006cb8:	42a5      	cmp	r5, r4
 8006cba:	d10b      	bne.n	8006cd4 <_free_r+0x70>
 8006cbc:	6824      	ldr	r4, [r4, #0]
 8006cbe:	4421      	add	r1, r4
 8006cc0:	1854      	adds	r4, r2, r1
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	6011      	str	r1, [r2, #0]
 8006cc6:	d1e0      	bne.n	8006c8a <_free_r+0x26>
 8006cc8:	681c      	ldr	r4, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	6053      	str	r3, [r2, #4]
 8006cce:	440c      	add	r4, r1
 8006cd0:	6014      	str	r4, [r2, #0]
 8006cd2:	e7da      	b.n	8006c8a <_free_r+0x26>
 8006cd4:	d902      	bls.n	8006cdc <_free_r+0x78>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	e7d6      	b.n	8006c8a <_free_r+0x26>
 8006cdc:	6825      	ldr	r5, [r4, #0]
 8006cde:	1961      	adds	r1, r4, r5
 8006ce0:	428b      	cmp	r3, r1
 8006ce2:	bf04      	itt	eq
 8006ce4:	6819      	ldreq	r1, [r3, #0]
 8006ce6:	685b      	ldreq	r3, [r3, #4]
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	bf04      	itt	eq
 8006cec:	1949      	addeq	r1, r1, r5
 8006cee:	6021      	streq	r1, [r4, #0]
 8006cf0:	6054      	str	r4, [r2, #4]
 8006cf2:	e7ca      	b.n	8006c8a <_free_r+0x26>
 8006cf4:	b003      	add	sp, #12
 8006cf6:	bd30      	pop	{r4, r5, pc}
 8006cf8:	20013130 	.word	0x20013130

08006cfc <sbrk_aligned>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4e0e      	ldr	r6, [pc, #56]	; (8006d38 <sbrk_aligned+0x3c>)
 8006d00:	460c      	mov	r4, r1
 8006d02:	6831      	ldr	r1, [r6, #0]
 8006d04:	4605      	mov	r5, r0
 8006d06:	b911      	cbnz	r1, 8006d0e <sbrk_aligned+0x12>
 8006d08:	f000 fcd8 	bl	80076bc <_sbrk_r>
 8006d0c:	6030      	str	r0, [r6, #0]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fcd3 	bl	80076bc <_sbrk_r>
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	d00a      	beq.n	8006d30 <sbrk_aligned+0x34>
 8006d1a:	1cc4      	adds	r4, r0, #3
 8006d1c:	f024 0403 	bic.w	r4, r4, #3
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	d007      	beq.n	8006d34 <sbrk_aligned+0x38>
 8006d24:	1a21      	subs	r1, r4, r0
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 fcc8 	bl	80076bc <_sbrk_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d101      	bne.n	8006d34 <sbrk_aligned+0x38>
 8006d30:	f04f 34ff 	mov.w	r4, #4294967295
 8006d34:	4620      	mov	r0, r4
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	20013134 	.word	0x20013134

08006d3c <_malloc_r>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	1ccd      	adds	r5, r1, #3
 8006d42:	f025 0503 	bic.w	r5, r5, #3
 8006d46:	3508      	adds	r5, #8
 8006d48:	2d0c      	cmp	r5, #12
 8006d4a:	bf38      	it	cc
 8006d4c:	250c      	movcc	r5, #12
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	4607      	mov	r7, r0
 8006d52:	db01      	blt.n	8006d58 <_malloc_r+0x1c>
 8006d54:	42a9      	cmp	r1, r5
 8006d56:	d905      	bls.n	8006d64 <_malloc_r+0x28>
 8006d58:	230c      	movs	r3, #12
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	4630      	mov	r0, r6
 8006d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e38 <_malloc_r+0xfc>
 8006d68:	f000 f868 	bl	8006e3c <__malloc_lock>
 8006d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d70:	461c      	mov	r4, r3
 8006d72:	bb5c      	cbnz	r4, 8006dcc <_malloc_r+0x90>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ffc0 	bl	8006cfc <sbrk_aligned>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	4604      	mov	r4, r0
 8006d80:	d155      	bne.n	8006e2e <_malloc_r+0xf2>
 8006d82:	f8d8 4000 	ldr.w	r4, [r8]
 8006d86:	4626      	mov	r6, r4
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	d145      	bne.n	8006e18 <_malloc_r+0xdc>
 8006d8c:	2c00      	cmp	r4, #0
 8006d8e:	d048      	beq.n	8006e22 <_malloc_r+0xe6>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	4631      	mov	r1, r6
 8006d94:	4638      	mov	r0, r7
 8006d96:	eb04 0903 	add.w	r9, r4, r3
 8006d9a:	f000 fc8f 	bl	80076bc <_sbrk_r>
 8006d9e:	4581      	cmp	r9, r0
 8006da0:	d13f      	bne.n	8006e22 <_malloc_r+0xe6>
 8006da2:	6821      	ldr	r1, [r4, #0]
 8006da4:	1a6d      	subs	r5, r5, r1
 8006da6:	4629      	mov	r1, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ffa7 	bl	8006cfc <sbrk_aligned>
 8006dae:	3001      	adds	r0, #1
 8006db0:	d037      	beq.n	8006e22 <_malloc_r+0xe6>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	442b      	add	r3, r5
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	f8d8 3000 	ldr.w	r3, [r8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d038      	beq.n	8006e32 <_malloc_r+0xf6>
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	42a2      	cmp	r2, r4
 8006dc4:	d12b      	bne.n	8006e1e <_malloc_r+0xe2>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	e00f      	b.n	8006dec <_malloc_r+0xb0>
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	1b52      	subs	r2, r2, r5
 8006dd0:	d41f      	bmi.n	8006e12 <_malloc_r+0xd6>
 8006dd2:	2a0b      	cmp	r2, #11
 8006dd4:	d917      	bls.n	8006e06 <_malloc_r+0xca>
 8006dd6:	1961      	adds	r1, r4, r5
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	6025      	str	r5, [r4, #0]
 8006ddc:	bf18      	it	ne
 8006dde:	6059      	strne	r1, [r3, #4]
 8006de0:	6863      	ldr	r3, [r4, #4]
 8006de2:	bf08      	it	eq
 8006de4:	f8c8 1000 	streq.w	r1, [r8]
 8006de8:	5162      	str	r2, [r4, r5]
 8006dea:	604b      	str	r3, [r1, #4]
 8006dec:	4638      	mov	r0, r7
 8006dee:	f104 060b 	add.w	r6, r4, #11
 8006df2:	f000 f829 	bl	8006e48 <__malloc_unlock>
 8006df6:	f026 0607 	bic.w	r6, r6, #7
 8006dfa:	1d23      	adds	r3, r4, #4
 8006dfc:	1af2      	subs	r2, r6, r3
 8006dfe:	d0ae      	beq.n	8006d5e <_malloc_r+0x22>
 8006e00:	1b9b      	subs	r3, r3, r6
 8006e02:	50a3      	str	r3, [r4, r2]
 8006e04:	e7ab      	b.n	8006d5e <_malloc_r+0x22>
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	6862      	ldr	r2, [r4, #4]
 8006e0a:	d1dd      	bne.n	8006dc8 <_malloc_r+0x8c>
 8006e0c:	f8c8 2000 	str.w	r2, [r8]
 8006e10:	e7ec      	b.n	8006dec <_malloc_r+0xb0>
 8006e12:	4623      	mov	r3, r4
 8006e14:	6864      	ldr	r4, [r4, #4]
 8006e16:	e7ac      	b.n	8006d72 <_malloc_r+0x36>
 8006e18:	4634      	mov	r4, r6
 8006e1a:	6876      	ldr	r6, [r6, #4]
 8006e1c:	e7b4      	b.n	8006d88 <_malloc_r+0x4c>
 8006e1e:	4613      	mov	r3, r2
 8006e20:	e7cc      	b.n	8006dbc <_malloc_r+0x80>
 8006e22:	230c      	movs	r3, #12
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	4638      	mov	r0, r7
 8006e28:	f000 f80e 	bl	8006e48 <__malloc_unlock>
 8006e2c:	e797      	b.n	8006d5e <_malloc_r+0x22>
 8006e2e:	6025      	str	r5, [r4, #0]
 8006e30:	e7dc      	b.n	8006dec <_malloc_r+0xb0>
 8006e32:	605b      	str	r3, [r3, #4]
 8006e34:	deff      	udf	#255	; 0xff
 8006e36:	bf00      	nop
 8006e38:	20013130 	.word	0x20013130

08006e3c <__malloc_lock>:
 8006e3c:	4801      	ldr	r0, [pc, #4]	; (8006e44 <__malloc_lock+0x8>)
 8006e3e:	f7ff bf00 	b.w	8006c42 <__retarget_lock_acquire_recursive>
 8006e42:	bf00      	nop
 8006e44:	2001312c 	.word	0x2001312c

08006e48 <__malloc_unlock>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__malloc_unlock+0x8>)
 8006e4a:	f7ff befb 	b.w	8006c44 <__retarget_lock_release_recursive>
 8006e4e:	bf00      	nop
 8006e50:	2001312c 	.word	0x2001312c

08006e54 <__ssputs_r>:
 8006e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	688e      	ldr	r6, [r1, #8]
 8006e5a:	461f      	mov	r7, r3
 8006e5c:	42be      	cmp	r6, r7
 8006e5e:	680b      	ldr	r3, [r1, #0]
 8006e60:	4682      	mov	sl, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	4690      	mov	r8, r2
 8006e66:	d82c      	bhi.n	8006ec2 <__ssputs_r+0x6e>
 8006e68:	898a      	ldrh	r2, [r1, #12]
 8006e6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e6e:	d026      	beq.n	8006ebe <__ssputs_r+0x6a>
 8006e70:	6965      	ldr	r5, [r4, #20]
 8006e72:	6909      	ldr	r1, [r1, #16]
 8006e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e78:	eba3 0901 	sub.w	r9, r3, r1
 8006e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e80:	1c7b      	adds	r3, r7, #1
 8006e82:	444b      	add	r3, r9
 8006e84:	106d      	asrs	r5, r5, #1
 8006e86:	429d      	cmp	r5, r3
 8006e88:	bf38      	it	cc
 8006e8a:	461d      	movcc	r5, r3
 8006e8c:	0553      	lsls	r3, r2, #21
 8006e8e:	d527      	bpl.n	8006ee0 <__ssputs_r+0x8c>
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7ff ff53 	bl	8006d3c <_malloc_r>
 8006e96:	4606      	mov	r6, r0
 8006e98:	b360      	cbz	r0, 8006ef4 <__ssputs_r+0xa0>
 8006e9a:	6921      	ldr	r1, [r4, #16]
 8006e9c:	464a      	mov	r2, r9
 8006e9e:	f7ff fed2 	bl	8006c46 <memcpy>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	6126      	str	r6, [r4, #16]
 8006eb0:	6165      	str	r5, [r4, #20]
 8006eb2:	444e      	add	r6, r9
 8006eb4:	eba5 0509 	sub.w	r5, r5, r9
 8006eb8:	6026      	str	r6, [r4, #0]
 8006eba:	60a5      	str	r5, [r4, #8]
 8006ebc:	463e      	mov	r6, r7
 8006ebe:	42be      	cmp	r6, r7
 8006ec0:	d900      	bls.n	8006ec4 <__ssputs_r+0x70>
 8006ec2:	463e      	mov	r6, r7
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	4641      	mov	r1, r8
 8006eca:	f000 fbbb 	bl	8007644 <memmove>
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	1b9b      	subs	r3, r3, r6
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	4433      	add	r3, r6
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	2000      	movs	r0, #0
 8006edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	f000 fbfb 	bl	80076dc <_realloc_r>
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1e0      	bne.n	8006eae <__ssputs_r+0x5a>
 8006eec:	6921      	ldr	r1, [r4, #16]
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f7ff feb8 	bl	8006c64 <_free_r>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	f8ca 3000 	str.w	r3, [sl]
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	e7e9      	b.n	8006edc <__ssputs_r+0x88>

08006f08 <_svfiprintf_r>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4698      	mov	r8, r3
 8006f0e:	898b      	ldrh	r3, [r1, #12]
 8006f10:	061b      	lsls	r3, r3, #24
 8006f12:	b09d      	sub	sp, #116	; 0x74
 8006f14:	4607      	mov	r7, r0
 8006f16:	460d      	mov	r5, r1
 8006f18:	4614      	mov	r4, r2
 8006f1a:	d50e      	bpl.n	8006f3a <_svfiprintf_r+0x32>
 8006f1c:	690b      	ldr	r3, [r1, #16]
 8006f1e:	b963      	cbnz	r3, 8006f3a <_svfiprintf_r+0x32>
 8006f20:	2140      	movs	r1, #64	; 0x40
 8006f22:	f7ff ff0b 	bl	8006d3c <_malloc_r>
 8006f26:	6028      	str	r0, [r5, #0]
 8006f28:	6128      	str	r0, [r5, #16]
 8006f2a:	b920      	cbnz	r0, 8006f36 <_svfiprintf_r+0x2e>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	e0d0      	b.n	80070d8 <_svfiprintf_r+0x1d0>
 8006f36:	2340      	movs	r3, #64	; 0x40
 8006f38:	616b      	str	r3, [r5, #20]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3e:	2320      	movs	r3, #32
 8006f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f48:	2330      	movs	r3, #48	; 0x30
 8006f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070f0 <_svfiprintf_r+0x1e8>
 8006f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f52:	f04f 0901 	mov.w	r9, #1
 8006f56:	4623      	mov	r3, r4
 8006f58:	469a      	mov	sl, r3
 8006f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f5e:	b10a      	cbz	r2, 8006f64 <_svfiprintf_r+0x5c>
 8006f60:	2a25      	cmp	r2, #37	; 0x25
 8006f62:	d1f9      	bne.n	8006f58 <_svfiprintf_r+0x50>
 8006f64:	ebba 0b04 	subs.w	fp, sl, r4
 8006f68:	d00b      	beq.n	8006f82 <_svfiprintf_r+0x7a>
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ff6f 	bl	8006e54 <__ssputs_r>
 8006f76:	3001      	adds	r0, #1
 8006f78:	f000 80a9 	beq.w	80070ce <_svfiprintf_r+0x1c6>
 8006f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f7e:	445a      	add	r2, fp
 8006f80:	9209      	str	r2, [sp, #36]	; 0x24
 8006f82:	f89a 3000 	ldrb.w	r3, [sl]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80a1 	beq.w	80070ce <_svfiprintf_r+0x1c6>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f96:	f10a 0a01 	add.w	sl, sl, #1
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	9307      	str	r3, [sp, #28]
 8006f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa4:	4654      	mov	r4, sl
 8006fa6:	2205      	movs	r2, #5
 8006fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fac:	4850      	ldr	r0, [pc, #320]	; (80070f0 <_svfiprintf_r+0x1e8>)
 8006fae:	f7f9 f917 	bl	80001e0 <memchr>
 8006fb2:	9a04      	ldr	r2, [sp, #16]
 8006fb4:	b9d8      	cbnz	r0, 8006fee <_svfiprintf_r+0xe6>
 8006fb6:	06d0      	lsls	r0, r2, #27
 8006fb8:	bf44      	itt	mi
 8006fba:	2320      	movmi	r3, #32
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc0:	0711      	lsls	r1, r2, #28
 8006fc2:	bf44      	itt	mi
 8006fc4:	232b      	movmi	r3, #43	; 0x2b
 8006fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fca:	f89a 3000 	ldrb.w	r3, [sl]
 8006fce:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd0:	d015      	beq.n	8006ffe <_svfiprintf_r+0xf6>
 8006fd2:	9a07      	ldr	r2, [sp, #28]
 8006fd4:	4654      	mov	r4, sl
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f04f 0c0a 	mov.w	ip, #10
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe2:	3b30      	subs	r3, #48	; 0x30
 8006fe4:	2b09      	cmp	r3, #9
 8006fe6:	d94d      	bls.n	8007084 <_svfiprintf_r+0x17c>
 8006fe8:	b1b0      	cbz	r0, 8007018 <_svfiprintf_r+0x110>
 8006fea:	9207      	str	r2, [sp, #28]
 8006fec:	e014      	b.n	8007018 <_svfiprintf_r+0x110>
 8006fee:	eba0 0308 	sub.w	r3, r0, r8
 8006ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	46a2      	mov	sl, r4
 8006ffc:	e7d2      	b.n	8006fa4 <_svfiprintf_r+0x9c>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	1d19      	adds	r1, r3, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	9103      	str	r1, [sp, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfbb      	ittet	lt
 800700a:	425b      	neglt	r3, r3
 800700c:	f042 0202 	orrlt.w	r2, r2, #2
 8007010:	9307      	strge	r3, [sp, #28]
 8007012:	9307      	strlt	r3, [sp, #28]
 8007014:	bfb8      	it	lt
 8007016:	9204      	strlt	r2, [sp, #16]
 8007018:	7823      	ldrb	r3, [r4, #0]
 800701a:	2b2e      	cmp	r3, #46	; 0x2e
 800701c:	d10c      	bne.n	8007038 <_svfiprintf_r+0x130>
 800701e:	7863      	ldrb	r3, [r4, #1]
 8007020:	2b2a      	cmp	r3, #42	; 0x2a
 8007022:	d134      	bne.n	800708e <_svfiprintf_r+0x186>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9203      	str	r2, [sp, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfb8      	it	lt
 8007030:	f04f 33ff 	movlt.w	r3, #4294967295
 8007034:	3402      	adds	r4, #2
 8007036:	9305      	str	r3, [sp, #20]
 8007038:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007100 <_svfiprintf_r+0x1f8>
 800703c:	7821      	ldrb	r1, [r4, #0]
 800703e:	2203      	movs	r2, #3
 8007040:	4650      	mov	r0, sl
 8007042:	f7f9 f8cd 	bl	80001e0 <memchr>
 8007046:	b138      	cbz	r0, 8007058 <_svfiprintf_r+0x150>
 8007048:	9b04      	ldr	r3, [sp, #16]
 800704a:	eba0 000a 	sub.w	r0, r0, sl
 800704e:	2240      	movs	r2, #64	; 0x40
 8007050:	4082      	lsls	r2, r0
 8007052:	4313      	orrs	r3, r2
 8007054:	3401      	adds	r4, #1
 8007056:	9304      	str	r3, [sp, #16]
 8007058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705c:	4825      	ldr	r0, [pc, #148]	; (80070f4 <_svfiprintf_r+0x1ec>)
 800705e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007062:	2206      	movs	r2, #6
 8007064:	f7f9 f8bc 	bl	80001e0 <memchr>
 8007068:	2800      	cmp	r0, #0
 800706a:	d038      	beq.n	80070de <_svfiprintf_r+0x1d6>
 800706c:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <_svfiprintf_r+0x1f0>)
 800706e:	bb1b      	cbnz	r3, 80070b8 <_svfiprintf_r+0x1b0>
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	3307      	adds	r3, #7
 8007074:	f023 0307 	bic.w	r3, r3, #7
 8007078:	3308      	adds	r3, #8
 800707a:	9303      	str	r3, [sp, #12]
 800707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707e:	4433      	add	r3, r6
 8007080:	9309      	str	r3, [sp, #36]	; 0x24
 8007082:	e768      	b.n	8006f56 <_svfiprintf_r+0x4e>
 8007084:	fb0c 3202 	mla	r2, ip, r2, r3
 8007088:	460c      	mov	r4, r1
 800708a:	2001      	movs	r0, #1
 800708c:	e7a6      	b.n	8006fdc <_svfiprintf_r+0xd4>
 800708e:	2300      	movs	r3, #0
 8007090:	3401      	adds	r4, #1
 8007092:	9305      	str	r3, [sp, #20]
 8007094:	4619      	mov	r1, r3
 8007096:	f04f 0c0a 	mov.w	ip, #10
 800709a:	4620      	mov	r0, r4
 800709c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a0:	3a30      	subs	r2, #48	; 0x30
 80070a2:	2a09      	cmp	r2, #9
 80070a4:	d903      	bls.n	80070ae <_svfiprintf_r+0x1a6>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0c6      	beq.n	8007038 <_svfiprintf_r+0x130>
 80070aa:	9105      	str	r1, [sp, #20]
 80070ac:	e7c4      	b.n	8007038 <_svfiprintf_r+0x130>
 80070ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b2:	4604      	mov	r4, r0
 80070b4:	2301      	movs	r3, #1
 80070b6:	e7f0      	b.n	800709a <_svfiprintf_r+0x192>
 80070b8:	ab03      	add	r3, sp, #12
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	462a      	mov	r2, r5
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <_svfiprintf_r+0x1f4>)
 80070c0:	a904      	add	r1, sp, #16
 80070c2:	4638      	mov	r0, r7
 80070c4:	f3af 8000 	nop.w
 80070c8:	1c42      	adds	r2, r0, #1
 80070ca:	4606      	mov	r6, r0
 80070cc:	d1d6      	bne.n	800707c <_svfiprintf_r+0x174>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	065b      	lsls	r3, r3, #25
 80070d2:	f53f af2d 	bmi.w	8006f30 <_svfiprintf_r+0x28>
 80070d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d8:	b01d      	add	sp, #116	; 0x74
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	ab03      	add	r3, sp, #12
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	462a      	mov	r2, r5
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <_svfiprintf_r+0x1f4>)
 80070e6:	a904      	add	r1, sp, #16
 80070e8:	4638      	mov	r0, r7
 80070ea:	f000 f879 	bl	80071e0 <_printf_i>
 80070ee:	e7eb      	b.n	80070c8 <_svfiprintf_r+0x1c0>
 80070f0:	08007d51 	.word	0x08007d51
 80070f4:	08007d5b 	.word	0x08007d5b
 80070f8:	00000000 	.word	0x00000000
 80070fc:	08006e55 	.word	0x08006e55
 8007100:	08007d57 	.word	0x08007d57

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4616      	mov	r6, r2
 800710a:	4699      	mov	r9, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007114:	4293      	cmp	r3, r2
 8007116:	bfb8      	it	lt
 8007118:	4613      	movlt	r3, r2
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007120:	4607      	mov	r7, r0
 8007122:	460c      	mov	r4, r1
 8007124:	b10a      	cbz	r2, 800712a <_printf_common+0x26>
 8007126:	3301      	adds	r3, #1
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	0699      	lsls	r1, r3, #26
 800712e:	bf42      	ittt	mi
 8007130:	6833      	ldrmi	r3, [r6, #0]
 8007132:	3302      	addmi	r3, #2
 8007134:	6033      	strmi	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d106      	bne.n	800714c <_printf_common+0x48>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	6832      	ldr	r2, [r6, #0]
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ab      	cmp	r3, r5
 800714a:	dc26      	bgt.n	800719a <_printf_common+0x96>
 800714c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007150:	1e13      	subs	r3, r2, #0
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	bf18      	it	ne
 8007156:	2301      	movne	r3, #1
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d42b      	bmi.n	80071b4 <_printf_common+0xb0>
 800715c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007160:	4649      	mov	r1, r9
 8007162:	4638      	mov	r0, r7
 8007164:	47c0      	blx	r8
 8007166:	3001      	adds	r0, #1
 8007168:	d01e      	beq.n	80071a8 <_printf_common+0xa4>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	2b04      	cmp	r3, #4
 8007174:	bf02      	ittt	eq
 8007176:	68e5      	ldreq	r5, [r4, #12]
 8007178:	6833      	ldreq	r3, [r6, #0]
 800717a:	1aed      	subeq	r5, r5, r3
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	bf0c      	ite	eq
 8007180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007184:	2500      	movne	r5, #0
 8007186:	4293      	cmp	r3, r2
 8007188:	bfc4      	itt	gt
 800718a:	1a9b      	subgt	r3, r3, r2
 800718c:	18ed      	addgt	r5, r5, r3
 800718e:	2600      	movs	r6, #0
 8007190:	341a      	adds	r4, #26
 8007192:	42b5      	cmp	r5, r6
 8007194:	d11a      	bne.n	80071cc <_printf_common+0xc8>
 8007196:	2000      	movs	r0, #0
 8007198:	e008      	b.n	80071ac <_printf_common+0xa8>
 800719a:	2301      	movs	r3, #1
 800719c:	4652      	mov	r2, sl
 800719e:	4649      	mov	r1, r9
 80071a0:	4638      	mov	r0, r7
 80071a2:	47c0      	blx	r8
 80071a4:	3001      	adds	r0, #1
 80071a6:	d103      	bne.n	80071b0 <_printf_common+0xac>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	3501      	adds	r5, #1
 80071b2:	e7c6      	b.n	8007142 <_printf_common+0x3e>
 80071b4:	18e1      	adds	r1, r4, r3
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	2030      	movs	r0, #48	; 0x30
 80071ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071be:	4422      	add	r2, r4
 80071c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c8:	3302      	adds	r3, #2
 80071ca:	e7c7      	b.n	800715c <_printf_common+0x58>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4622      	mov	r2, r4
 80071d0:	4649      	mov	r1, r9
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c0      	blx	r8
 80071d6:	3001      	adds	r0, #1
 80071d8:	d0e6      	beq.n	80071a8 <_printf_common+0xa4>
 80071da:	3601      	adds	r6, #1
 80071dc:	e7d9      	b.n	8007192 <_printf_common+0x8e>
	...

080071e0 <_printf_i>:
 80071e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	7e0f      	ldrb	r7, [r1, #24]
 80071e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e8:	2f78      	cmp	r7, #120	; 0x78
 80071ea:	4691      	mov	r9, r2
 80071ec:	4680      	mov	r8, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	469a      	mov	sl, r3
 80071f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071f6:	d807      	bhi.n	8007208 <_printf_i+0x28>
 80071f8:	2f62      	cmp	r7, #98	; 0x62
 80071fa:	d80a      	bhi.n	8007212 <_printf_i+0x32>
 80071fc:	2f00      	cmp	r7, #0
 80071fe:	f000 80d4 	beq.w	80073aa <_printf_i+0x1ca>
 8007202:	2f58      	cmp	r7, #88	; 0x58
 8007204:	f000 80c0 	beq.w	8007388 <_printf_i+0x1a8>
 8007208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800720c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007210:	e03a      	b.n	8007288 <_printf_i+0xa8>
 8007212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007216:	2b15      	cmp	r3, #21
 8007218:	d8f6      	bhi.n	8007208 <_printf_i+0x28>
 800721a:	a101      	add	r1, pc, #4	; (adr r1, 8007220 <_printf_i+0x40>)
 800721c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007220:	08007279 	.word	0x08007279
 8007224:	0800728d 	.word	0x0800728d
 8007228:	08007209 	.word	0x08007209
 800722c:	08007209 	.word	0x08007209
 8007230:	08007209 	.word	0x08007209
 8007234:	08007209 	.word	0x08007209
 8007238:	0800728d 	.word	0x0800728d
 800723c:	08007209 	.word	0x08007209
 8007240:	08007209 	.word	0x08007209
 8007244:	08007209 	.word	0x08007209
 8007248:	08007209 	.word	0x08007209
 800724c:	08007391 	.word	0x08007391
 8007250:	080072b9 	.word	0x080072b9
 8007254:	0800734b 	.word	0x0800734b
 8007258:	08007209 	.word	0x08007209
 800725c:	08007209 	.word	0x08007209
 8007260:	080073b3 	.word	0x080073b3
 8007264:	08007209 	.word	0x08007209
 8007268:	080072b9 	.word	0x080072b9
 800726c:	08007209 	.word	0x08007209
 8007270:	08007209 	.word	0x08007209
 8007274:	08007353 	.word	0x08007353
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	602a      	str	r2, [r5, #0]
 8007280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007288:	2301      	movs	r3, #1
 800728a:	e09f      	b.n	80073cc <_printf_i+0x1ec>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	0607      	lsls	r7, r0, #24
 8007292:	f103 0104 	add.w	r1, r3, #4
 8007296:	6029      	str	r1, [r5, #0]
 8007298:	d501      	bpl.n	800729e <_printf_i+0xbe>
 800729a:	681e      	ldr	r6, [r3, #0]
 800729c:	e003      	b.n	80072a6 <_printf_i+0xc6>
 800729e:	0646      	lsls	r6, r0, #25
 80072a0:	d5fb      	bpl.n	800729a <_printf_i+0xba>
 80072a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	da03      	bge.n	80072b2 <_printf_i+0xd2>
 80072aa:	232d      	movs	r3, #45	; 0x2d
 80072ac:	4276      	negs	r6, r6
 80072ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b2:	485a      	ldr	r0, [pc, #360]	; (800741c <_printf_i+0x23c>)
 80072b4:	230a      	movs	r3, #10
 80072b6:	e012      	b.n	80072de <_printf_i+0xfe>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	1d19      	adds	r1, r3, #4
 80072be:	6029      	str	r1, [r5, #0]
 80072c0:	0605      	lsls	r5, r0, #24
 80072c2:	d501      	bpl.n	80072c8 <_printf_i+0xe8>
 80072c4:	681e      	ldr	r6, [r3, #0]
 80072c6:	e002      	b.n	80072ce <_printf_i+0xee>
 80072c8:	0641      	lsls	r1, r0, #25
 80072ca:	d5fb      	bpl.n	80072c4 <_printf_i+0xe4>
 80072cc:	881e      	ldrh	r6, [r3, #0]
 80072ce:	4853      	ldr	r0, [pc, #332]	; (800741c <_printf_i+0x23c>)
 80072d0:	2f6f      	cmp	r7, #111	; 0x6f
 80072d2:	bf0c      	ite	eq
 80072d4:	2308      	moveq	r3, #8
 80072d6:	230a      	movne	r3, #10
 80072d8:	2100      	movs	r1, #0
 80072da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072de:	6865      	ldr	r5, [r4, #4]
 80072e0:	60a5      	str	r5, [r4, #8]
 80072e2:	2d00      	cmp	r5, #0
 80072e4:	bfa2      	ittt	ge
 80072e6:	6821      	ldrge	r1, [r4, #0]
 80072e8:	f021 0104 	bicge.w	r1, r1, #4
 80072ec:	6021      	strge	r1, [r4, #0]
 80072ee:	b90e      	cbnz	r6, 80072f4 <_printf_i+0x114>
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d04b      	beq.n	800738c <_printf_i+0x1ac>
 80072f4:	4615      	mov	r5, r2
 80072f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072fa:	fb03 6711 	mls	r7, r3, r1, r6
 80072fe:	5dc7      	ldrb	r7, [r0, r7]
 8007300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007304:	4637      	mov	r7, r6
 8007306:	42bb      	cmp	r3, r7
 8007308:	460e      	mov	r6, r1
 800730a:	d9f4      	bls.n	80072f6 <_printf_i+0x116>
 800730c:	2b08      	cmp	r3, #8
 800730e:	d10b      	bne.n	8007328 <_printf_i+0x148>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	07de      	lsls	r6, r3, #31
 8007314:	d508      	bpl.n	8007328 <_printf_i+0x148>
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	6861      	ldr	r1, [r4, #4]
 800731a:	4299      	cmp	r1, r3
 800731c:	bfde      	ittt	le
 800731e:	2330      	movle	r3, #48	; 0x30
 8007320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007328:	1b52      	subs	r2, r2, r5
 800732a:	6122      	str	r2, [r4, #16]
 800732c:	f8cd a000 	str.w	sl, [sp]
 8007330:	464b      	mov	r3, r9
 8007332:	aa03      	add	r2, sp, #12
 8007334:	4621      	mov	r1, r4
 8007336:	4640      	mov	r0, r8
 8007338:	f7ff fee4 	bl	8007104 <_printf_common>
 800733c:	3001      	adds	r0, #1
 800733e:	d14a      	bne.n	80073d6 <_printf_i+0x1f6>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	b004      	add	sp, #16
 8007346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	f043 0320 	orr.w	r3, r3, #32
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	4833      	ldr	r0, [pc, #204]	; (8007420 <_printf_i+0x240>)
 8007354:	2778      	movs	r7, #120	; 0x78
 8007356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6829      	ldr	r1, [r5, #0]
 800735e:	061f      	lsls	r7, r3, #24
 8007360:	f851 6b04 	ldr.w	r6, [r1], #4
 8007364:	d402      	bmi.n	800736c <_printf_i+0x18c>
 8007366:	065f      	lsls	r7, r3, #25
 8007368:	bf48      	it	mi
 800736a:	b2b6      	uxthmi	r6, r6
 800736c:	07df      	lsls	r7, r3, #31
 800736e:	bf48      	it	mi
 8007370:	f043 0320 	orrmi.w	r3, r3, #32
 8007374:	6029      	str	r1, [r5, #0]
 8007376:	bf48      	it	mi
 8007378:	6023      	strmi	r3, [r4, #0]
 800737a:	b91e      	cbnz	r6, 8007384 <_printf_i+0x1a4>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	f023 0320 	bic.w	r3, r3, #32
 8007382:	6023      	str	r3, [r4, #0]
 8007384:	2310      	movs	r3, #16
 8007386:	e7a7      	b.n	80072d8 <_printf_i+0xf8>
 8007388:	4824      	ldr	r0, [pc, #144]	; (800741c <_printf_i+0x23c>)
 800738a:	e7e4      	b.n	8007356 <_printf_i+0x176>
 800738c:	4615      	mov	r5, r2
 800738e:	e7bd      	b.n	800730c <_printf_i+0x12c>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	6826      	ldr	r6, [r4, #0]
 8007394:	6961      	ldr	r1, [r4, #20]
 8007396:	1d18      	adds	r0, r3, #4
 8007398:	6028      	str	r0, [r5, #0]
 800739a:	0635      	lsls	r5, r6, #24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	d501      	bpl.n	80073a4 <_printf_i+0x1c4>
 80073a0:	6019      	str	r1, [r3, #0]
 80073a2:	e002      	b.n	80073aa <_printf_i+0x1ca>
 80073a4:	0670      	lsls	r0, r6, #25
 80073a6:	d5fb      	bpl.n	80073a0 <_printf_i+0x1c0>
 80073a8:	8019      	strh	r1, [r3, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	4615      	mov	r5, r2
 80073b0:	e7bc      	b.n	800732c <_printf_i+0x14c>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	602a      	str	r2, [r5, #0]
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	2100      	movs	r1, #0
 80073be:	4628      	mov	r0, r5
 80073c0:	f7f8 ff0e 	bl	80001e0 <memchr>
 80073c4:	b108      	cbz	r0, 80073ca <_printf_i+0x1ea>
 80073c6:	1b40      	subs	r0, r0, r5
 80073c8:	6060      	str	r0, [r4, #4]
 80073ca:	6863      	ldr	r3, [r4, #4]
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	2300      	movs	r3, #0
 80073d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d4:	e7aa      	b.n	800732c <_printf_i+0x14c>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	462a      	mov	r2, r5
 80073da:	4649      	mov	r1, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	47d0      	blx	sl
 80073e0:	3001      	adds	r0, #1
 80073e2:	d0ad      	beq.n	8007340 <_printf_i+0x160>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	079b      	lsls	r3, r3, #30
 80073e8:	d413      	bmi.n	8007412 <_printf_i+0x232>
 80073ea:	68e0      	ldr	r0, [r4, #12]
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	4298      	cmp	r0, r3
 80073f0:	bfb8      	it	lt
 80073f2:	4618      	movlt	r0, r3
 80073f4:	e7a6      	b.n	8007344 <_printf_i+0x164>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4632      	mov	r2, r6
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	47d0      	blx	sl
 8007400:	3001      	adds	r0, #1
 8007402:	d09d      	beq.n	8007340 <_printf_i+0x160>
 8007404:	3501      	adds	r5, #1
 8007406:	68e3      	ldr	r3, [r4, #12]
 8007408:	9903      	ldr	r1, [sp, #12]
 800740a:	1a5b      	subs	r3, r3, r1
 800740c:	42ab      	cmp	r3, r5
 800740e:	dcf2      	bgt.n	80073f6 <_printf_i+0x216>
 8007410:	e7eb      	b.n	80073ea <_printf_i+0x20a>
 8007412:	2500      	movs	r5, #0
 8007414:	f104 0619 	add.w	r6, r4, #25
 8007418:	e7f5      	b.n	8007406 <_printf_i+0x226>
 800741a:	bf00      	nop
 800741c:	08007d62 	.word	0x08007d62
 8007420:	08007d73 	.word	0x08007d73

08007424 <__sflush_r>:
 8007424:	898a      	ldrh	r2, [r1, #12]
 8007426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742a:	4605      	mov	r5, r0
 800742c:	0710      	lsls	r0, r2, #28
 800742e:	460c      	mov	r4, r1
 8007430:	d458      	bmi.n	80074e4 <__sflush_r+0xc0>
 8007432:	684b      	ldr	r3, [r1, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	dc05      	bgt.n	8007444 <__sflush_r+0x20>
 8007438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc02      	bgt.n	8007444 <__sflush_r+0x20>
 800743e:	2000      	movs	r0, #0
 8007440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007446:	2e00      	cmp	r6, #0
 8007448:	d0f9      	beq.n	800743e <__sflush_r+0x1a>
 800744a:	2300      	movs	r3, #0
 800744c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007450:	682f      	ldr	r7, [r5, #0]
 8007452:	6a21      	ldr	r1, [r4, #32]
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	d032      	beq.n	80074be <__sflush_r+0x9a>
 8007458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	075a      	lsls	r2, r3, #29
 800745e:	d505      	bpl.n	800746c <__sflush_r+0x48>
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	1ac0      	subs	r0, r0, r3
 8007464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007466:	b10b      	cbz	r3, 800746c <__sflush_r+0x48>
 8007468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800746a:	1ac0      	subs	r0, r0, r3
 800746c:	2300      	movs	r3, #0
 800746e:	4602      	mov	r2, r0
 8007470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007472:	6a21      	ldr	r1, [r4, #32]
 8007474:	4628      	mov	r0, r5
 8007476:	47b0      	blx	r6
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	d106      	bne.n	800748c <__sflush_r+0x68>
 800747e:	6829      	ldr	r1, [r5, #0]
 8007480:	291d      	cmp	r1, #29
 8007482:	d82b      	bhi.n	80074dc <__sflush_r+0xb8>
 8007484:	4a29      	ldr	r2, [pc, #164]	; (800752c <__sflush_r+0x108>)
 8007486:	410a      	asrs	r2, r1
 8007488:	07d6      	lsls	r6, r2, #31
 800748a:	d427      	bmi.n	80074dc <__sflush_r+0xb8>
 800748c:	2200      	movs	r2, #0
 800748e:	6062      	str	r2, [r4, #4]
 8007490:	04d9      	lsls	r1, r3, #19
 8007492:	6922      	ldr	r2, [r4, #16]
 8007494:	6022      	str	r2, [r4, #0]
 8007496:	d504      	bpl.n	80074a2 <__sflush_r+0x7e>
 8007498:	1c42      	adds	r2, r0, #1
 800749a:	d101      	bne.n	80074a0 <__sflush_r+0x7c>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b903      	cbnz	r3, 80074a2 <__sflush_r+0x7e>
 80074a0:	6560      	str	r0, [r4, #84]	; 0x54
 80074a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a4:	602f      	str	r7, [r5, #0]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d0c9      	beq.n	800743e <__sflush_r+0x1a>
 80074aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d002      	beq.n	80074b8 <__sflush_r+0x94>
 80074b2:	4628      	mov	r0, r5
 80074b4:	f7ff fbd6 	bl	8006c64 <_free_r>
 80074b8:	2000      	movs	r0, #0
 80074ba:	6360      	str	r0, [r4, #52]	; 0x34
 80074bc:	e7c0      	b.n	8007440 <__sflush_r+0x1c>
 80074be:	2301      	movs	r3, #1
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b0      	blx	r6
 80074c4:	1c41      	adds	r1, r0, #1
 80074c6:	d1c8      	bne.n	800745a <__sflush_r+0x36>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c5      	beq.n	800745a <__sflush_r+0x36>
 80074ce:	2b1d      	cmp	r3, #29
 80074d0:	d001      	beq.n	80074d6 <__sflush_r+0xb2>
 80074d2:	2b16      	cmp	r3, #22
 80074d4:	d101      	bne.n	80074da <__sflush_r+0xb6>
 80074d6:	602f      	str	r7, [r5, #0]
 80074d8:	e7b1      	b.n	800743e <__sflush_r+0x1a>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	e7ad      	b.n	8007440 <__sflush_r+0x1c>
 80074e4:	690f      	ldr	r7, [r1, #16]
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	d0a9      	beq.n	800743e <__sflush_r+0x1a>
 80074ea:	0793      	lsls	r3, r2, #30
 80074ec:	680e      	ldr	r6, [r1, #0]
 80074ee:	bf08      	it	eq
 80074f0:	694b      	ldreq	r3, [r1, #20]
 80074f2:	600f      	str	r7, [r1, #0]
 80074f4:	bf18      	it	ne
 80074f6:	2300      	movne	r3, #0
 80074f8:	eba6 0807 	sub.w	r8, r6, r7
 80074fc:	608b      	str	r3, [r1, #8]
 80074fe:	f1b8 0f00 	cmp.w	r8, #0
 8007502:	dd9c      	ble.n	800743e <__sflush_r+0x1a>
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007508:	4643      	mov	r3, r8
 800750a:	463a      	mov	r2, r7
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	2800      	cmp	r0, #0
 8007512:	dc06      	bgt.n	8007522 <__sflush_r+0xfe>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	e78e      	b.n	8007440 <__sflush_r+0x1c>
 8007522:	4407      	add	r7, r0
 8007524:	eba8 0800 	sub.w	r8, r8, r0
 8007528:	e7e9      	b.n	80074fe <__sflush_r+0xda>
 800752a:	bf00      	nop
 800752c:	dfbffffe 	.word	0xdfbffffe

08007530 <_fflush_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b913      	cbnz	r3, 8007540 <_fflush_r+0x10>
 800753a:	2500      	movs	r5, #0
 800753c:	4628      	mov	r0, r5
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	b118      	cbz	r0, 800754a <_fflush_r+0x1a>
 8007542:	6a03      	ldr	r3, [r0, #32]
 8007544:	b90b      	cbnz	r3, 800754a <_fflush_r+0x1a>
 8007546:	f7ff f979 	bl	800683c <__sinit>
 800754a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f3      	beq.n	800753a <_fflush_r+0xa>
 8007552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007554:	07d0      	lsls	r0, r2, #31
 8007556:	d404      	bmi.n	8007562 <_fflush_r+0x32>
 8007558:	0599      	lsls	r1, r3, #22
 800755a:	d402      	bmi.n	8007562 <_fflush_r+0x32>
 800755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800755e:	f7ff fb70 	bl	8006c42 <__retarget_lock_acquire_recursive>
 8007562:	4628      	mov	r0, r5
 8007564:	4621      	mov	r1, r4
 8007566:	f7ff ff5d 	bl	8007424 <__sflush_r>
 800756a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800756c:	07da      	lsls	r2, r3, #31
 800756e:	4605      	mov	r5, r0
 8007570:	d4e4      	bmi.n	800753c <_fflush_r+0xc>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	059b      	lsls	r3, r3, #22
 8007576:	d4e1      	bmi.n	800753c <_fflush_r+0xc>
 8007578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757a:	f7ff fb63 	bl	8006c44 <__retarget_lock_release_recursive>
 800757e:	e7dd      	b.n	800753c <_fflush_r+0xc>

08007580 <__swhatbuf_r>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	460c      	mov	r4, r1
 8007584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007588:	2900      	cmp	r1, #0
 800758a:	b096      	sub	sp, #88	; 0x58
 800758c:	4615      	mov	r5, r2
 800758e:	461e      	mov	r6, r3
 8007590:	da0d      	bge.n	80075ae <__swhatbuf_r+0x2e>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007598:	f04f 0100 	mov.w	r1, #0
 800759c:	bf0c      	ite	eq
 800759e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075a2:	2340      	movne	r3, #64	; 0x40
 80075a4:	2000      	movs	r0, #0
 80075a6:	6031      	str	r1, [r6, #0]
 80075a8:	602b      	str	r3, [r5, #0]
 80075aa:	b016      	add	sp, #88	; 0x58
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	466a      	mov	r2, sp
 80075b0:	f000 f862 	bl	8007678 <_fstat_r>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	dbec      	blt.n	8007592 <__swhatbuf_r+0x12>
 80075b8:	9901      	ldr	r1, [sp, #4]
 80075ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075c2:	4259      	negs	r1, r3
 80075c4:	4159      	adcs	r1, r3
 80075c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ca:	e7eb      	b.n	80075a4 <__swhatbuf_r+0x24>

080075cc <__smakebuf_r>:
 80075cc:	898b      	ldrh	r3, [r1, #12]
 80075ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075d0:	079d      	lsls	r5, r3, #30
 80075d2:	4606      	mov	r6, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	d507      	bpl.n	80075e8 <__smakebuf_r+0x1c>
 80075d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	6123      	str	r3, [r4, #16]
 80075e0:	2301      	movs	r3, #1
 80075e2:	6163      	str	r3, [r4, #20]
 80075e4:	b002      	add	sp, #8
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	ab01      	add	r3, sp, #4
 80075ea:	466a      	mov	r2, sp
 80075ec:	f7ff ffc8 	bl	8007580 <__swhatbuf_r>
 80075f0:	9900      	ldr	r1, [sp, #0]
 80075f2:	4605      	mov	r5, r0
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fba1 	bl	8006d3c <_malloc_r>
 80075fa:	b948      	cbnz	r0, 8007610 <__smakebuf_r+0x44>
 80075fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007600:	059a      	lsls	r2, r3, #22
 8007602:	d4ef      	bmi.n	80075e4 <__smakebuf_r+0x18>
 8007604:	f023 0303 	bic.w	r3, r3, #3
 8007608:	f043 0302 	orr.w	r3, r3, #2
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	e7e3      	b.n	80075d8 <__smakebuf_r+0xc>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	6020      	str	r0, [r4, #0]
 8007614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	9b00      	ldr	r3, [sp, #0]
 800761c:	6163      	str	r3, [r4, #20]
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	6120      	str	r0, [r4, #16]
 8007622:	b15b      	cbz	r3, 800763c <__smakebuf_r+0x70>
 8007624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f837 	bl	800769c <_isatty_r>
 800762e:	b128      	cbz	r0, 800763c <__smakebuf_r+0x70>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	431d      	orrs	r5, r3
 8007640:	81a5      	strh	r5, [r4, #12]
 8007642:	e7cf      	b.n	80075e4 <__smakebuf_r+0x18>

08007644 <memmove>:
 8007644:	4288      	cmp	r0, r1
 8007646:	b510      	push	{r4, lr}
 8007648:	eb01 0402 	add.w	r4, r1, r2
 800764c:	d902      	bls.n	8007654 <memmove+0x10>
 800764e:	4284      	cmp	r4, r0
 8007650:	4623      	mov	r3, r4
 8007652:	d807      	bhi.n	8007664 <memmove+0x20>
 8007654:	1e43      	subs	r3, r0, #1
 8007656:	42a1      	cmp	r1, r4
 8007658:	d008      	beq.n	800766c <memmove+0x28>
 800765a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800765e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007662:	e7f8      	b.n	8007656 <memmove+0x12>
 8007664:	4402      	add	r2, r0
 8007666:	4601      	mov	r1, r0
 8007668:	428a      	cmp	r2, r1
 800766a:	d100      	bne.n	800766e <memmove+0x2a>
 800766c:	bd10      	pop	{r4, pc}
 800766e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007676:	e7f7      	b.n	8007668 <memmove+0x24>

08007678 <_fstat_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d07      	ldr	r5, [pc, #28]	; (8007698 <_fstat_r+0x20>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	f7fa f8ae 	bl	80017e6 <_fstat>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	d102      	bne.n	8007694 <_fstat_r+0x1c>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	b103      	cbz	r3, 8007694 <_fstat_r+0x1c>
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	20013128 	.word	0x20013128

0800769c <_isatty_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d06      	ldr	r5, [pc, #24]	; (80076b8 <_isatty_r+0x1c>)
 80076a0:	2300      	movs	r3, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7fa f8ad 	bl	8001806 <_isatty>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_isatty_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_isatty_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20013128 	.word	0x20013128

080076bc <_sbrk_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d06      	ldr	r5, [pc, #24]	; (80076d8 <_sbrk_r+0x1c>)
 80076c0:	2300      	movs	r3, #0
 80076c2:	4604      	mov	r4, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	f000 fa44 	bl	8007b54 <_sbrk>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_sbrk_r+0x1a>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_sbrk_r+0x1a>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20013128 	.word	0x20013128

080076dc <_realloc_r>:
 80076dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e0:	4680      	mov	r8, r0
 80076e2:	4614      	mov	r4, r2
 80076e4:	460e      	mov	r6, r1
 80076e6:	b921      	cbnz	r1, 80076f2 <_realloc_r+0x16>
 80076e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	4611      	mov	r1, r2
 80076ee:	f7ff bb25 	b.w	8006d3c <_malloc_r>
 80076f2:	b92a      	cbnz	r2, 8007700 <_realloc_r+0x24>
 80076f4:	f7ff fab6 	bl	8006c64 <_free_r>
 80076f8:	4625      	mov	r5, r4
 80076fa:	4628      	mov	r0, r5
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	f000 f81b 	bl	800773a <_malloc_usable_size_r>
 8007704:	4284      	cmp	r4, r0
 8007706:	4607      	mov	r7, r0
 8007708:	d802      	bhi.n	8007710 <_realloc_r+0x34>
 800770a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800770e:	d812      	bhi.n	8007736 <_realloc_r+0x5a>
 8007710:	4621      	mov	r1, r4
 8007712:	4640      	mov	r0, r8
 8007714:	f7ff fb12 	bl	8006d3c <_malloc_r>
 8007718:	4605      	mov	r5, r0
 800771a:	2800      	cmp	r0, #0
 800771c:	d0ed      	beq.n	80076fa <_realloc_r+0x1e>
 800771e:	42bc      	cmp	r4, r7
 8007720:	4622      	mov	r2, r4
 8007722:	4631      	mov	r1, r6
 8007724:	bf28      	it	cs
 8007726:	463a      	movcs	r2, r7
 8007728:	f7ff fa8d 	bl	8006c46 <memcpy>
 800772c:	4631      	mov	r1, r6
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fa98 	bl	8006c64 <_free_r>
 8007734:	e7e1      	b.n	80076fa <_realloc_r+0x1e>
 8007736:	4635      	mov	r5, r6
 8007738:	e7df      	b.n	80076fa <_realloc_r+0x1e>

0800773a <_malloc_usable_size_r>:
 800773a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773e:	1f18      	subs	r0, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfbc      	itt	lt
 8007744:	580b      	ldrlt	r3, [r1, r0]
 8007746:	18c0      	addlt	r0, r0, r3
 8007748:	4770      	bx	lr
 800774a:	0000      	movs	r0, r0
 800774c:	0000      	movs	r0, r0
	...

08007750 <log>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	ed2d 8b02 	vpush	{d8}
 8007756:	ec55 4b10 	vmov	r4, r5, d0
 800775a:	f000 f841 	bl	80077e0 <__ieee754_log>
 800775e:	4622      	mov	r2, r4
 8007760:	462b      	mov	r3, r5
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	eeb0 8a40 	vmov.f32	s16, s0
 800776a:	eef0 8a60 	vmov.f32	s17, s1
 800776e:	f7f9 f9dd 	bl	8000b2c <__aeabi_dcmpun>
 8007772:	b998      	cbnz	r0, 800779c <log+0x4c>
 8007774:	2200      	movs	r2, #0
 8007776:	2300      	movs	r3, #0
 8007778:	4620      	mov	r0, r4
 800777a:	4629      	mov	r1, r5
 800777c:	f7f9 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8007780:	b960      	cbnz	r0, 800779c <log+0x4c>
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	f7f9 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800778e:	b160      	cbz	r0, 80077aa <log+0x5a>
 8007790:	f7ff fa2c 	bl	8006bec <__errno>
 8007794:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80077c0 <log+0x70>
 8007798:	2322      	movs	r3, #34	; 0x22
 800779a:	6003      	str	r3, [r0, #0]
 800779c:	eeb0 0a48 	vmov.f32	s0, s16
 80077a0:	eef0 0a68 	vmov.f32	s1, s17
 80077a4:	ecbd 8b02 	vpop	{d8}
 80077a8:	bd38      	pop	{r3, r4, r5, pc}
 80077aa:	f7ff fa1f 	bl	8006bec <__errno>
 80077ae:	ecbd 8b02 	vpop	{d8}
 80077b2:	2321      	movs	r3, #33	; 0x21
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ba:	4803      	ldr	r0, [pc, #12]	; (80077c8 <log+0x78>)
 80077bc:	f000 b808 	b.w	80077d0 <nan>
 80077c0:	00000000 	.word	0x00000000
 80077c4:	fff00000 	.word	0xfff00000
 80077c8:	08007d56 	.word	0x08007d56
 80077cc:	00000000 	.word	0x00000000

080077d0 <nan>:
 80077d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80077d8 <nan+0x8>
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	00000000 	.word	0x00000000
 80077dc:	7ff80000 	.word	0x7ff80000

080077e0 <__ieee754_log>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	ec51 0b10 	vmov	r0, r1, d0
 80077e8:	ed2d 8b04 	vpush	{d8-d9}
 80077ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80077f0:	b083      	sub	sp, #12
 80077f2:	460d      	mov	r5, r1
 80077f4:	da29      	bge.n	800784a <__ieee754_log+0x6a>
 80077f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077fa:	4303      	orrs	r3, r0
 80077fc:	ee10 2a10 	vmov	r2, s0
 8007800:	d10c      	bne.n	800781c <__ieee754_log+0x3c>
 8007802:	49cf      	ldr	r1, [pc, #828]	; (8007b40 <__ieee754_log+0x360>)
 8007804:	2200      	movs	r2, #0
 8007806:	2300      	movs	r3, #0
 8007808:	2000      	movs	r0, #0
 800780a:	f7f9 f81f 	bl	800084c <__aeabi_ddiv>
 800780e:	ec41 0b10 	vmov	d0, r0, r1
 8007812:	b003      	add	sp, #12
 8007814:	ecbd 8b04 	vpop	{d8-d9}
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	2900      	cmp	r1, #0
 800781e:	da05      	bge.n	800782c <__ieee754_log+0x4c>
 8007820:	460b      	mov	r3, r1
 8007822:	f7f8 fd31 	bl	8000288 <__aeabi_dsub>
 8007826:	2200      	movs	r2, #0
 8007828:	2300      	movs	r3, #0
 800782a:	e7ee      	b.n	800780a <__ieee754_log+0x2a>
 800782c:	4bc5      	ldr	r3, [pc, #788]	; (8007b44 <__ieee754_log+0x364>)
 800782e:	2200      	movs	r2, #0
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007838:	460d      	mov	r5, r1
 800783a:	4ac3      	ldr	r2, [pc, #780]	; (8007b48 <__ieee754_log+0x368>)
 800783c:	4295      	cmp	r5, r2
 800783e:	dd06      	ble.n	800784e <__ieee754_log+0x6e>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	f7f8 fd22 	bl	800028c <__adddf3>
 8007848:	e7e1      	b.n	800780e <__ieee754_log+0x2e>
 800784a:	2300      	movs	r3, #0
 800784c:	e7f5      	b.n	800783a <__ieee754_log+0x5a>
 800784e:	152c      	asrs	r4, r5, #20
 8007850:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007854:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007858:	441c      	add	r4, r3
 800785a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800785e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007866:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800786a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800786e:	ea42 0105 	orr.w	r1, r2, r5
 8007872:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007876:	2200      	movs	r2, #0
 8007878:	4bb4      	ldr	r3, [pc, #720]	; (8007b4c <__ieee754_log+0x36c>)
 800787a:	f7f8 fd05 	bl	8000288 <__aeabi_dsub>
 800787e:	1cab      	adds	r3, r5, #2
 8007880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007884:	2b02      	cmp	r3, #2
 8007886:	4682      	mov	sl, r0
 8007888:	468b      	mov	fp, r1
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	dc53      	bgt.n	8007938 <__ieee754_log+0x158>
 8007890:	2300      	movs	r3, #0
 8007892:	f7f9 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8007896:	b1d0      	cbz	r0, 80078ce <__ieee754_log+0xee>
 8007898:	2c00      	cmp	r4, #0
 800789a:	f000 8122 	beq.w	8007ae2 <__ieee754_log+0x302>
 800789e:	4620      	mov	r0, r4
 80078a0:	f7f8 fe40 	bl	8000524 <__aeabi_i2d>
 80078a4:	a390      	add	r3, pc, #576	; (adr r3, 8007ae8 <__ieee754_log+0x308>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	4606      	mov	r6, r0
 80078ac:	460f      	mov	r7, r1
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	a38f      	add	r3, pc, #572	; (adr r3, 8007af0 <__ieee754_log+0x310>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f8 fe9a 	bl	80005f8 <__aeabi_dmul>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4620      	mov	r0, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	e7ba      	b.n	8007844 <__ieee754_log+0x64>
 80078ce:	a38a      	add	r3, pc, #552	; (adr r3, 8007af8 <__ieee754_log+0x318>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	4650      	mov	r0, sl
 80078d6:	4659      	mov	r1, fp
 80078d8:	f7f8 fe8e 	bl	80005f8 <__aeabi_dmul>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	2000      	movs	r0, #0
 80078e2:	499b      	ldr	r1, [pc, #620]	; (8007b50 <__ieee754_log+0x370>)
 80078e4:	f7f8 fcd0 	bl	8000288 <__aeabi_dsub>
 80078e8:	4652      	mov	r2, sl
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	465b      	mov	r3, fp
 80078f0:	4650      	mov	r0, sl
 80078f2:	4659      	mov	r1, fp
 80078f4:	f7f8 fe80 	bl	80005f8 <__aeabi_dmul>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4630      	mov	r0, r6
 80078fe:	4639      	mov	r1, r7
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	b914      	cbnz	r4, 8007910 <__ieee754_log+0x130>
 800790a:	4632      	mov	r2, r6
 800790c:	463b      	mov	r3, r7
 800790e:	e0a2      	b.n	8007a56 <__ieee754_log+0x276>
 8007910:	4620      	mov	r0, r4
 8007912:	f7f8 fe07 	bl	8000524 <__aeabi_i2d>
 8007916:	a374      	add	r3, pc, #464	; (adr r3, 8007ae8 <__ieee754_log+0x308>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	4680      	mov	r8, r0
 800791e:	4689      	mov	r9, r1
 8007920:	f7f8 fe6a 	bl	80005f8 <__aeabi_dmul>
 8007924:	a372      	add	r3, pc, #456	; (adr r3, 8007af0 <__ieee754_log+0x310>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	4640      	mov	r0, r8
 8007930:	4649      	mov	r1, r9
 8007932:	f7f8 fe61 	bl	80005f8 <__aeabi_dmul>
 8007936:	e0a7      	b.n	8007a88 <__ieee754_log+0x2a8>
 8007938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800793c:	f7f8 fca6 	bl	800028c <__adddf3>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4650      	mov	r0, sl
 8007946:	4659      	mov	r1, fp
 8007948:	f7f8 ff80 	bl	800084c <__aeabi_ddiv>
 800794c:	ec41 0b18 	vmov	d8, r0, r1
 8007950:	4620      	mov	r0, r4
 8007952:	f7f8 fde7 	bl	8000524 <__aeabi_i2d>
 8007956:	ec53 2b18 	vmov	r2, r3, d8
 800795a:	ec41 0b19 	vmov	d9, r0, r1
 800795e:	ec51 0b18 	vmov	r0, r1, d8
 8007962:	f7f8 fe49 	bl	80005f8 <__aeabi_dmul>
 8007966:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800796a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4680      	mov	r8, r0
 8007976:	4689      	mov	r9, r1
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	a360      	add	r3, pc, #384	; (adr r3, 8007b00 <__ieee754_log+0x320>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	f7f8 fe37 	bl	80005f8 <__aeabi_dmul>
 800798a:	a35f      	add	r3, pc, #380	; (adr r3, 8007b08 <__ieee754_log+0x328>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fc7c 	bl	800028c <__adddf3>
 8007994:	4632      	mov	r2, r6
 8007996:	463b      	mov	r3, r7
 8007998:	f7f8 fe2e 	bl	80005f8 <__aeabi_dmul>
 800799c:	a35c      	add	r3, pc, #368	; (adr r3, 8007b10 <__ieee754_log+0x330>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc73 	bl	800028c <__adddf3>
 80079a6:	4632      	mov	r2, r6
 80079a8:	463b      	mov	r3, r7
 80079aa:	f7f8 fe25 	bl	80005f8 <__aeabi_dmul>
 80079ae:	a35a      	add	r3, pc, #360	; (adr r3, 8007b18 <__ieee754_log+0x338>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc6a 	bl	800028c <__adddf3>
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	f7f8 fe1c 	bl	80005f8 <__aeabi_dmul>
 80079c0:	a357      	add	r3, pc, #348	; (adr r3, 8007b20 <__ieee754_log+0x340>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	4680      	mov	r8, r0
 80079c8:	4689      	mov	r9, r1
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fe13 	bl	80005f8 <__aeabi_dmul>
 80079d2:	a355      	add	r3, pc, #340	; (adr r3, 8007b28 <__ieee754_log+0x348>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fc58 	bl	800028c <__adddf3>
 80079dc:	4632      	mov	r2, r6
 80079de:	463b      	mov	r3, r7
 80079e0:	f7f8 fe0a 	bl	80005f8 <__aeabi_dmul>
 80079e4:	a352      	add	r3, pc, #328	; (adr r3, 8007b30 <__ieee754_log+0x350>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fc4f 	bl	800028c <__adddf3>
 80079ee:	4632      	mov	r2, r6
 80079f0:	463b      	mov	r3, r7
 80079f2:	f7f8 fe01 	bl	80005f8 <__aeabi_dmul>
 80079f6:	460b      	mov	r3, r1
 80079f8:	4602      	mov	r2, r0
 80079fa:	4649      	mov	r1, r9
 80079fc:	4640      	mov	r0, r8
 80079fe:	f7f8 fc45 	bl	800028c <__adddf3>
 8007a02:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	3551      	adds	r5, #81	; 0x51
 8007a0a:	431d      	orrs	r5, r3
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	4680      	mov	r8, r0
 8007a10:	4689      	mov	r9, r1
 8007a12:	dd48      	ble.n	8007aa6 <__ieee754_log+0x2c6>
 8007a14:	4b4e      	ldr	r3, [pc, #312]	; (8007b50 <__ieee754_log+0x370>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	f7f8 fdec 	bl	80005f8 <__aeabi_dmul>
 8007a20:	4652      	mov	r2, sl
 8007a22:	465b      	mov	r3, fp
 8007a24:	f7f8 fde8 	bl	80005f8 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	460f      	mov	r7, r1
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f8 fc2a 	bl	800028c <__adddf3>
 8007a38:	ec53 2b18 	vmov	r2, r3, d8
 8007a3c:	f7f8 fddc 	bl	80005f8 <__aeabi_dmul>
 8007a40:	4680      	mov	r8, r0
 8007a42:	4689      	mov	r9, r1
 8007a44:	b964      	cbnz	r4, 8007a60 <__ieee754_log+0x280>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fc1b 	bl	8000288 <__aeabi_dsub>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4650      	mov	r0, sl
 8007a58:	4659      	mov	r1, fp
 8007a5a:	f7f8 fc15 	bl	8000288 <__aeabi_dsub>
 8007a5e:	e6d6      	b.n	800780e <__ieee754_log+0x2e>
 8007a60:	a321      	add	r3, pc, #132	; (adr r3, 8007ae8 <__ieee754_log+0x308>)
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	ec51 0b19 	vmov	r0, r1, d9
 8007a6a:	f7f8 fdc5 	bl	80005f8 <__aeabi_dmul>
 8007a6e:	a320      	add	r3, pc, #128	; (adr r3, 8007af0 <__ieee754_log+0x310>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	4604      	mov	r4, r0
 8007a76:	460d      	mov	r5, r1
 8007a78:	ec51 0b19 	vmov	r0, r1, d9
 8007a7c:	f7f8 fdbc 	bl	80005f8 <__aeabi_dmul>
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	f7f8 fc02 	bl	800028c <__adddf3>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7f8 fbfa 	bl	8000288 <__aeabi_dsub>
 8007a94:	4652      	mov	r2, sl
 8007a96:	465b      	mov	r3, fp
 8007a98:	f7f8 fbf6 	bl	8000288 <__aeabi_dsub>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	e7d9      	b.n	8007a5a <__ieee754_log+0x27a>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4650      	mov	r0, sl
 8007aac:	4659      	mov	r1, fp
 8007aae:	f7f8 fbeb 	bl	8000288 <__aeabi_dsub>
 8007ab2:	ec53 2b18 	vmov	r2, r3, d8
 8007ab6:	f7f8 fd9f 	bl	80005f8 <__aeabi_dmul>
 8007aba:	4606      	mov	r6, r0
 8007abc:	460f      	mov	r7, r1
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	f43f af23 	beq.w	800790a <__ieee754_log+0x12a>
 8007ac4:	a308      	add	r3, pc, #32	; (adr r3, 8007ae8 <__ieee754_log+0x308>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	ec51 0b19 	vmov	r0, r1, d9
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	a307      	add	r3, pc, #28	; (adr r3, 8007af0 <__ieee754_log+0x310>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	4604      	mov	r4, r0
 8007ada:	460d      	mov	r5, r1
 8007adc:	ec51 0b19 	vmov	r0, r1, d9
 8007ae0:	e727      	b.n	8007932 <__ieee754_log+0x152>
 8007ae2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007b38 <__ieee754_log+0x358>
 8007ae6:	e694      	b.n	8007812 <__ieee754_log+0x32>
 8007ae8:	fee00000 	.word	0xfee00000
 8007aec:	3fe62e42 	.word	0x3fe62e42
 8007af0:	35793c76 	.word	0x35793c76
 8007af4:	3dea39ef 	.word	0x3dea39ef
 8007af8:	55555555 	.word	0x55555555
 8007afc:	3fd55555 	.word	0x3fd55555
 8007b00:	df3e5244 	.word	0xdf3e5244
 8007b04:	3fc2f112 	.word	0x3fc2f112
 8007b08:	96cb03de 	.word	0x96cb03de
 8007b0c:	3fc74664 	.word	0x3fc74664
 8007b10:	94229359 	.word	0x94229359
 8007b14:	3fd24924 	.word	0x3fd24924
 8007b18:	55555593 	.word	0x55555593
 8007b1c:	3fe55555 	.word	0x3fe55555
 8007b20:	d078c69f 	.word	0xd078c69f
 8007b24:	3fc39a09 	.word	0x3fc39a09
 8007b28:	1d8e78af 	.word	0x1d8e78af
 8007b2c:	3fcc71c5 	.word	0x3fcc71c5
 8007b30:	9997fa04 	.word	0x9997fa04
 8007b34:	3fd99999 	.word	0x3fd99999
	...
 8007b40:	c3500000 	.word	0xc3500000
 8007b44:	43500000 	.word	0x43500000
 8007b48:	7fefffff 	.word	0x7fefffff
 8007b4c:	3ff00000 	.word	0x3ff00000
 8007b50:	3fe00000 	.word	0x3fe00000

08007b54 <_sbrk>:
 8007b54:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <_sbrk+0x14>)
 8007b56:	6811      	ldr	r1, [r2, #0]
 8007b58:	4603      	mov	r3, r0
 8007b5a:	b909      	cbnz	r1, 8007b60 <_sbrk+0xc>
 8007b5c:	4903      	ldr	r1, [pc, #12]	; (8007b6c <_sbrk+0x18>)
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	6810      	ldr	r0, [r2, #0]
 8007b62:	4403      	add	r3, r0
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	4770      	bx	lr
 8007b68:	20013138 	.word	0x20013138
 8007b6c:	20013140 	.word	0x20013140

08007b70 <_init>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr

08007b7c <_fini>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr
