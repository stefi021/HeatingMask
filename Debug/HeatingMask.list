
HeatingMask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000574c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800597c  0800597c  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  0800597c  0800597c  0000697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005984  08005984  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005984  08005984  00006984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800598c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f88  20000070  080059fc  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ff8  080059fc  00007ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c4e  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c78  00000000  00000000  00018cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cad  00000000  00000000  0001c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001884e  00000000  00000000  0001d665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b5e  00000000  00000000  00035eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f51  00000000  00000000  00048a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  000df9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e4350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058d4 	.word	0x080058d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080058d4 	.word	0x080058d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fbb0 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80a 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8fc 	bl	80006d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f8c8 	bl	8000674 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 f86e 	bl	80005c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initTasks();
 80004e8:	f003 fa2a 	bl	8003940 <initTasks>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <main+0x1c>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	@ 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	@ 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 ff2c 	bl	800535c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	@ (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	@ 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800053c:	4a20      	ldr	r2, [pc, #128]	@ (80005c0 <SystemClock_Config+0xd0>)
 800053e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000568:	2354      	movs	r3, #84	@ 0x54
 800056a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000570:	2304      	movs	r3, #4
 8000572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f000 feaf 	bl	80012dc <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000584:	f000 f904 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2102      	movs	r1, #2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f911 	bl	80017cc <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f8ee 	bl	8000790 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	@ 0x28
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_TIM2_Init+0xac>)
 80005e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_TIM2_Init+0xac>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_TIM2_Init+0xac>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_TIM2_Init+0xac>)
 80005fc:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_TIM2_Init+0xac>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_TIM2_Init+0xac>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800060e:	4818      	ldr	r0, [pc, #96]	@ (8000670 <MX_TIM2_Init+0xac>)
 8000610:	f001 fc44 	bl	8001e9c <HAL_TIM_PWM_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800061a:	f000 f8b9 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4619      	mov	r1, r3
 800062c:	4810      	ldr	r0, [pc, #64]	@ (8000670 <MX_TIM2_Init+0xac>)
 800062e:	f002 f94d 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000638:	f000 f8aa 	bl	8000790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063c:	2360      	movs	r3, #96	@ 0x60
 800063e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <MX_TIM2_Init+0xac>)
 8000654:	f001 fe12 	bl	800227c <HAL_TIM_PWM_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800065e:	f000 f897 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <MX_TIM2_Init+0xac>)
 8000664:	f000 f8e2 	bl	800082c <HAL_TIM_MspPostInit>

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000008c 	.word	0x2000008c

08000674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 800067a:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <MX_USART1_UART_Init+0x60>)
 800067c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006aa:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <MX_USART1_UART_Init+0x5c>)
 80006ac:	f002 f990 	bl	80029d0 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006b6:	f000 f86b 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2025      	movs	r0, #37	@ 0x25
 80006c0:	f000 fbb4 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006c4:	2025      	movs	r0, #37	@ 0x25
 80006c6:	f000 fbcd 	bl	8000e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000d4 	.word	0x200000d4
 80006d4:	40011000 	.word	0x40011000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <MX_GPIO_Init+0x8c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <MX_GPIO_Init+0x8c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <MX_GPIO_Init+0x8c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_GPIO_Init+0x8c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <MX_GPIO_Init+0x8c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_GPIO_Init+0x8c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_GPIO_Init+0x8c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_GPIO_Init+0x8c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000742:	231e      	movs	r3, #30
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_GPIO_Init+0x90>)
 8000756:	f000 fc25 	bl	8000fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f000 fa7d 	bl	8000c7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40000c00 	.word	0x40000c00

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <Error_Handler+0x8>

0800079c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007fc:	d10d      	bne.n	800081a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_TIM_PWM_MspInit+0x3c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_TIM_PWM_MspInit+0x3c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6413      	str	r3, [r2, #64]	@ 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_TIM_PWM_MspInit+0x3c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800084c:	d11d      	bne.n	800088a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <HAL_TIM_MspPostInit+0x68>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <HAL_TIM_MspPostInit+0x68>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_TIM_MspPostInit+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <HAL_TIM_MspPostInit+0x6c>)
 8000886:	f000 fb8d 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <HAL_UART_MspInit+0x94>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d134      	bne.n	8000928 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a14      	ldr	r2, [pc, #80]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000908:	2307      	movs	r3, #7
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4809      	ldr	r0, [pc, #36]	@ (8000938 <HAL_UART_MspInit+0x9c>)
 8000914:	f000 fb46 	bl	8000fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2025      	movs	r0, #37	@ 0x25
 800091e:	f000 fa85 	bl	8000e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000922:	2025      	movs	r0, #37	@ 0x25
 8000924:	f000 fa9e 	bl	8000e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40011000 	.word	0x40011000
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <HAL_InitTick+0xe4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a32      	ldr	r2, [pc, #200]	@ (8000a20 <HAL_InitTick+0xe4>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <HAL_InitTick+0xe4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 0308 	and.w	r3, r3, #8
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f94a 	bl	8001c0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000982:	f001 f91b 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8000986:	6378      	str	r0, [r7, #52]	@ 0x34
 8000988:	e004      	b.n	8000994 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800098a:	f001 f917 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 800098e:	4603      	mov	r3, r0
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000996:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <HAL_InitTick+0xe8>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <HAL_InitTick+0xec>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <HAL_InitTick+0xf0>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_InitTick+0xec>)
 80009aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_InitTick+0xec>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_InitTick+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_InitTick+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_InitTick+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <HAL_InitTick+0xec>)
 80009ca:	f001 f951 	bl	8001c70 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <HAL_InitTick+0xec>)
 80009de:	f001 f9fb 	bl	8001dd8 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009f0:	2032      	movs	r0, #50	@ 0x32
 80009f2:	f000 fa37 	bl	8000e64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2032      	movs	r0, #50	@ 0x32
 8000a02:	f000 fa13 	bl	8000e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_InitTick+0xf4>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3738      	adds	r7, #56	@ 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	2000011c 	.word	0x2000011c
 8000a2c:	40000c00 	.word	0x40000c00
 8000a30:	20000004 	.word	0x20000004

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <USART1_IRQHandler+0x10>)
 8000a72:	f002 f823 	bl	8002abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000d4 	.word	0x200000d4

08000a80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <TIM5_IRQHandler+0x10>)
 8000a86:	f001 fb09 	bl	800209c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000011c 	.word	0x2000011c

08000a94 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <ITM_SendChar+0x48>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000adc <ITM_SendChar+0x48>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000aa8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <ITM_SendChar+0x4c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <ITM_SendChar+0x4c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ab6:	bf00      	nop
 8000ab8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f8      	beq.n	8000ab8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ac6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000edfc 	.word	0xe000edfc
 8000ae0:	e0000e00 	.word	0xe0000e00

08000ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
  }

  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e009      	b.n	8000b44 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffab 	bl	8000a94 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf1      	blt.n	8000b30 <_write+0x12>
  }
  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_close>:

int _close(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_isatty>:

int _isatty(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be8:	f7ff ffea 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f004 fbf1 	bl	80053f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fc5b 	bl	80004d0 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c28:	0800598c 	.word	0x0800598c
  ldr r2, =_sbss
 8000c2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c30:	20012ff8 	.word	0x20012ff8

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f8d8 	bl	8000e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f7ff fe68 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fd96 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000164 	.word	0x20000164

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000164 	.word	0x20000164

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	@ (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ff4c 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3e:	f7ff ff61 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff ffb1 	bl	8000db0 <NVIC_EncodePriority>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff80 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff54 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e8e:	f7ff ff09 	bl	8000ca4 <HAL_GetTick>
 8000e92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d008      	beq.n	8000eb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e052      	b.n	8000f58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0216 	bic.w	r2, r2, #22
 8000ec0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <HAL_DMA_Abort+0x62>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d007      	beq.n	8000ef2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0208 	bic.w	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f02:	e013      	b.n	8000f2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f04:	f7ff fece 	bl	8000ca4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d90c      	bls.n	8000f2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2220      	movs	r2, #32
 8000f16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e015      	b.n	8000f58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1e4      	bne.n	8000f04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f3e:	223f      	movs	r2, #63	@ 0x3f
 8000f40:	409a      	lsls	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d004      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2280      	movs	r2, #128	@ 0x80
 8000f78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00c      	b.n	8000f98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2205      	movs	r2, #5
 8000f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0201 	bic.w	r2, r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	@ 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e159      	b.n	8001274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8148 	bne.w	800126e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a2 	beq.w	800126e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b57      	ldr	r3, [pc, #348]	@ (800128c <HAL_GPIO_Init+0x2e8>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a56      	ldr	r2, [pc, #344]	@ (800128c <HAL_GPIO_Init+0x2e8>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b54      	ldr	r3, [pc, #336]	@ (800128c <HAL_GPIO_Init+0x2e8>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <HAL_GPIO_Init+0x2ec>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a49      	ldr	r2, [pc, #292]	@ (8001294 <HAL_GPIO_Init+0x2f0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x202>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a48      	ldr	r2, [pc, #288]	@ (8001298 <HAL_GPIO_Init+0x2f4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1fe>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a47      	ldr	r2, [pc, #284]	@ (800129c <HAL_GPIO_Init+0x2f8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1fa>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <HAL_GPIO_Init+0x2fc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1f6>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a45      	ldr	r2, [pc, #276]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1f2>
 8001192:	2304      	movs	r3, #4
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 8001196:	2307      	movs	r3, #7
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x204>
 80011a6:	2300      	movs	r3, #0
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	@ (8001290 <HAL_GPIO_Init+0x2ec>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ea:	4a2f      	ldr	r2, [pc, #188]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001214:	4a24      	ldr	r2, [pc, #144]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123e:	4a1a      	ldr	r2, [pc, #104]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001268:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f aea2 	bls.w	8000fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40013c00 	.word	0x40013c00

080012ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e267      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d075      	beq.n	80013e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	4b88      	ldr	r3, [pc, #544]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b04      	cmp	r3, #4
 8001304:	d00c      	beq.n	8001320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b85      	ldr	r3, [pc, #532]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d112      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b82      	ldr	r3, [pc, #520]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800131e:	d10b      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	4b7e      	ldr	r3, [pc, #504]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d05b      	beq.n	80013e4 <HAL_RCC_OscConfig+0x108>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d157      	bne.n	80013e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e242      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x74>
 8001342:	4b76      	ldr	r3, [pc, #472]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a75      	ldr	r2, [pc, #468]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e01d      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x98>
 800135a:	4b70      	ldr	r3, [pc, #448]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6f      	ldr	r2, [pc, #444]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b6d      	ldr	r3, [pc, #436]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6c      	ldr	r2, [pc, #432]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001374:	4b69      	ldr	r3, [pc, #420]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a68      	ldr	r2, [pc, #416]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b66      	ldr	r3, [pc, #408]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fc86 	bl	8000ca4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fc82 	bl	8000ca4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	@ 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e207      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	4b5b      	ldr	r3, [pc, #364]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0xc0>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc72 	bl	8000ca4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fc6e 	bl	8000ca4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	@ 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1f3      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	4b51      	ldr	r3, [pc, #324]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0xe8>
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d063      	beq.n	80014ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b47      	ldr	r3, [pc, #284]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	2b08      	cmp	r3, #8
 8001408:	d11c      	bne.n	8001444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b44      	ldr	r3, [pc, #272]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	4b41      	ldr	r3, [pc, #260]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x152>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e1c7      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4937      	ldr	r1, [pc, #220]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e03a      	b.n	80014ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <HAL_RCC_OscConfig+0x244>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fc27 	bl	8000ca4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc23 	bl	8000ca4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1a8      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b28      	ldr	r3, [pc, #160]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4925      	ldr	r1, [pc, #148]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <HAL_RCC_OscConfig+0x244>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc06 	bl	8000ca4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fc02 	bl	8000ca4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e187      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d036      	beq.n	8001534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d016      	beq.n	80014fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_RCC_OscConfig+0x248>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fbe6 	bl	8000ca4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fbe2 	bl	8000ca4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e167      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_RCC_OscConfig+0x240>)
 80014f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x200>
 80014fa:	e01b      	b.n	8001534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_RCC_OscConfig+0x248>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbcf 	bl	8000ca4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	e00e      	b.n	8001528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fbcb 	bl	8000ca4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d907      	bls.n	8001528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e150      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
 800151c:	40023800 	.word	0x40023800
 8001520:	42470000 	.word	0x42470000
 8001524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 800152a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ea      	bne.n	800150a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8097 	beq.w	8001670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b81      	ldr	r3, [pc, #516]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10f      	bne.n	8001572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b7d      	ldr	r3, [pc, #500]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a7c      	ldr	r2, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b7a      	ldr	r3, [pc, #488]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156e:	2301      	movs	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	4b77      	ldr	r3, [pc, #476]	@ (8001750 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157e:	4b74      	ldr	r3, [pc, #464]	@ (8001750 <HAL_RCC_OscConfig+0x474>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a73      	ldr	r2, [pc, #460]	@ (8001750 <HAL_RCC_OscConfig+0x474>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb8b 	bl	8000ca4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff fb87 	bl	8000ca4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e10c      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001750 <HAL_RCC_OscConfig+0x474>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2ea>
 80015b8:	4b64      	ldr	r3, [pc, #400]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a63      	ldr	r2, [pc, #396]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c4:	e01c      	b.n	8001600 <HAL_RCC_OscConfig+0x324>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x30c>
 80015ce:	4b5f      	ldr	r3, [pc, #380]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	4a5e      	ldr	r2, [pc, #376]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015da:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	4a5b      	ldr	r2, [pc, #364]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x324>
 80015e8:	4b58      	ldr	r3, [pc, #352]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	4a57      	ldr	r2, [pc, #348]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f4:	4b55      	ldr	r3, [pc, #340]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f8:	4a54      	ldr	r2, [pc, #336]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d015      	beq.n	8001634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff fb4c 	bl	8000ca4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	e00a      	b.n	8001626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7ff fb48 	bl	8000ca4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e0cb      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	4b49      	ldr	r3, [pc, #292]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ee      	beq.n	8001610 <HAL_RCC_OscConfig+0x334>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fb36 	bl	8000ca4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163a:	e00a      	b.n	8001652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff fb32 	bl	8000ca4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0b5      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001652:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ee      	bne.n	800163c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001664:	4b39      	ldr	r3, [pc, #228]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a38      	ldr	r2, [pc, #224]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a1 	beq.w	80017bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b08      	cmp	r3, #8
 8001684:	d05c      	beq.n	8001740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d141      	bne.n	8001712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <HAL_RCC_OscConfig+0x478>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb06 	bl	8000ca4 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff fb02 	bl	8000ca4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e087      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	491b      	ldr	r1, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <HAL_RCC_OscConfig+0x478>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fadb 	bl	8000ca4 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff fad7 	bl	8000ca4 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e05c      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x416>
 8001710:	e054      	b.n	80017bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_RCC_OscConfig+0x478>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fac4 	bl	8000ca4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fac0 	bl	8000ca4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e045      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_RCC_OscConfig+0x470>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x444>
 800173e:	e03d      	b.n	80017bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e038      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
 8001754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_RCC_OscConfig+0x4ec>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d028      	beq.n	80017b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d121      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d11a      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001788:	4013      	ands	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800178e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	4293      	cmp	r3, r2
 8001792:	d111      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	3b01      	subs	r3, #1
 80017a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0cc      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d90c      	bls.n	8001808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b63      	ldr	r3, [pc, #396]	@ (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0b8      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001820:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a58      	ldr	r2, [pc, #352]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800182a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	494d      	ldr	r1, [pc, #308]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d044      	beq.n	80018ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d119      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e07f      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d003      	beq.n	800188a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	2b03      	cmp	r3, #3
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e06f      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e067      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b37      	ldr	r3, [pc, #220]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4934      	ldr	r1, [pc, #208]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f9f2 	bl	8000ca4 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f9ee 	bl	8000ca4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e04f      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d20c      	bcs.n	8001914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e032      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4916      	ldr	r1, [pc, #88]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	490e      	ldr	r1, [pc, #56]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001952:	f000 f821 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001956:	4602      	mov	r2, r0
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	490a      	ldr	r1, [pc, #40]	@ (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	5ccb      	ldrb	r3, [r1, r3]
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ffe2 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00
 8001988:	40023800 	.word	0x40023800
 800198c:	08005964 	.word	0x08005964
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800199c:	b094      	sub	sp, #80	@ 0x50
 800199e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80019a4:	2300      	movs	r3, #0
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b0:	4b79      	ldr	r3, [pc, #484]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d00d      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x40>
 80019bc:	2b08      	cmp	r3, #8
 80019be:	f200 80e1 	bhi.w	8001b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x34>
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ca:	e0db      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b73      	ldr	r3, [pc, #460]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80019ce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019d0:	e0db      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d2:	4b73      	ldr	r3, [pc, #460]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80019d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019d6:	e0d8      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	2200      	movs	r2, #0
 80019f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	462b      	mov	r3, r5
 8001a0e:	f04f 0000 	mov.w	r0, #0
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	0159      	lsls	r1, r3, #5
 8001a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a1c:	0150      	lsls	r0, r2, #5
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4621      	mov	r1, r4
 8001a24:	1a51      	subs	r1, r2, r1
 8001a26:	6139      	str	r1, [r7, #16]
 8001a28:	4629      	mov	r1, r5
 8001a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	018b      	lsls	r3, r1, #6
 8001a40:	4651      	mov	r1, sl
 8001a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a46:	4651      	mov	r1, sl
 8001a48:	018a      	lsls	r2, r1, #6
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a50:	4659      	mov	r1, fp
 8001a52:	eb63 0901 	sbc.w	r9, r3, r1
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a6a:	4690      	mov	r8, r2
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	eb18 0303 	adds.w	r3, r8, r3
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	462b      	mov	r3, r5
 8001a78:	eb49 0303 	adc.w	r3, r9, r3
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	024b      	lsls	r3, r1, #9
 8001a8e:	4621      	mov	r1, r4
 8001a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a94:	4621      	mov	r1, r4
 8001a96:	024a      	lsls	r2, r1, #9
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001aa8:	f7fe fb9a 	bl	80001e0 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ab4:	e058      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b38      	ldr	r3, [pc, #224]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	2200      	movs	r2, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	f04f 0000 	mov.w	r0, #0
 8001ad8:	f04f 0100 	mov.w	r1, #0
 8001adc:	0159      	lsls	r1, r3, #5
 8001ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae2:	0150      	lsls	r0, r2, #5
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4641      	mov	r1, r8
 8001aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aee:	4649      	mov	r1, r9
 8001af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b08:	ebb2 040a 	subs.w	r4, r2, sl
 8001b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	00eb      	lsls	r3, r5, #3
 8001b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1e:	00e2      	lsls	r2, r4, #3
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	4643      	mov	r3, r8
 8001b26:	18e3      	adds	r3, r4, r3
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	eb45 0303 	adc.w	r3, r5, r3
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3e:	4629      	mov	r1, r5
 8001b40:	028b      	lsls	r3, r1, #10
 8001b42:	4621      	mov	r1, r4
 8001b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b48:	4621      	mov	r1, r4
 8001b4a:	028a      	lsls	r2, r1, #10
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b52:	2200      	movs	r2, #0
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	61fa      	str	r2, [r7, #28]
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fb40 	bl	80001e0 <__aeabi_uldivmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4613      	mov	r3, r2
 8001b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	3301      	adds	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b82:	e002      	b.n	8001b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3750      	adds	r7, #80	@ 0x50
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200

08001ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0a9b      	lsrs	r3, r3, #10
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	@ (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08005974 	.word	0x08005974

08001be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be8:	f7ff ffdc 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0b5b      	lsrs	r3, r3, #13
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	@ (8001c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08005974 	.word	0x08005974

08001c0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	220f      	movs	r2, #15
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <HAL_RCC_GetClockConfig+0x60>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0207 	and.w	r2, r3, #7
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40023c00 	.word	0x40023c00

08001c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e041      	b.n	8001d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f839 	bl	8001d0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 fbce 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d001      	beq.n	8001d3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e03c      	b.n	8001db6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc4 <HAL_TIM_Base_Start+0xa0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d018      	beq.n	8001d80 <HAL_TIM_Base_Start+0x5c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d013      	beq.n	8001d80 <HAL_TIM_Base_Start+0x5c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc8 <HAL_TIM_Base_Start+0xa4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <HAL_TIM_Base_Start+0x5c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_TIM_Base_Start+0xa8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_TIM_Base_Start+0x5c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <HAL_TIM_Base_Start+0xac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_TIM_Base_Start+0x5c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <HAL_TIM_Base_Start+0xb0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d111      	bne.n	8001da4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d010      	beq.n	8001db4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da2:	e007      	b.n	8001db4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40000c00 	.word	0x40000c00
 8001dd4:	40014000 	.word	0x40014000

08001dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d001      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e044      	b.n	8001e7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d018      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d013      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1a      	ldr	r2, [pc, #104]	@ (8001e8c <HAL_TIM_Base_Start_IT+0xb4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00e      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d009      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d004      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x6c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a16      	ldr	r2, [pc, #88]	@ (8001e98 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d010      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e66:	e007      	b.n	8001e78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40000800 	.word	0x40000800
 8001e94:	40000c00 	.word	0x40000c00
 8001e98:	40014000 	.word	0x40014000

08001e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e041      	b.n	8001f32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fc92 	bl	80007ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 fab8 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_TIM_PWM_Start+0x24>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e022      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x6a>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d109      	bne.n	8001f7a <HAL_TIM_PWM_Start+0x3e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e015      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x6a>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d109      	bne.n	8001f94 <HAL_TIM_PWM_Start+0x58>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e008      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x6a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e068      	b.n	8002080 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_PWM_Start+0x82>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fbc:	e013      	b.n	8001fe6 <HAL_TIM_PWM_Start+0xaa>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d104      	bne.n	8001fce <HAL_TIM_PWM_Start+0x92>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fcc:	e00b      	b.n	8001fe6 <HAL_TIM_PWM_Start+0xaa>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_PWM_Start+0xa2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fdc:	e003      	b.n	8001fe6 <HAL_TIM_PWM_Start+0xaa>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fc46 	bl	8002880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_TIM_PWM_Start+0x14c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d107      	bne.n	800200e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_TIM_PWM_Start+0x14c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d018      	beq.n	800204a <HAL_TIM_PWM_Start+0x10e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002020:	d013      	beq.n	800204a <HAL_TIM_PWM_Start+0x10e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_TIM_PWM_Start+0x150>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00e      	beq.n	800204a <HAL_TIM_PWM_Start+0x10e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <HAL_TIM_PWM_Start+0x154>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_TIM_PWM_Start+0x10e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_TIM_PWM_Start+0x158>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_TIM_PWM_Start+0x10e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_TIM_PWM_Start+0x15c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b06      	cmp	r3, #6
 800205a:	d010      	beq.n	800207e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206c:	e007      	b.n	800207e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40010000 	.word	0x40010000
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800
 8002094:	40000c00 	.word	0x40000c00
 8002098:	40014000 	.word	0x40014000

0800209c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d020      	beq.n	8002100 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0202 	mvn.w	r2, #2
 80020d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f994 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f986 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f997 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d020      	beq.n	800214c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0204 	mvn.w	r2, #4
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f96e 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f960 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f971 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d020      	beq.n	8002198 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0208 	mvn.w	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f948 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f93a 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f94b 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0210 	mvn.w	r2, #16
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2208      	movs	r2, #8
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f922 	bl	8002414 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f914 	bl	8002400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f925 	bl	8002428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0201 	mvn.w	r2, #1
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fab2 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fbc8 	bl	80029bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8f6 	bl	800243c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0220 	mvn.w	r2, #32
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fb9a 	bl	80029a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002296:	2302      	movs	r3, #2
 8002298:	e0ae      	b.n	80023f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	f200 809f 	bhi.w	80023e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022aa:	a201      	add	r2, pc, #4	@ (adr r2, 80022b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	080022e5 	.word	0x080022e5
 80022b4:	080023e9 	.word	0x080023e9
 80022b8:	080023e9 	.word	0x080023e9
 80022bc:	080023e9 	.word	0x080023e9
 80022c0:	08002325 	.word	0x08002325
 80022c4:	080023e9 	.word	0x080023e9
 80022c8:	080023e9 	.word	0x080023e9
 80022cc:	080023e9 	.word	0x080023e9
 80022d0:	08002367 	.word	0x08002367
 80022d4:	080023e9 	.word	0x080023e9
 80022d8:	080023e9 	.word	0x080023e9
 80022dc:	080023e9 	.word	0x080023e9
 80022e0:	080023a7 	.word	0x080023a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f93c 	bl	8002568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0208 	orr.w	r2, r2, #8
 80022fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6999      	ldr	r1, [r3, #24]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	619a      	str	r2, [r3, #24]
      break;
 8002322:	e064      	b.n	80023ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f982 	bl	8002634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6999      	ldr	r1, [r3, #24]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	021a      	lsls	r2, r3, #8
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	619a      	str	r2, [r3, #24]
      break;
 8002364:	e043      	b.n	80023ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f9cd 	bl	800270c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0208 	orr.w	r2, r2, #8
 8002380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0204 	bic.w	r2, r2, #4
 8002390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69d9      	ldr	r1, [r3, #28]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	61da      	str	r2, [r3, #28]
      break;
 80023a4:	e023      	b.n	80023ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fa17 	bl	80027e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69d9      	ldr	r1, [r3, #28]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	61da      	str	r2, [r3, #28]
      break;
 80023e6:	e002      	b.n	80023ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
      break;
 80023ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <TIM_Base_SetConfig+0xfc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00f      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246e:	d00b      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a37      	ldr	r2, [pc, #220]	@ (8002550 <TIM_Base_SetConfig+0x100>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a36      	ldr	r2, [pc, #216]	@ (8002554 <TIM_Base_SetConfig+0x104>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <TIM_Base_SetConfig+0x38>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a35      	ldr	r2, [pc, #212]	@ (8002558 <TIM_Base_SetConfig+0x108>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d108      	bne.n	800249a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800248e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <TIM_Base_SetConfig+0xfc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01b      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a8:	d017      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <TIM_Base_SetConfig+0x100>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <TIM_Base_SetConfig+0x104>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00f      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a26      	ldr	r2, [pc, #152]	@ (8002558 <TIM_Base_SetConfig+0x108>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00b      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a25      	ldr	r2, [pc, #148]	@ (800255c <TIM_Base_SetConfig+0x10c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <TIM_Base_SetConfig+0x110>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_Base_SetConfig+0x8a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a23      	ldr	r2, [pc, #140]	@ (8002564 <TIM_Base_SetConfig+0x114>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0e      	ldr	r2, [pc, #56]	@ (800254c <TIM_Base_SetConfig+0xfc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f023 0201 	bic.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]
  }
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40010000 	.word	0x40010000
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800
 8002558:	40000c00 	.word	0x40000c00
 800255c:	40014000 	.word	0x40014000
 8002560:	40014400 	.word	0x40014400
 8002564:	40014800 	.word	0x40014800

08002568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f023 0201 	bic.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 0302 	bic.w	r3, r3, #2
 80025b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1c      	ldr	r2, [pc, #112]	@ (8002630 <TIM_OC1_SetConfig+0xc8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10c      	bne.n	80025de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0308 	bic.w	r3, r3, #8
 80025ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <TIM_OC1_SetConfig+0xc8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40010000 	.word	0x40010000

08002634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f023 0210 	bic.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800266a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f023 0320 	bic.w	r3, r3, #32
 800267e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <TIM_OC2_SetConfig+0xd4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10d      	bne.n	80026b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800269a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <TIM_OC2_SetConfig+0xd4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d113      	bne.n	80026e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40010000 	.word	0x40010000

0800270c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <TIM_OC3_SetConfig+0xd0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10d      	bne.n	8002786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <TIM_OC3_SetConfig+0xd0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800279c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40010000 	.word	0x40010000

080027e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800280e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800282a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a10      	ldr	r2, [pc, #64]	@ (800287c <TIM_OC4_SetConfig+0x9c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d109      	bne.n	8002854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40010000 	.word	0x40010000

08002880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e050      	b.n	8002986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002930:	d013      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a16      	ldr	r2, [pc, #88]	@ (800299c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a15      	ldr	r2, [pc, #84]	@ (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a13      	ldr	r2, [pc, #76]	@ (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10c      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40014000 	.word	0x40014000

080029a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e042      	b.n	8002a68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fd ff50 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	@ 0x24
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fcdb 	bl	80033d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d112      	bne.n	8002ab0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_UART_Receive_IT+0x26>
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00b      	b.n	8002ab2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 faba 	bl	8003020 <UART_Start_Receive_IT>
 8002aac:	4603      	mov	r3, r0
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0ba      	sub	sp, #232	@ 0xe8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_UART_IRQHandler+0x66>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fb99 	bl	8003252 <UART_Receive_IT>
      return;
 8002b20:	e25b      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80de 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x22c>
 8002b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80d1 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_UART_IRQHandler+0xae>
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_UART_IRQHandler+0xd2>
 8002b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_UART_IRQHandler+0xf6>
 8002b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f043 0204 	orr.w	r2, r3, #4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d011      	beq.n	8002be2 <HAL_UART_IRQHandler+0x126>
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f043 0208 	orr.w	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 81f2 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_UART_IRQHandler+0x14e>
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fb24 	bl	8003252 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b40      	cmp	r3, #64	@ 0x40
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_UART_IRQHandler+0x17a>
 8002c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d04f      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa2c 	bl	8003094 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c46:	2b40      	cmp	r3, #64	@ 0x40
 8002c48:	d141      	bne.n	8002cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1d9      	bne.n	8002c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d013      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8002e9c <HAL_UART_IRQHandler+0x3e0>)
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f958 	bl	8000f60 <HAL_DMA_Abort_IT>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e00e      	b.n	8002ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f994 	bl	8002ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e00a      	b.n	8002ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f990 	bl	8002ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e006      	b.n	8002ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f98c 	bl	8002ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ce2:	e175      	b.n	8002fd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	bf00      	nop
    return;
 8002ce6:	e173      	b.n	8002fd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 814f 	bne.w	8002f90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8148 	beq.w	8002f90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8141 	beq.w	8002f90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b40      	cmp	r3, #64	@ 0x40
 8002d30:	f040 80b6 	bne.w	8002ea0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8145 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d52:	429a      	cmp	r2, r3
 8002d54:	f080 813e 	bcs.w	8002fd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d6a:	f000 8088 	beq.w	8002e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1d9      	bne.n	8002d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3314      	adds	r3, #20
 8002dc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e1      	bne.n	8002dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e3      	bne.n	8002df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e3      	bne.n	8002e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe f801 	bl	8000e80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8b7 	bl	8003008 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9a:	e09b      	b.n	8002fd4 <HAL_UART_IRQHandler+0x518>
 8002e9c:	0800315b 	.word	0x0800315b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 808e 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8089 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8002eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e3      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f22:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e3      	bne.n	8002efe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0310 	bic.w	r3, r3, #16
 8002f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f68:	61fa      	str	r2, [r7, #28]
 8002f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	69b9      	ldr	r1, [r7, #24]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	617b      	str	r3, [r7, #20]
   return(result);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e3      	bne.n	8002f44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f83d 	bl	8003008 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f8e:	e023      	b.n	8002fd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x4f4>
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8ea 	bl	8003182 <UART_Transmit_IT>
    return;
 8002fae:	e014      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <HAL_UART_IRQHandler+0x51e>
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f92a 	bl	8003222 <UART_EndTransmit_IT>
    return;
 8002fce:	e004      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
    return;
 8002fd0:	bf00      	nop
 8002fd2:	e002      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd8:	bf00      	nop
  }
}
 8002fda:	37e8      	adds	r7, #232	@ 0xe8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2222      	movs	r2, #34	@ 0x22
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003064:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0220 	orr.w	r2, r2, #32
 8003084:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b095      	sub	sp, #84	@ 0x54
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	2b01      	cmp	r3, #1
 800310a:	d119      	bne.n	8003140 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	60bb      	str	r3, [r7, #8]
   return(result);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 0310 	bic.w	r3, r3, #16
 8003122:	647b      	str	r3, [r7, #68]	@ 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800312c:	61ba      	str	r2, [r7, #24]
 800312e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	613b      	str	r3, [r7, #16]
   return(result);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e5      	bne.n	800310c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800314e:	bf00      	nop
 8003150:	3754      	adds	r7, #84	@ 0x54
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003166:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ff3d 	bl	8002ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b21      	cmp	r3, #33	@ 0x21
 8003194:	d13e      	bne.n	8003214 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319e:	d114      	bne.n	80031ca <UART_Transmit_IT+0x48>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d110      	bne.n	80031ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	1c9a      	adds	r2, r3, #2
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	621a      	str	r2, [r3, #32]
 80031c8:	e008      	b.n	80031dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	1c59      	adds	r1, r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6211      	str	r1, [r2, #32]
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4619      	mov	r1, r3
 80031ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800320e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003238:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fecc 	bl	8002fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b08c      	sub	sp, #48	@ 0x30
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b22      	cmp	r3, #34	@ 0x22
 8003264:	f040 80ae 	bne.w	80033c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003270:	d117      	bne.n	80032a2 <UART_Receive_IT+0x50>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d113      	bne.n	80032a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003290:	b29a      	uxth	r2, r3
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	@ 0x28
 80032a0:	e026      	b.n	80032f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d007      	beq.n	80032c6 <UART_Receive_IT+0x74>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <UART_Receive_IT+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e008      	b.n	80032e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003300:	2b00      	cmp	r3, #0
 8003302:	d15d      	bne.n	80033c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0220 	bic.w	r2, r2, #32
 8003312:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	2b01      	cmp	r3, #1
 8003348:	d135      	bne.n	80033b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	613b      	str	r3, [r7, #16]
   return(result);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003370:	623a      	str	r2, [r7, #32]
 8003372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	69f9      	ldr	r1, [r7, #28]
 8003376:	6a3a      	ldr	r2, [r7, #32]
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	61bb      	str	r3, [r7, #24]
   return(result);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e5      	bne.n	8003350 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b10      	cmp	r3, #16
 8003390:	d10a      	bne.n	80033a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fe2a 	bl	8003008 <HAL_UARTEx_RxEventCallback>
 80033b4:	e002      	b.n	80033bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb9a 	bl	8003af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e002      	b.n	80033c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3730      	adds	r7, #48	@ 0x30
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b0c0      	sub	sp, #256	@ 0x100
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	68d9      	ldr	r1, [r3, #12]
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	ea40 0301 	orr.w	r3, r0, r1
 80033f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003428:	f021 010c 	bic.w	r1, r1, #12
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003436:	430b      	orrs	r3, r1
 8003438:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	6999      	ldr	r1, [r3, #24]
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	ea40 0301 	orr.w	r3, r0, r1
 8003456:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b8f      	ldr	r3, [pc, #572]	@ (800369c <UART_SetConfig+0x2cc>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d005      	beq.n	8003470 <UART_SetConfig+0xa0>
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b8d      	ldr	r3, [pc, #564]	@ (80036a0 <UART_SetConfig+0x2d0>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d104      	bne.n	800347a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003470:	f7fe fbb8 	bl	8001be4 <HAL_RCC_GetPCLK2Freq>
 8003474:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003478:	e003      	b.n	8003482 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800347a:	f7fe fb9f 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 800347e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348c:	f040 810c 	bne.w	80036a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800349a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800349e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034a2:	4622      	mov	r2, r4
 80034a4:	462b      	mov	r3, r5
 80034a6:	1891      	adds	r1, r2, r2
 80034a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034aa:	415b      	adcs	r3, r3
 80034ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034b2:	4621      	mov	r1, r4
 80034b4:	eb12 0801 	adds.w	r8, r2, r1
 80034b8:	4629      	mov	r1, r5
 80034ba:	eb43 0901 	adc.w	r9, r3, r1
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d2:	4690      	mov	r8, r2
 80034d4:	4699      	mov	r9, r3
 80034d6:	4623      	mov	r3, r4
 80034d8:	eb18 0303 	adds.w	r3, r8, r3
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034e0:	462b      	mov	r3, r5
 80034e2:	eb49 0303 	adc.w	r3, r9, r3
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034fe:	460b      	mov	r3, r1
 8003500:	18db      	adds	r3, r3, r3
 8003502:	653b      	str	r3, [r7, #80]	@ 0x50
 8003504:	4613      	mov	r3, r2
 8003506:	eb42 0303 	adc.w	r3, r2, r3
 800350a:	657b      	str	r3, [r7, #84]	@ 0x54
 800350c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003510:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003514:	f7fc fe64 	bl	80001e0 <__aeabi_uldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4b61      	ldr	r3, [pc, #388]	@ (80036a4 <UART_SetConfig+0x2d4>)
 800351e:	fba3 2302 	umull	r2, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	011c      	lsls	r4, r3, #4
 8003526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800352a:	2200      	movs	r2, #0
 800352c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003530:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003534:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	1891      	adds	r1, r2, r2
 800353e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003540:	415b      	adcs	r3, r3
 8003542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003548:	4641      	mov	r1, r8
 800354a:	eb12 0a01 	adds.w	sl, r2, r1
 800354e:	4649      	mov	r1, r9
 8003550:	eb43 0b01 	adc.w	fp, r3, r1
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003560:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003568:	4692      	mov	sl, r2
 800356a:	469b      	mov	fp, r3
 800356c:	4643      	mov	r3, r8
 800356e:	eb1a 0303 	adds.w	r3, sl, r3
 8003572:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003576:	464b      	mov	r3, r9
 8003578:	eb4b 0303 	adc.w	r3, fp, r3
 800357c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800358c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003590:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003594:	460b      	mov	r3, r1
 8003596:	18db      	adds	r3, r3, r3
 8003598:	643b      	str	r3, [r7, #64]	@ 0x40
 800359a:	4613      	mov	r3, r2
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035aa:	f7fc fe19 	bl	80001e0 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <UART_SetConfig+0x2d4>)
 80035b6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2264      	movs	r2, #100	@ 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	1acb      	subs	r3, r1, r3
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035ca:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <UART_SetConfig+0x2d4>)
 80035cc:	fba3 2302 	umull	r2, r3, r3, r2
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035d8:	441c      	add	r4, r3
 80035da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035ec:	4642      	mov	r2, r8
 80035ee:	464b      	mov	r3, r9
 80035f0:	1891      	adds	r1, r2, r2
 80035f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035f4:	415b      	adcs	r3, r3
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035fc:	4641      	mov	r1, r8
 80035fe:	1851      	adds	r1, r2, r1
 8003600:	6339      	str	r1, [r7, #48]	@ 0x30
 8003602:	4649      	mov	r1, r9
 8003604:	414b      	adcs	r3, r1
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003614:	4659      	mov	r1, fp
 8003616:	00cb      	lsls	r3, r1, #3
 8003618:	4651      	mov	r1, sl
 800361a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361e:	4651      	mov	r1, sl
 8003620:	00ca      	lsls	r2, r1, #3
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	4603      	mov	r3, r0
 8003628:	4642      	mov	r2, r8
 800362a:	189b      	adds	r3, r3, r2
 800362c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003630:	464b      	mov	r3, r9
 8003632:	460a      	mov	r2, r1
 8003634:	eb42 0303 	adc.w	r3, r2, r3
 8003638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003648:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800364c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003650:	460b      	mov	r3, r1
 8003652:	18db      	adds	r3, r3, r3
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003656:	4613      	mov	r3, r2
 8003658:	eb42 0303 	adc.w	r3, r2, r3
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003662:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003666:	f7fc fdbb 	bl	80001e0 <__aeabi_uldivmod>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <UART_SetConfig+0x2d4>)
 8003670:	fba3 1302 	umull	r1, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	2164      	movs	r1, #100	@ 0x64
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	3332      	adds	r3, #50	@ 0x32
 8003682:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <UART_SetConfig+0x2d4>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	f003 0207 	and.w	r2, r3, #7
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4422      	add	r2, r4
 8003696:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003698:	e106      	b.n	80038a8 <UART_SetConfig+0x4d8>
 800369a:	bf00      	nop
 800369c:	40011000 	.word	0x40011000
 80036a0:	40011400 	.word	0x40011400
 80036a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036ba:	4642      	mov	r2, r8
 80036bc:	464b      	mov	r3, r9
 80036be:	1891      	adds	r1, r2, r2
 80036c0:	6239      	str	r1, [r7, #32]
 80036c2:	415b      	adcs	r3, r3
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ca:	4641      	mov	r1, r8
 80036cc:	1854      	adds	r4, r2, r1
 80036ce:	4649      	mov	r1, r9
 80036d0:	eb43 0501 	adc.w	r5, r3, r1
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	00eb      	lsls	r3, r5, #3
 80036de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e2:	00e2      	lsls	r2, r4, #3
 80036e4:	4614      	mov	r4, r2
 80036e6:	461d      	mov	r5, r3
 80036e8:	4643      	mov	r3, r8
 80036ea:	18e3      	adds	r3, r4, r3
 80036ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036f0:	464b      	mov	r3, r9
 80036f2:	eb45 0303 	adc.w	r3, r5, r3
 80036f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003706:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003716:	4629      	mov	r1, r5
 8003718:	008b      	lsls	r3, r1, #2
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003720:	4621      	mov	r1, r4
 8003722:	008a      	lsls	r2, r1, #2
 8003724:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003728:	f7fc fd5a 	bl	80001e0 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4b60      	ldr	r3, [pc, #384]	@ (80038b4 <UART_SetConfig+0x4e4>)
 8003732:	fba3 2302 	umull	r2, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	011c      	lsls	r4, r3, #4
 800373a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003744:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003748:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	1891      	adds	r1, r2, r2
 8003752:	61b9      	str	r1, [r7, #24]
 8003754:	415b      	adcs	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375c:	4641      	mov	r1, r8
 800375e:	1851      	adds	r1, r2, r1
 8003760:	6139      	str	r1, [r7, #16]
 8003762:	4649      	mov	r1, r9
 8003764:	414b      	adcs	r3, r1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003774:	4659      	mov	r1, fp
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	4651      	mov	r1, sl
 800377a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377e:	4651      	mov	r1, sl
 8003780:	00ca      	lsls	r2, r1, #3
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	4603      	mov	r3, r0
 8003788:	4642      	mov	r2, r8
 800378a:	189b      	adds	r3, r3, r2
 800378c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003790:	464b      	mov	r3, r9
 8003792:	460a      	mov	r2, r1
 8003794:	eb42 0303 	adc.w	r3, r2, r3
 8003798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037b4:	4649      	mov	r1, r9
 80037b6:	008b      	lsls	r3, r1, #2
 80037b8:	4641      	mov	r1, r8
 80037ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037be:	4641      	mov	r1, r8
 80037c0:	008a      	lsls	r2, r1, #2
 80037c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037c6:	f7fc fd0b 	bl	80001e0 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <UART_SetConfig+0x4e4>)
 80037d2:	fba3 2301 	umull	r2, r3, r3, r1
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2264      	movs	r2, #100	@ 0x64
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	1acb      	subs	r3, r1, r3
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	3332      	adds	r3, #50	@ 0x32
 80037e4:	4a33      	ldr	r2, [pc, #204]	@ (80038b4 <UART_SetConfig+0x4e4>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f0:	441c      	add	r4, r3
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80037fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80037fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003800:	4642      	mov	r2, r8
 8003802:	464b      	mov	r3, r9
 8003804:	1891      	adds	r1, r2, r2
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	415b      	adcs	r3, r3
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003810:	4641      	mov	r1, r8
 8003812:	1851      	adds	r1, r2, r1
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	4649      	mov	r1, r9
 8003818:	414b      	adcs	r3, r1
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003828:	4659      	mov	r1, fp
 800382a:	00cb      	lsls	r3, r1, #3
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003832:	4651      	mov	r1, sl
 8003834:	00ca      	lsls	r2, r1, #3
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	4603      	mov	r3, r0
 800383c:	4642      	mov	r2, r8
 800383e:	189b      	adds	r3, r3, r2
 8003840:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003842:	464b      	mov	r3, r9
 8003844:	460a      	mov	r2, r1
 8003846:	eb42 0303 	adc.w	r3, r2, r3
 800384a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	663b      	str	r3, [r7, #96]	@ 0x60
 8003856:	667a      	str	r2, [r7, #100]	@ 0x64
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003864:	4649      	mov	r1, r9
 8003866:	008b      	lsls	r3, r1, #2
 8003868:	4641      	mov	r1, r8
 800386a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800386e:	4641      	mov	r1, r8
 8003870:	008a      	lsls	r2, r1, #2
 8003872:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003876:	f7fc fcb3 	bl	80001e0 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <UART_SetConfig+0x4e4>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2164      	movs	r1, #100	@ 0x64
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	3332      	adds	r3, #50	@ 0x32
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <UART_SetConfig+0x4e4>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4422      	add	r2, r4
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038ae:	46bd      	mov	sp, r7
 80038b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b4:	51eb851f 	.word	0x51eb851f

080038b8 <getPosition>:
 *      Author: Z0212095
 */
#include "PositionButton.h"

uint8_t getPosition(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	static uint8_t positions[4];
	static uint8_t switch_position = 0;

	positions[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80038bc:	2102      	movs	r1, #2
 80038be:	481d      	ldr	r0, [pc, #116]	@ (8003934 <getPosition+0x7c>)
 80038c0:	f7fd fcf4 	bl	80012ac <HAL_GPIO_ReadPin>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <getPosition+0x80>)
 80038ca:	701a      	strb	r2, [r3, #0]
	positions[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80038cc:	2104      	movs	r1, #4
 80038ce:	4819      	ldr	r0, [pc, #100]	@ (8003934 <getPosition+0x7c>)
 80038d0:	f7fd fcec 	bl	80012ac <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <getPosition+0x80>)
 80038da:	705a      	strb	r2, [r3, #1]
	positions[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80038dc:	2108      	movs	r1, #8
 80038de:	4815      	ldr	r0, [pc, #84]	@ (8003934 <getPosition+0x7c>)
 80038e0:	f7fd fce4 	bl	80012ac <HAL_GPIO_ReadPin>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <getPosition+0x80>)
 80038ea:	709a      	strb	r2, [r3, #2]
	positions[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80038ec:	2110      	movs	r1, #16
 80038ee:	4811      	ldr	r0, [pc, #68]	@ (8003934 <getPosition+0x7c>)
 80038f0:	f7fd fcdc 	bl	80012ac <HAL_GPIO_ReadPin>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <getPosition+0x80>)
 80038fa:	70da      	strb	r2, [r3, #3]

	switch_position = (positions[0] << 3) | (positions[1] << 2) | (positions[2] << 1) | (positions[3]);
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <getPosition+0x80>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	b25a      	sxtb	r2, r3
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <getPosition+0x80>)
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	b25b      	sxtb	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b25a      	sxtb	r2, r3
 8003910:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <getPosition+0x80>)
 8003912:	789b      	ldrb	r3, [r3, #2]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	b25b      	sxtb	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b25a      	sxtb	r2, r3
 800391c:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <getPosition+0x80>)
 800391e:	78db      	ldrb	r3, [r3, #3]
 8003920:	b25b      	sxtb	r3, r3
 8003922:	4313      	orrs	r3, r2
 8003924:	b25b      	sxtb	r3, r3
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <getPosition+0x84>)
 800392a:	701a      	strb	r2, [r3, #0]

	return switch_position;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <getPosition+0x84>)
 800392e:	781b      	ldrb	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40020000 	.word	0x40020000
 8003938:	20000168 	.word	0x20000168
 800393c:	2000016c 	.word	0x2000016c

08003940 <initTasks>:
int i = 0;

void UART_Clear_Receive_Buffer(UART_HandleTypeDef *huart);

void initTasks(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
	TaskHandle_t UART_handle;
	TaskHandle_t Switch_handle;

	BaseType_t status;

	HAL_TIM_Base_Start(&htim2);
 8003946:	4823      	ldr	r0, [pc, #140]	@ (80039d4 <initTasks+0x94>)
 8003948:	f7fe f9ec 	bl	8001d24 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800394c:	2100      	movs	r1, #0
 800394e:	4821      	ldr	r0, [pc, #132]	@ (80039d4 <initTasks+0x94>)
 8003950:	f7fe faf4 	bl	8001f3c <HAL_TIM_PWM_Start>

	setPWM(0);
 8003954:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 80039d8 <initTasks+0x98>
 8003958:	f000 f8a6 	bl	8003aa8 <setPWM>

	status = xTaskCreate(uart_handler, "UART-Task", 200, NULL, 2, &UART_handle);
 800395c:	f107 0308 	add.w	r3, r7, #8
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2302      	movs	r3, #2
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2300      	movs	r3, #0
 8003968:	22c8      	movs	r2, #200	@ 0xc8
 800396a:	491c      	ldr	r1, [pc, #112]	@ (80039dc <initTasks+0x9c>)
 800396c:	481c      	ldr	r0, [pc, #112]	@ (80039e0 <initTasks+0xa0>)
 800396e:	f000 f977 	bl	8003c60 <xTaskCreate>
 8003972:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d00b      	beq.n	8003992 <initTasks+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <initTasks+0x4e>
	status = xTaskCreate(switch_handler, "Switch-Task", 200, NULL, 2, &Switch_handle);
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	2302      	movs	r3, #2
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	22c8      	movs	r2, #200	@ 0xc8
 800399e:	4911      	ldr	r1, [pc, #68]	@ (80039e4 <initTasks+0xa4>)
 80039a0:	4811      	ldr	r0, [pc, #68]	@ (80039e8 <initTasks+0xa8>)
 80039a2:	f000 f95d 	bl	8003c60 <xTaskCreate>
 80039a6:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d00b      	beq.n	80039c6 <initTasks+0x86>
        __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	60fb      	str	r3, [r7, #12]
    }
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <initTasks+0x82>

	vTaskStartScheduler();
 80039c6:	f000 faed 	bl	8003fa4 <vTaskStartScheduler>
}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000008c 	.word	0x2000008c
 80039d8:	00000000 	.word	0x00000000
 80039dc:	080058ec 	.word	0x080058ec
 80039e0:	080039ed 	.word	0x080039ed
 80039e4:	080058f8 	.word	0x080058f8
 80039e8:	08003a15 	.word	0x08003a15

080039ec <uart_handler>:


 void uart_handler(void *parameters)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive_IT(&huart1, ntc_sensors, sizeof(ntc_sensors));
 80039f4:	2206      	movs	r2, #6
 80039f6:	4905      	ldr	r1, [pc, #20]	@ (8003a0c <uart_handler+0x20>)
 80039f8:	4805      	ldr	r0, [pc, #20]	@ (8003a10 <uart_handler+0x24>)
 80039fa:	f7ff f839 	bl	8002a70 <HAL_UART_Receive_IT>
		vTaskDelay(750);
 80039fe:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8003a02:	f000 fa99 	bl	8003f38 <vTaskDelay>
		HAL_UART_Receive_IT(&huart1, ntc_sensors, sizeof(ntc_sensors));
 8003a06:	bf00      	nop
 8003a08:	e7f4      	b.n	80039f4 <uart_handler+0x8>
 8003a0a:	bf00      	nop
 8003a0c:	20000170 	.word	0x20000170
 8003a10:	200000d4 	.word	0x200000d4

08003a14 <switch_handler>:
	}
}

void switch_handler(void *parameters)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	static uint8_t position = 0;

	while(1)
	{

		position = getPosition();
 8003a1c:	f7ff ff4c 	bl	80038b8 <getPosition>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <switch_handler+0x74>)
 8003a26:	701a      	strb	r2, [r3, #0]

		switch(position)
 8003a28:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <switch_handler+0x74>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d00d      	beq.n	8003a4c <switch_handler+0x38>
 8003a30:	2b0f      	cmp	r3, #15
 8003a32:	dc1b      	bgt.n	8003a6c <switch_handler+0x58>
 8003a34:	2b0b      	cmp	r3, #11
 8003a36:	d011      	beq.n	8003a5c <switch_handler+0x48>
 8003a38:	2b0d      	cmp	r3, #13
 8003a3a:	d117      	bne.n	8003a6c <switch_handler+0x58>
		{
	    case 0x0D:
	        printf("Switch position: 0\n");
 8003a3c:	4813      	ldr	r0, [pc, #76]	@ (8003a8c <switch_handler+0x78>)
 8003a3e:	f001 fbad 	bl	800519c <puts>
	        setPWM(0);
 8003a42:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003a90 <switch_handler+0x7c>
 8003a46:	f000 f82f 	bl	8003aa8 <setPWM>
	        break;
 8003a4a:	e017      	b.n	8003a7c <switch_handler+0x68>
	    case 0xF:
	        printf("Switch position: 1\n");
 8003a4c:	4811      	ldr	r0, [pc, #68]	@ (8003a94 <switch_handler+0x80>)
 8003a4e:	f001 fba5 	bl	800519c <puts>
	        setPWM(90);
 8003a52:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8003a98 <switch_handler+0x84>
 8003a56:	f000 f827 	bl	8003aa8 <setPWM>
	        break;
 8003a5a:	e00f      	b.n	8003a7c <switch_handler+0x68>
	    case 0x0B:
	        printf("Switch position: 2\n");
 8003a5c:	480f      	ldr	r0, [pc, #60]	@ (8003a9c <switch_handler+0x88>)
 8003a5e:	f001 fb9d 	bl	800519c <puts>
	        setPWM(100);
 8003a62:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8003aa0 <switch_handler+0x8c>
 8003a66:	f000 f81f 	bl	8003aa8 <setPWM>
	        break;
 8003a6a:	e007      	b.n	8003a7c <switch_handler+0x68>
	    default:
	        printf("Switch position: undefined\n");
 8003a6c:	480d      	ldr	r0, [pc, #52]	@ (8003aa4 <switch_handler+0x90>)
 8003a6e:	f001 fb95 	bl	800519c <puts>
	        setPWM(100);
 8003a72:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8003aa0 <switch_handler+0x8c>
 8003a76:	f000 f817 	bl	8003aa8 <setPWM>
	        break;
 8003a7a:	bf00      	nop
		}
		vTaskDelay(500);
 8003a7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a80:	f000 fa5a 	bl	8003f38 <vTaskDelay>
		position = getPosition();
 8003a84:	e7ca      	b.n	8003a1c <switch_handler+0x8>
 8003a86:	bf00      	nop
 8003a88:	2000017c 	.word	0x2000017c
 8003a8c:	08005904 	.word	0x08005904
 8003a90:	00000000 	.word	0x00000000
 8003a94:	08005918 	.word	0x08005918
 8003a98:	42b40000 	.word	0x42b40000
 8003a9c:	0800592c 	.word	0x0800592c
 8003aa0:	42c80000 	.word	0x42c80000
 8003aa4:	08005940 	.word	0x08005940

08003aa8 <setPWM>:


}

void setPWM(float dc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t counterTicks = (dc * 7680) / 100;
 8003ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ab6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003ae4 <setPWM+0x3c>
 8003aba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003abe:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8003ae8 <setPWM+0x40>
 8003ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aca:	ee17 3a90 	vmov	r3, s15
 8003ace:	81fb      	strh	r3, [r7, #14]

//    htim1->Instance->CCR1 = counterTicks;
    htim2.Instance->CCR1 = counterTicks;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <setPWM+0x44>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	89fa      	ldrh	r2, [r7, #14]
 8003ad6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	45f00000 	.word	0x45f00000
 8003ae8:	42c80000 	.word	0x42c80000
 8003aec:	2000008c 	.word	0x2000008c

08003af0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) // Check if the interrupt is from USART1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <HAL_UART_RxCpltCallback+0x44>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d111      	bne.n	8003b26 <HAL_UART_RxCpltCallback+0x36>
    {
    	for(i = 0; i < 6; i++){
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <HAL_UART_RxCpltCallback+0x48>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e009      	b.n	8003b1e <HAL_UART_RxCpltCallback+0x2e>
    		ntc_sensors[i] = 0;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_UART_RxCpltCallback+0x48>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <HAL_UART_RxCpltCallback+0x4c>)
 8003b10:	2100      	movs	r1, #0
 8003b12:	54d1      	strb	r1, [r2, r3]
    	for(i = 0; i < 6; i++){
 8003b14:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <HAL_UART_RxCpltCallback+0x48>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a07      	ldr	r2, [pc, #28]	@ (8003b38 <HAL_UART_RxCpltCallback+0x48>)
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_UART_RxCpltCallback+0x48>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	ddf1      	ble.n	8003b0a <HAL_UART_RxCpltCallback+0x1a>
    	}
    }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40011000 	.word	0x40011000
 8003b38:	20000178 	.word	0x20000178
 8003b3c:	20000170 	.word	0x20000170

08003b40 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f103 0208 	add.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b58:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 0208 	add.w	r2, r3, #8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f103 0208 	add.w	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bb0:	d103      	bne.n	8003bba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e00c      	b.n	8003bd4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e002      	b.n	8003bc8 <vListInsert+0x2e>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d2f6      	bcs.n	8003bc2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d103      	bne.n	8003c40 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	@ 0x30
 8003c64:	af04      	add	r7, sp, #16
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 ffa9 	bl	8004bcc <pvPortMalloc>
 8003c7a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d013      	beq.n	8003caa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c82:	2058      	movs	r0, #88	@ 0x58
 8003c84:	f000 ffa2 	bl	8004bcc <pvPortMalloc>
 8003c88:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003c90:	2258      	movs	r2, #88	@ 0x58
 8003c92:	2100      	movs	r1, #0
 8003c94:	69f8      	ldr	r0, [r7, #28]
 8003c96:	f001 fb61 	bl	800535c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca0:	e005      	b.n	8003cae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f001 f84e 	bl	8004d44 <vPortFree>
 8003ca8:	e001      	b.n	8003cae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	9302      	str	r3, [sp, #8]
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f80e 	bl	8003cec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003cd0:	69f8      	ldr	r0, [r7, #28]
 8003cd2:	f000 f89b 	bl	8003e0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e002      	b.n	8003ce2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ce0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
    }
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	21a5      	movs	r1, #165	@ 0xa5
 8003d06:	f001 fb29 	bl	800535c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d14:	3b01      	subs	r3, #1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f023 0307 	bic.w	r3, r3, #7
 8003d22:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	617b      	str	r3, [r7, #20]
    }
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01e      	beq.n	8003d8a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	e012      	b.n	8003d78 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	7819      	ldrb	r1, [r3, #0]
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3334      	adds	r3, #52	@ 0x34
 8003d62:	460a      	mov	r2, r1
 8003d64:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	d9e9      	bls.n	8003d52 <prvInitialiseNewTask+0x66>
 8003d7e:	e000      	b.n	8003d82 <prvInitialiseNewTask+0x96>
            {
                break;
 8003d80:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d90b      	bls.n	8003da8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	613b      	str	r3, [r7, #16]
    }
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d901      	bls.n	8003db2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dae:	2304      	movs	r3, #4
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003db6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dbc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fedc 	bl	8003b80 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	3318      	adds	r3, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fed7 	bl	8003b80 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	f1c3 0205 	rsb	r2, r3, #5
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	69b8      	ldr	r0, [r7, #24]
 8003dee:	f000 fcd5 	bl	800479c <pxPortInitialiseStack>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e02:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e04:	bf00      	nop
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003e14:	f000 fdf2 	bl	80049fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003e18:	4b40      	ldr	r3, [pc, #256]	@ (8003f1c <prvAddNewTaskToReadyList+0x110>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <prvAddNewTaskToReadyList+0x110>)
 8003e20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003e22:	4b3f      	ldr	r3, [pc, #252]	@ (8003f20 <prvAddNewTaskToReadyList+0x114>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f20 <prvAddNewTaskToReadyList+0x114>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e30:	4b3a      	ldr	r3, [pc, #232]	@ (8003f1c <prvAddNewTaskToReadyList+0x110>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d110      	bne.n	8003e5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003e38:	f000 fb96 	bl	8004568 <prvInitialiseTaskLists>
 8003e3c:	e00d      	b.n	8003e5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003e3e:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <prvAddNewTaskToReadyList+0x118>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e46:	4b36      	ldr	r3, [pc, #216]	@ (8003f20 <prvAddNewTaskToReadyList+0x114>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d802      	bhi.n	8003e5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003e54:	4a32      	ldr	r2, [pc, #200]	@ (8003f20 <prvAddNewTaskToReadyList+0x114>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003e5a:	4b33      	ldr	r3, [pc, #204]	@ (8003f28 <prvAddNewTaskToReadyList+0x11c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	4a31      	ldr	r2, [pc, #196]	@ (8003f28 <prvAddNewTaskToReadyList+0x11c>)
 8003e62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e64:	4b30      	ldr	r3, [pc, #192]	@ (8003f28 <prvAddNewTaskToReadyList+0x11c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	2201      	movs	r2, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <prvAddNewTaskToReadyList+0x120>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <prvAddNewTaskToReadyList+0x120>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e82:	492b      	ldr	r1, [pc, #172]	@ (8003f30 <prvAddNewTaskToReadyList+0x124>)
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3304      	adds	r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	3204      	adds	r2, #4
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <prvAddNewTaskToReadyList+0x124>)
 8003ec2:	441a      	add	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	615a      	str	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ecc:	4918      	ldr	r1, [pc, #96]	@ (8003f30 <prvAddNewTaskToReadyList+0x124>)
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	4814      	ldr	r0, [pc, #80]	@ (8003f30 <prvAddNewTaskToReadyList+0x124>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4403      	add	r3, r0
 8003ee8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003eea:	f000 fdb9 	bl	8004a60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <prvAddNewTaskToReadyList+0x118>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <prvAddNewTaskToReadyList+0x114>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <prvAddNewTaskToReadyList+0x128>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000258 	.word	0x20000258
 8003f20:	20000180 	.word	0x20000180
 8003f24:	20000264 	.word	0x20000264
 8003f28:	20000274 	.word	0x20000274
 8003f2c:	20000260 	.word	0x20000260
 8003f30:	20000184 	.word	0x20000184
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <vTaskDelay+0x64>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <vTaskDelay+0x32>
        __asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	60bb      	str	r3, [r7, #8]
    }
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003f6a:	f000 f867 	bl	800403c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f6e:	2100      	movs	r1, #0
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fb93 	bl	800469c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003f76:	f000 f86f 	bl	8004058 <xTaskResumeAll>
 8003f7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <vTaskDelay+0x68>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000280 	.word	0x20000280
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <vTaskStartScheduler+0x7c>)
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2282      	movs	r2, #130	@ 0x82
 8003fb6:	491b      	ldr	r1, [pc, #108]	@ (8004024 <vTaskStartScheduler+0x80>)
 8003fb8:	481b      	ldr	r0, [pc, #108]	@ (8004028 <vTaskStartScheduler+0x84>)
 8003fba:	f7ff fe51 	bl	8003c60 <xTaskCreate>
 8003fbe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d116      	bne.n	8003ff4 <vTaskStartScheduler+0x50>
        __asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	60bb      	str	r3, [r7, #8]
    }
 8003fd8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <vTaskStartScheduler+0x88>)
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fe0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003fe2:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <vTaskStartScheduler+0x8c>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <vTaskStartScheduler+0x90>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003fee:	f000 fc61 	bl	80048b4 <xPortStartScheduler>
 8003ff2:	e00f      	b.n	8004014 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ffa:	d10b      	bne.n	8004014 <vTaskStartScheduler+0x70>
        __asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	607b      	str	r3, [r7, #4]
    }
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004014:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <vTaskStartScheduler+0x94>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	2000027c 	.word	0x2000027c
 8004024:	0800595c 	.word	0x0800595c
 8004028:	08004539 	.word	0x08004539
 800402c:	20000278 	.word	0x20000278
 8004030:	20000264 	.word	0x20000264
 8004034:	2000025c 	.word	0x2000025c
 8004038:	2000000c 	.word	0x2000000c

0800403c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004040:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <vTaskSuspendAll+0x18>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a03      	ldr	r2, [pc, #12]	@ (8004054 <vTaskSuspendAll+0x18>)
 8004048:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20000280 	.word	0x20000280

08004058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004066:	4b71      	ldr	r3, [pc, #452]	@ (800422c <xTaskResumeAll+0x1d4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10b      	bne.n	8004086 <xTaskResumeAll+0x2e>
        __asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	607b      	str	r3, [r7, #4]
    }
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	e7fd      	b.n	8004082 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004086:	f000 fcb9 	bl	80049fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800408a:	4b68      	ldr	r3, [pc, #416]	@ (800422c <xTaskResumeAll+0x1d4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	4a66      	ldr	r2, [pc, #408]	@ (800422c <xTaskResumeAll+0x1d4>)
 8004092:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004094:	4b65      	ldr	r3, [pc, #404]	@ (800422c <xTaskResumeAll+0x1d4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 80c0 	bne.w	800421e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800409e:	4b64      	ldr	r3, [pc, #400]	@ (8004230 <xTaskResumeAll+0x1d8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80bb 	beq.w	800421e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a8:	e08a      	b.n	80041c0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040aa:	4b62      	ldr	r3, [pc, #392]	@ (8004234 <xTaskResumeAll+0x1dc>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	6a12      	ldr	r2, [r2, #32]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	69d2      	ldr	r2, [r2, #28]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3318      	adds	r3, #24
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d103      	bne.n	80040e0 <xTaskResumeAll+0x88>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2200      	movs	r2, #0
 80040e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1e5a      	subs	r2, r3, #1
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	6892      	ldr	r2, [r2, #8]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3304      	adds	r3, #4
 8004112:	429a      	cmp	r2, r3
 8004114:	d103      	bne.n	800411e <xTaskResumeAll+0xc6>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	1e5a      	subs	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	2201      	movs	r2, #1
 8004134:	409a      	lsls	r2, r3
 8004136:	4b40      	ldr	r3, [pc, #256]	@ (8004238 <xTaskResumeAll+0x1e0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	4a3e      	ldr	r2, [pc, #248]	@ (8004238 <xTaskResumeAll+0x1e0>)
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004144:	493d      	ldr	r1, [pc, #244]	@ (800423c <xTaskResumeAll+0x1e4>)
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3304      	adds	r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	3204      	adds	r2, #4
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	1d1a      	adds	r2, r3, #4
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4a2e      	ldr	r2, [pc, #184]	@ (800423c <xTaskResumeAll+0x1e4>)
 8004184:	441a      	add	r2, r3
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418e:	492b      	ldr	r1, [pc, #172]	@ (800423c <xTaskResumeAll+0x1e4>)
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	4827      	ldr	r0, [pc, #156]	@ (800423c <xTaskResumeAll+0x1e4>)
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4403      	add	r3, r0
 80041aa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b0:	4b23      	ldr	r3, [pc, #140]	@ (8004240 <xTaskResumeAll+0x1e8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80041ba:	4b22      	ldr	r3, [pc, #136]	@ (8004244 <xTaskResumeAll+0x1ec>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <xTaskResumeAll+0x1dc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f af70 	bne.w	80040aa <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80041d0:	f000 fa48 	bl	8004664 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004248 <xTaskResumeAll+0x1f0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80041e0:	f000 f836 	bl	8004250 <xTaskIncrementTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80041ea:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <xTaskResumeAll+0x1ec>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f1      	bne.n	80041e0 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <xTaskResumeAll+0x1f0>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <xTaskResumeAll+0x1ec>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800420a:	2301      	movs	r3, #1
 800420c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800420e:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <xTaskResumeAll+0x1f4>)
 8004210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800421e:	f000 fc1f 	bl	8004a60 <vPortExitCritical>

    return xAlreadyYielded;
 8004222:	69bb      	ldr	r3, [r7, #24]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000280 	.word	0x20000280
 8004230:	20000258 	.word	0x20000258
 8004234:	20000218 	.word	0x20000218
 8004238:	20000260 	.word	0x20000260
 800423c:	20000184 	.word	0x20000184
 8004240:	20000180 	.word	0x20000180
 8004244:	2000026c 	.word	0x2000026c
 8004248:	20000268 	.word	0x20000268
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004256:	2300      	movs	r3, #0
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425a:	4b7e      	ldr	r3, [pc, #504]	@ (8004454 <xTaskIncrementTick+0x204>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80ed 	bne.w	800443e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004264:	4b7c      	ldr	r3, [pc, #496]	@ (8004458 <xTaskIncrementTick+0x208>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800426c:	4a7a      	ldr	r2, [pc, #488]	@ (8004458 <xTaskIncrementTick+0x208>)
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d121      	bne.n	80042bc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004278:	4b78      	ldr	r3, [pc, #480]	@ (800445c <xTaskIncrementTick+0x20c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <xTaskIncrementTick+0x4a>
        __asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
    }
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	e7fd      	b.n	8004296 <xTaskIncrementTick+0x46>
 800429a:	4b70      	ldr	r3, [pc, #448]	@ (800445c <xTaskIncrementTick+0x20c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004460 <xTaskIncrementTick+0x210>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6d      	ldr	r2, [pc, #436]	@ (800445c <xTaskIncrementTick+0x20c>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4a6d      	ldr	r2, [pc, #436]	@ (8004460 <xTaskIncrementTick+0x210>)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004464 <xTaskIncrementTick+0x214>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004464 <xTaskIncrementTick+0x214>)
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	f000 f9d4 	bl	8004664 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80042bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <xTaskIncrementTick+0x218>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	f0c0 80a6 	bcc.w	8004414 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c8:	4b64      	ldr	r3, [pc, #400]	@ (800445c <xTaskIncrementTick+0x20c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d2:	4b65      	ldr	r3, [pc, #404]	@ (8004468 <xTaskIncrementTick+0x218>)
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042d8:	601a      	str	r2, [r3, #0]
                    break;
 80042da:	e09b      	b.n	8004414 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042dc:	4b5f      	ldr	r3, [pc, #380]	@ (800445c <xTaskIncrementTick+0x20c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d203      	bcs.n	80042fc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80042f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004468 <xTaskIncrementTick+0x218>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80042fa:	e08b      	b.n	8004414 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	3304      	adds	r3, #4
 800431e:	429a      	cmp	r2, r3
 8004320:	d103      	bne.n	800432a <xTaskIncrementTick+0xda>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2200      	movs	r2, #0
 800432e:	615a      	str	r2, [r3, #20]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01e      	beq.n	8004380 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	6a12      	ldr	r2, [r2, #32]
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	69d2      	ldr	r2, [r2, #28]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	3318      	adds	r3, #24
 8004364:	429a      	cmp	r2, r3
 8004366:	d103      	bne.n	8004370 <xTaskIncrementTick+0x120>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2200      	movs	r2, #0
 8004374:	629a      	str	r2, [r3, #40]	@ 0x28
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	2201      	movs	r2, #1
 8004386:	409a      	lsls	r2, r3
 8004388:	4b38      	ldr	r3, [pc, #224]	@ (800446c <xTaskIncrementTick+0x21c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	4a37      	ldr	r2, [pc, #220]	@ (800446c <xTaskIncrementTick+0x21c>)
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	4936      	ldr	r1, [pc, #216]	@ (8004470 <xTaskIncrementTick+0x220>)
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	3304      	adds	r3, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	3204      	adds	r2, #4
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <xTaskIncrementTick+0x220>)
 80043d6:	441a      	add	r2, r3
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	615a      	str	r2, [r3, #20]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	4923      	ldr	r1, [pc, #140]	@ (8004470 <xTaskIncrementTick+0x220>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	481f      	ldr	r0, [pc, #124]	@ (8004470 <xTaskIncrementTick+0x220>)
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4403      	add	r3, r0
 80043fc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <xTaskIncrementTick+0x224>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	429a      	cmp	r2, r3
 800440a:	f67f af5d 	bls.w	80042c8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004412:	e759      	b.n	80042c8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004414:	4b17      	ldr	r3, [pc, #92]	@ (8004474 <xTaskIncrementTick+0x224>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441a:	4915      	ldr	r1, [pc, #84]	@ (8004470 <xTaskIncrementTick+0x220>)
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d901      	bls.n	8004430 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800442c:	2301      	movs	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004430:	4b11      	ldr	r3, [pc, #68]	@ (8004478 <xTaskIncrementTick+0x228>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
 800443c:	e004      	b.n	8004448 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800443e:	4b0f      	ldr	r3, [pc, #60]	@ (800447c <xTaskIncrementTick+0x22c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <xTaskIncrementTick+0x22c>)
 8004446:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800444a:	4618      	mov	r0, r3
 800444c:	3728      	adds	r7, #40	@ 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000280 	.word	0x20000280
 8004458:	2000025c 	.word	0x2000025c
 800445c:	20000210 	.word	0x20000210
 8004460:	20000214 	.word	0x20000214
 8004464:	20000270 	.word	0x20000270
 8004468:	20000278 	.word	0x20000278
 800446c:	20000260 	.word	0x20000260
 8004470:	20000184 	.word	0x20000184
 8004474:	20000180 	.word	0x20000180
 8004478:	2000026c 	.word	0x2000026c
 800447c:	20000268 	.word	0x20000268

08004480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004486:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <vTaskSwitchContext+0xa4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800448e:	4b26      	ldr	r3, [pc, #152]	@ (8004528 <vTaskSwitchContext+0xa8>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004494:	e040      	b.n	8004518 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <vTaskSwitchContext+0xa8>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449c:	4b23      	ldr	r3, [pc, #140]	@ (800452c <vTaskSwitchContext+0xac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80044aa:	7afb      	ldrb	r3, [r7, #11]
 80044ac:	f1c3 031f 	rsb	r3, r3, #31
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	491f      	ldr	r1, [pc, #124]	@ (8004530 <vTaskSwitchContext+0xb0>)
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <vTaskSwitchContext+0x5e>
        __asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	607b      	str	r3, [r7, #4]
    }
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <vTaskSwitchContext+0x5a>
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4a11      	ldr	r2, [pc, #68]	@ (8004530 <vTaskSwitchContext+0xb0>)
 80044ea:	4413      	add	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	3308      	adds	r3, #8
 8004500:	429a      	cmp	r2, r3
 8004502:	d104      	bne.n	800450e <vTaskSwitchContext+0x8e>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <vTaskSwitchContext+0xb4>)
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000280 	.word	0x20000280
 8004528:	2000026c 	.word	0x2000026c
 800452c:	20000260 	.word	0x20000260
 8004530:	20000184 	.word	0x20000184
 8004534:	20000180 	.word	0x20000180

08004538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004540:	f000 f852 	bl	80045e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004544:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <prvIdleTask+0x28>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d9f9      	bls.n	8004540 <prvIdleTask+0x8>
            {
                taskYIELD();
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <prvIdleTask+0x2c>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800455c:	e7f0      	b.n	8004540 <prvIdleTask+0x8>
 800455e:	bf00      	nop
 8004560:	20000184 	.word	0x20000184
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	e00c      	b.n	800458e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <prvInitialiseTaskLists+0x60>)
 8004580:	4413      	add	r3, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fadc 	bl	8003b40 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3301      	adds	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d9ef      	bls.n	8004574 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004594:	480d      	ldr	r0, [pc, #52]	@ (80045cc <prvInitialiseTaskLists+0x64>)
 8004596:	f7ff fad3 	bl	8003b40 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800459a:	480d      	ldr	r0, [pc, #52]	@ (80045d0 <prvInitialiseTaskLists+0x68>)
 800459c:	f7ff fad0 	bl	8003b40 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80045a0:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <prvInitialiseTaskLists+0x6c>)
 80045a2:	f7ff facd 	bl	8003b40 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80045a6:	480c      	ldr	r0, [pc, #48]	@ (80045d8 <prvInitialiseTaskLists+0x70>)
 80045a8:	f7ff faca 	bl	8003b40 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80045ac:	480b      	ldr	r0, [pc, #44]	@ (80045dc <prvInitialiseTaskLists+0x74>)
 80045ae:	f7ff fac7 	bl	8003b40 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <prvInitialiseTaskLists+0x78>)
 80045b4:	4a05      	ldr	r2, [pc, #20]	@ (80045cc <prvInitialiseTaskLists+0x64>)
 80045b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <prvInitialiseTaskLists+0x7c>)
 80045ba:	4a05      	ldr	r2, [pc, #20]	@ (80045d0 <prvInitialiseTaskLists+0x68>)
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000184 	.word	0x20000184
 80045cc:	200001e8 	.word	0x200001e8
 80045d0:	200001fc 	.word	0x200001fc
 80045d4:	20000218 	.word	0x20000218
 80045d8:	2000022c 	.word	0x2000022c
 80045dc:	20000244 	.word	0x20000244
 80045e0:	20000210 	.word	0x20000210
 80045e4:	20000214 	.word	0x20000214

080045e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ee:	e019      	b.n	8004624 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80045f0:	f000 fa04 	bl	80049fc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f4:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <prvCheckTasksWaitingTermination+0x50>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fb03 	bl	8003c0c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <prvCheckTasksWaitingTermination+0x54>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3b01      	subs	r3, #1
 800460c:	4a0b      	ldr	r2, [pc, #44]	@ (800463c <prvCheckTasksWaitingTermination+0x54>)
 800460e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <prvCheckTasksWaitingTermination+0x58>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	4a0a      	ldr	r2, [pc, #40]	@ (8004640 <prvCheckTasksWaitingTermination+0x58>)
 8004618:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800461a:	f000 fa21 	bl	8004a60 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f810 	bl	8004644 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004624:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <prvCheckTasksWaitingTermination+0x58>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e1      	bne.n	80045f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	2000022c 	.word	0x2000022c
 800463c:	20000258 	.word	0x20000258
 8004640:	20000240 	.word	0x20000240

08004644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fb77 	bl	8004d44 <vPortFree>
            vPortFree( pxTCB );
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fb74 	bl	8004d44 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004668:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <prvResetNextTaskUnblockTime+0x30>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004672:	4b09      	ldr	r3, [pc, #36]	@ (8004698 <prvResetNextTaskUnblockTime+0x34>)
 8004674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004678:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800467a:	e005      	b.n	8004688 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <prvResetNextTaskUnblockTime+0x30>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a04      	ldr	r2, [pc, #16]	@ (8004698 <prvResetNextTaskUnblockTime+0x34>)
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000210 	.word	0x20000210
 8004698:	20000278 	.word	0x20000278

0800469c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046a6:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ac:	4b35      	ldr	r3, [pc, #212]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff faaa 	bl	8003c0c <uxListRemove>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046be:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	2201      	movs	r2, #1
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xec>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4013      	ands	r3, r2
 80046d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xec>)
 80046d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046dc:	d124      	bne.n	8004728 <prvAddCurrentTaskToDelayedList+0x8c>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d021      	beq.n	8004728 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e4:	4b29      	ldr	r3, [pc, #164]	@ (800478c <prvAddCurrentTaskToDelayedList+0xf0>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	60da      	str	r2, [r3, #12]
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	3204      	adds	r2, #4
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	4b1e      	ldr	r3, [pc, #120]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1d1a      	adds	r2, r3, #4
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004718:	615a      	str	r2, [r3, #20]
 800471a:	4b1c      	ldr	r3, [pc, #112]	@ (800478c <prvAddCurrentTaskToDelayedList+0xf0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4a1a      	ldr	r2, [pc, #104]	@ (800478c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004726:	e026      	b.n	8004776 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004730:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	429a      	cmp	r2, r3
 800473e:	d209      	bcs.n	8004754 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004740:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7ff fa24 	bl	8003b9a <vListInsert>
}
 8004752:	e010      	b.n	8004776 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xe8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7ff fa1a 	bl	8003b9a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004766:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	429a      	cmp	r2, r3
 800476e:	d202      	bcs.n	8004776 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004770:	4a09      	ldr	r2, [pc, #36]	@ (8004798 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6013      	str	r3, [r2, #0]
}
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000025c 	.word	0x2000025c
 8004784:	20000180 	.word	0x20000180
 8004788:	20000260 	.word	0x20000260
 800478c:	20000244 	.word	0x20000244
 8004790:	20000214 	.word	0x20000214
 8004794:	20000210 	.word	0x20000210
 8004798:	20000278 	.word	0x20000278

0800479c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b04      	subs	r3, #4
 80047ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b04      	subs	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b04      	subs	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80047cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <pxPortInitialiseStack+0x64>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b14      	subs	r3, #20
 80047d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f06f 0202 	mvn.w	r2, #2
 80047ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b20      	subs	r3, #32
 80047f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	08004805 	.word	0x08004805

08004804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800480e:	4b13      	ldr	r3, [pc, #76]	@ (800485c <prvTaskExitError+0x58>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004816:	d00b      	beq.n	8004830 <prvTaskExitError+0x2c>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
    }
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	e7fd      	b.n	800482c <prvTaskExitError+0x28>
        __asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60bb      	str	r3, [r7, #8]
    }
 8004842:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004844:	bf00      	nop
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0fc      	beq.n	8004846 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000010 	.word	0x20000010

08004860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <pxCurrentTCBConst2>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	f380 8809 	msr	PSP, r0
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f380 8811 	msr	BASEPRI, r0
 800487a:	4770      	bx	lr
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst2>:
 8004880:	20000180 	.word	0x20000180
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004888:	4808      	ldr	r0, [pc, #32]	@ (80048ac <prvPortStartFirstTask+0x24>)
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f380 8808 	msr	MSP, r0
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8814 	msr	CONTROL, r0
 800489a:	b662      	cpsie	i
 800489c:	b661      	cpsie	f
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	df00      	svc	0
 80048a8:	bf00      	nop
 80048aa:	0000      	.short	0x0000
 80048ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop

080048b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048ba:	4b47      	ldr	r3, [pc, #284]	@ (80049d8 <xPortStartScheduler+0x124>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a47      	ldr	r2, [pc, #284]	@ (80049dc <xPortStartScheduler+0x128>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10b      	bne.n	80048dc <xPortStartScheduler+0x28>
        __asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	613b      	str	r3, [r7, #16]
    }
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048dc:	4b3e      	ldr	r3, [pc, #248]	@ (80049d8 <xPortStartScheduler+0x124>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3f      	ldr	r2, [pc, #252]	@ (80049e0 <xPortStartScheduler+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d10b      	bne.n	80048fe <xPortStartScheduler+0x4a>
        __asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60fb      	str	r3, [r7, #12]
    }
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048fe:	4b39      	ldr	r3, [pc, #228]	@ (80049e4 <xPortStartScheduler+0x130>)
 8004900:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	22ff      	movs	r2, #255	@ 0xff
 800490e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b31      	ldr	r3, [pc, #196]	@ (80049e8 <xPortStartScheduler+0x134>)
 8004924:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <xPortStartScheduler+0x138>)
 8004928:	2207      	movs	r2, #7
 800492a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800492c:	e009      	b.n	8004942 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800492e:	4b2f      	ldr	r3, [pc, #188]	@ (80049ec <xPortStartScheduler+0x138>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	4a2d      	ldr	r2, [pc, #180]	@ (80049ec <xPortStartScheduler+0x138>)
 8004936:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b80      	cmp	r3, #128	@ 0x80
 800494c:	d0ef      	beq.n	800492e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800494e:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <xPortStartScheduler+0x138>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1c3 0307 	rsb	r3, r3, #7
 8004956:	2b04      	cmp	r3, #4
 8004958:	d00b      	beq.n	8004972 <xPortStartScheduler+0xbe>
        __asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	60bb      	str	r3, [r7, #8]
    }
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004972:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <xPortStartScheduler+0x138>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <xPortStartScheduler+0x138>)
 800497a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800497c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <xPortStartScheduler+0x138>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004984:	4a19      	ldr	r2, [pc, #100]	@ (80049ec <xPortStartScheduler+0x138>)
 8004986:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004990:	4b17      	ldr	r3, [pc, #92]	@ (80049f0 <xPortStartScheduler+0x13c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a16      	ldr	r2, [pc, #88]	@ (80049f0 <xPortStartScheduler+0x13c>)
 8004996:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800499a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800499c:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <xPortStartScheduler+0x13c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <xPortStartScheduler+0x13c>)
 80049a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049a8:	f000 f8e0 	bl	8004b6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <xPortStartScheduler+0x140>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049b2:	f000 f8ff 	bl	8004bb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049b6:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <xPortStartScheduler+0x144>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a0f      	ldr	r2, [pc, #60]	@ (80049f8 <xPortStartScheduler+0x144>)
 80049bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80049c2:	f7ff ff61 	bl	8004888 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049c6:	f7ff fd5b 	bl	8004480 <vTaskSwitchContext>
    prvTaskExitError();
 80049ca:	f7ff ff1b 	bl	8004804 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	e000ed00 	.word	0xe000ed00
 80049dc:	410fc271 	.word	0x410fc271
 80049e0:	410fc270 	.word	0x410fc270
 80049e4:	e000e400 	.word	0xe000e400
 80049e8:	20000284 	.word	0x20000284
 80049ec:	20000288 	.word	0x20000288
 80049f0:	e000ed20 	.word	0xe000ed20
 80049f4:	20000010 	.word	0x20000010
 80049f8:	e000ef34 	.word	0xe000ef34

080049fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
        __asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	607b      	str	r3, [r7, #4]
    }
 8004a14:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004a16:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <vPortEnterCritical+0x5c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8004a58 <vPortEnterCritical+0x5c>)
 8004a1e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004a20:	4b0d      	ldr	r3, [pc, #52]	@ (8004a58 <vPortEnterCritical+0x5c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d110      	bne.n	8004a4a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a28:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <vPortEnterCritical+0x60>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <vPortEnterCritical+0x4e>
        __asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	603b      	str	r3, [r7, #0]
    }
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <vPortEnterCritical+0x4a>
    }
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000010 	.word	0x20000010
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a66:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <vPortExitCritical+0x50>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <vPortExitCritical+0x26>
        __asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
    }
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <vPortExitCritical+0x50>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a08      	ldr	r2, [pc, #32]	@ (8004ab0 <vPortExitCritical+0x50>)
 8004a8e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004a90:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <vPortExitCritical+0x50>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <vPortExitCritical+0x44>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004aa2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000010 	.word	0x20000010
	...

08004ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	f01e 0f10 	tst.w	lr, #16
 8004ad0:	bf08      	it	eq
 8004ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ae4:	f380 8811 	msr	BASEPRI, r0
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f7ff fcc6 	bl	8004480 <vTaskSwitchContext>
 8004af4:	f04f 0000 	mov.w	r0, #0
 8004af8:	f380 8811 	msr	BASEPRI, r0
 8004afc:	bc09      	pop	{r0, r3}
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b06:	f01e 0f10 	tst.w	lr, #16
 8004b0a:	bf08      	it	eq
 8004b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b10:	f380 8809 	msr	PSP, r0
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst>:
 8004b20:	20000180 	.word	0x20000180
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	607b      	str	r3, [r7, #4]
    }
 8004b40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b42:	f7ff fb85 	bl	8004250 <xTaskIncrementTick>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <SysTick_Handler+0x40>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f383 8811 	msr	BASEPRI, r3
    }
 8004b5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <vPortSetupTimerInterrupt+0x34>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <vPortSetupTimerInterrupt+0x38>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <vPortSetupTimerInterrupt+0x3c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <vPortSetupTimerInterrupt+0x40>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <vPortSetupTimerInterrupt+0x44>)
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <vPortSetupTimerInterrupt+0x34>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e010 	.word	0xe000e010
 8004ba4:	e000e018 	.word	0xe000e018
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	10624dd3 	.word	0x10624dd3
 8004bb0:	e000e014 	.word	0xe000e014

08004bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004bc4 <vPortEnableVFP+0x10>
 8004bb8:	6801      	ldr	r1, [r0, #0]
 8004bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bbe:	6001      	str	r1, [r0, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	0000      	.short	0x0000
 8004bc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop

08004bcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	@ 0x28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004bd8:	f7ff fa30 	bl	800403c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004bdc:	4b54      	ldr	r3, [pc, #336]	@ (8004d30 <pvPortMalloc+0x164>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004be4:	f000 f90c 	bl	8004e00 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004bee:	2208      	movs	r2, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d804      	bhi.n	8004c10 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	e001      	b.n	8004c14 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db71      	blt.n	8004cfe <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d06e      	beq.n	8004cfe <pvPortMalloc+0x132>
 8004c20:	4b44      	ldr	r3, [pc, #272]	@ (8004d34 <pvPortMalloc+0x168>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d869      	bhi.n	8004cfe <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004c2a:	4b43      	ldr	r3, [pc, #268]	@ (8004d38 <pvPortMalloc+0x16c>)
 8004c2c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004c2e:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <pvPortMalloc+0x16c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c34:	e004      	b.n	8004c40 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d903      	bls.n	8004c52 <pvPortMalloc+0x86>
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f1      	bne.n	8004c36 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004c52:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <pvPortMalloc+0x164>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d050      	beq.n	8004cfe <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4413      	add	r3, r2
 8004c64:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	2308      	movs	r3, #8
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d920      	bls.n	8004cc0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <pvPortMalloc+0xdc>
        __asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
    }
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	e7fd      	b.n	8004ca4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f000 f8fc 	bl	8004eb8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <pvPortMalloc+0x168>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	4a1a      	ldr	r2, [pc, #104]	@ (8004d34 <pvPortMalloc+0x168>)
 8004ccc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cce:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <pvPortMalloc+0x168>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <pvPortMalloc+0x170>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d203      	bcs.n	8004ce2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cda:	4b16      	ldr	r3, [pc, #88]	@ (8004d34 <pvPortMalloc+0x168>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a17      	ldr	r2, [pc, #92]	@ (8004d3c <pvPortMalloc+0x170>)
 8004ce0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004cf4:	4b12      	ldr	r3, [pc, #72]	@ (8004d40 <pvPortMalloc+0x174>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	4a11      	ldr	r2, [pc, #68]	@ (8004d40 <pvPortMalloc+0x174>)
 8004cfc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004cfe:	f7ff f9ab 	bl	8004058 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <pvPortMalloc+0x158>
        __asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60fb      	str	r3, [r7, #12]
    }
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <pvPortMalloc+0x154>
    return pvReturn;
 8004d24:	69fb      	ldr	r3, [r7, #28]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3728      	adds	r7, #40	@ 0x28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20012e94 	.word	0x20012e94
 8004d34:	20012e98 	.word	0x20012e98
 8004d38:	20012e8c 	.word	0x20012e8c
 8004d3c:	20012e9c 	.word	0x20012e9c
 8004d40:	20012ea0 	.word	0x20012ea0

08004d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04b      	beq.n	8004dee <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004d56:	2308      	movs	r3, #8
 8004d58:	425b      	negs	r3, r3
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	db0b      	blt.n	8004d84 <vPortFree+0x40>
        __asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60fb      	str	r3, [r7, #12]
    }
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <vPortFree+0x60>
        __asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	60bb      	str	r3, [r7, #8]
    }
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0fdb      	lsrs	r3, r3, #31
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01c      	beq.n	8004dee <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d118      	bne.n	8004dee <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004dc8:	f7ff f938 	bl	800403c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <vPortFree+0xb4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <vPortFree+0xb4>)
 8004dd8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dda:	6938      	ldr	r0, [r7, #16]
 8004ddc:	f000 f86c 	bl	8004eb8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <vPortFree+0xb8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	4a05      	ldr	r2, [pc, #20]	@ (8004dfc <vPortFree+0xb8>)
 8004de8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004dea:	f7ff f935 	bl	8004058 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20012e98 	.word	0x20012e98
 8004dfc:	20012ea4 	.word	0x20012ea4

08004e00 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e06:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004e0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004e0c:	4b25      	ldr	r3, [pc, #148]	@ (8004ea4 <prvHeapInit+0xa4>)
 8004e0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea4 <prvHeapInit+0xa4>)
 8004e30:	4413      	add	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea8 <prvHeapInit+0xa8>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <prvHeapInit+0xa8>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <prvHeapInit+0xac>)
 8004e60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004e62:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <prvHeapInit+0xac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2200      	movs	r2, #0
 8004e68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004e6a:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <prvHeapInit+0xac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e80:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <prvHeapInit+0xac>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <prvHeapInit+0xb0>)
 8004e8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a07      	ldr	r2, [pc, #28]	@ (8004eb4 <prvHeapInit+0xb4>)
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	2000028c 	.word	0x2000028c
 8004ea8:	20012e8c 	.word	0x20012e8c
 8004eac:	20012e94 	.word	0x20012e94
 8004eb0:	20012e9c 	.word	0x20012e9c
 8004eb4:	20012e98 	.word	0x20012e98

08004eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ec0:	4b28      	ldr	r3, [pc, #160]	@ (8004f64 <prvInsertBlockIntoFreeList+0xac>)
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e002      	b.n	8004ecc <prvInsertBlockIntoFreeList+0x14>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d8f7      	bhi.n	8004ec6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d108      	bne.n	8004efa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	441a      	add	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	441a      	add	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d118      	bne.n	8004f40 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b15      	ldr	r3, [pc, #84]	@ (8004f68 <prvInsertBlockIntoFreeList+0xb0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d00d      	beq.n	8004f36 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e008      	b.n	8004f48 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f36:	4b0c      	ldr	r3, [pc, #48]	@ (8004f68 <prvInsertBlockIntoFreeList+0xb0>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e003      	b.n	8004f48 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d002      	beq.n	8004f56 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20012e8c 	.word	0x20012e8c
 8004f68:	20012e94 	.word	0x20012e94

08004f6c <std>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	4604      	mov	r4, r0
 8004f72:	e9c0 3300 	strd	r3, r3, [r0]
 8004f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7a:	6083      	str	r3, [r0, #8]
 8004f7c:	8181      	strh	r1, [r0, #12]
 8004f7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f80:	81c2      	strh	r2, [r0, #14]
 8004f82:	6183      	str	r3, [r0, #24]
 8004f84:	4619      	mov	r1, r3
 8004f86:	2208      	movs	r2, #8
 8004f88:	305c      	adds	r0, #92	@ 0x5c
 8004f8a:	f000 f9e7 	bl	800535c <memset>
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <std+0x58>)
 8004f90:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <std+0x5c>)
 8004f94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f96:	4b0d      	ldr	r3, [pc, #52]	@ (8004fcc <std+0x60>)
 8004f98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <std+0x64>)
 8004f9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd4 <std+0x68>)
 8004fa0:	6224      	str	r4, [r4, #32]
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d006      	beq.n	8004fb4 <std+0x48>
 8004fa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004faa:	4294      	cmp	r4, r2
 8004fac:	d002      	beq.n	8004fb4 <std+0x48>
 8004fae:	33d0      	adds	r3, #208	@ 0xd0
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	d105      	bne.n	8004fc0 <std+0x54>
 8004fb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f000 ba40 	b.w	8005440 <__retarget_lock_init_recursive>
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	080051ad 	.word	0x080051ad
 8004fc8:	080051cf 	.word	0x080051cf
 8004fcc:	08005207 	.word	0x08005207
 8004fd0:	0800522b 	.word	0x0800522b
 8004fd4:	20012ea8 	.word	0x20012ea8

08004fd8 <stdio_exit_handler>:
 8004fd8:	4a02      	ldr	r2, [pc, #8]	@ (8004fe4 <stdio_exit_handler+0xc>)
 8004fda:	4903      	ldr	r1, [pc, #12]	@ (8004fe8 <stdio_exit_handler+0x10>)
 8004fdc:	4803      	ldr	r0, [pc, #12]	@ (8004fec <stdio_exit_handler+0x14>)
 8004fde:	f000 b869 	b.w	80050b4 <_fwalk_sglue>
 8004fe2:	bf00      	nop
 8004fe4:	20000014 	.word	0x20000014
 8004fe8:	08005741 	.word	0x08005741
 8004fec:	20000024 	.word	0x20000024

08004ff0 <cleanup_stdio>:
 8004ff0:	6841      	ldr	r1, [r0, #4]
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <cleanup_stdio+0x34>)
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	d001      	beq.n	8005000 <cleanup_stdio+0x10>
 8004ffc:	f000 fba0 	bl	8005740 <_fflush_r>
 8005000:	68a1      	ldr	r1, [r4, #8]
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <cleanup_stdio+0x38>)
 8005004:	4299      	cmp	r1, r3
 8005006:	d002      	beq.n	800500e <cleanup_stdio+0x1e>
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fb99 	bl	8005740 <_fflush_r>
 800500e:	68e1      	ldr	r1, [r4, #12]
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <cleanup_stdio+0x3c>)
 8005012:	4299      	cmp	r1, r3
 8005014:	d004      	beq.n	8005020 <cleanup_stdio+0x30>
 8005016:	4620      	mov	r0, r4
 8005018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501c:	f000 bb90 	b.w	8005740 <_fflush_r>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	bf00      	nop
 8005024:	20012ea8 	.word	0x20012ea8
 8005028:	20012f10 	.word	0x20012f10
 800502c:	20012f78 	.word	0x20012f78

08005030 <global_stdio_init.part.0>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <global_stdio_init.part.0+0x30>)
 8005034:	4c0b      	ldr	r4, [pc, #44]	@ (8005064 <global_stdio_init.part.0+0x34>)
 8005036:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <global_stdio_init.part.0+0x38>)
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	4620      	mov	r0, r4
 800503c:	2200      	movs	r2, #0
 800503e:	2104      	movs	r1, #4
 8005040:	f7ff ff94 	bl	8004f6c <std>
 8005044:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005048:	2201      	movs	r2, #1
 800504a:	2109      	movs	r1, #9
 800504c:	f7ff ff8e 	bl	8004f6c <std>
 8005050:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005054:	2202      	movs	r2, #2
 8005056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505a:	2112      	movs	r1, #18
 800505c:	f7ff bf86 	b.w	8004f6c <std>
 8005060:	20012fe0 	.word	0x20012fe0
 8005064:	20012ea8 	.word	0x20012ea8
 8005068:	08004fd9 	.word	0x08004fd9

0800506c <__sfp_lock_acquire>:
 800506c:	4801      	ldr	r0, [pc, #4]	@ (8005074 <__sfp_lock_acquire+0x8>)
 800506e:	f000 b9e8 	b.w	8005442 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	20012fe9 	.word	0x20012fe9

08005078 <__sfp_lock_release>:
 8005078:	4801      	ldr	r0, [pc, #4]	@ (8005080 <__sfp_lock_release+0x8>)
 800507a:	f000 b9e3 	b.w	8005444 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	20012fe9 	.word	0x20012fe9

08005084 <__sinit>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	f7ff fff0 	bl	800506c <__sfp_lock_acquire>
 800508c:	6a23      	ldr	r3, [r4, #32]
 800508e:	b11b      	cbz	r3, 8005098 <__sinit+0x14>
 8005090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005094:	f7ff bff0 	b.w	8005078 <__sfp_lock_release>
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <__sinit+0x28>)
 800509a:	6223      	str	r3, [r4, #32]
 800509c:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <__sinit+0x2c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f5      	bne.n	8005090 <__sinit+0xc>
 80050a4:	f7ff ffc4 	bl	8005030 <global_stdio_init.part.0>
 80050a8:	e7f2      	b.n	8005090 <__sinit+0xc>
 80050aa:	bf00      	nop
 80050ac:	08004ff1 	.word	0x08004ff1
 80050b0:	20012fe0 	.word	0x20012fe0

080050b4 <_fwalk_sglue>:
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	4607      	mov	r7, r0
 80050ba:	4688      	mov	r8, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	2600      	movs	r6, #0
 80050c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c4:	f1b9 0901 	subs.w	r9, r9, #1
 80050c8:	d505      	bpl.n	80050d6 <_fwalk_sglue+0x22>
 80050ca:	6824      	ldr	r4, [r4, #0]
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d1f7      	bne.n	80050c0 <_fwalk_sglue+0xc>
 80050d0:	4630      	mov	r0, r6
 80050d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d907      	bls.n	80050ec <_fwalk_sglue+0x38>
 80050dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050e0:	3301      	adds	r3, #1
 80050e2:	d003      	beq.n	80050ec <_fwalk_sglue+0x38>
 80050e4:	4629      	mov	r1, r5
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	4306      	orrs	r6, r0
 80050ec:	3568      	adds	r5, #104	@ 0x68
 80050ee:	e7e9      	b.n	80050c4 <_fwalk_sglue+0x10>

080050f0 <_puts_r>:
 80050f0:	6a03      	ldr	r3, [r0, #32]
 80050f2:	b570      	push	{r4, r5, r6, lr}
 80050f4:	6884      	ldr	r4, [r0, #8]
 80050f6:	4605      	mov	r5, r0
 80050f8:	460e      	mov	r6, r1
 80050fa:	b90b      	cbnz	r3, 8005100 <_puts_r+0x10>
 80050fc:	f7ff ffc2 	bl	8005084 <__sinit>
 8005100:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005102:	07db      	lsls	r3, r3, #31
 8005104:	d405      	bmi.n	8005112 <_puts_r+0x22>
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	0598      	lsls	r0, r3, #22
 800510a:	d402      	bmi.n	8005112 <_puts_r+0x22>
 800510c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800510e:	f000 f998 	bl	8005442 <__retarget_lock_acquire_recursive>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	0719      	lsls	r1, r3, #28
 8005116:	d502      	bpl.n	800511e <_puts_r+0x2e>
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d135      	bne.n	800518a <_puts_r+0x9a>
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f8c5 	bl	80052b0 <__swsetup_r>
 8005126:	b380      	cbz	r0, 800518a <_puts_r+0x9a>
 8005128:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800512c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800512e:	07da      	lsls	r2, r3, #31
 8005130:	d405      	bmi.n	800513e <_puts_r+0x4e>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	059b      	lsls	r3, r3, #22
 8005136:	d402      	bmi.n	800513e <_puts_r+0x4e>
 8005138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800513a:	f000 f983 	bl	8005444 <__retarget_lock_release_recursive>
 800513e:	4628      	mov	r0, r5
 8005140:	bd70      	pop	{r4, r5, r6, pc}
 8005142:	2b00      	cmp	r3, #0
 8005144:	da04      	bge.n	8005150 <_puts_r+0x60>
 8005146:	69a2      	ldr	r2, [r4, #24]
 8005148:	429a      	cmp	r2, r3
 800514a:	dc17      	bgt.n	800517c <_puts_r+0x8c>
 800514c:	290a      	cmp	r1, #10
 800514e:	d015      	beq.n	800517c <_puts_r+0x8c>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	6022      	str	r2, [r4, #0]
 8005156:	7019      	strb	r1, [r3, #0]
 8005158:	68a3      	ldr	r3, [r4, #8]
 800515a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800515e:	3b01      	subs	r3, #1
 8005160:	60a3      	str	r3, [r4, #8]
 8005162:	2900      	cmp	r1, #0
 8005164:	d1ed      	bne.n	8005142 <_puts_r+0x52>
 8005166:	2b00      	cmp	r3, #0
 8005168:	da11      	bge.n	800518e <_puts_r+0x9e>
 800516a:	4622      	mov	r2, r4
 800516c:	210a      	movs	r1, #10
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f85f 	bl	8005232 <__swbuf_r>
 8005174:	3001      	adds	r0, #1
 8005176:	d0d7      	beq.n	8005128 <_puts_r+0x38>
 8005178:	250a      	movs	r5, #10
 800517a:	e7d7      	b.n	800512c <_puts_r+0x3c>
 800517c:	4622      	mov	r2, r4
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f857 	bl	8005232 <__swbuf_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d1e7      	bne.n	8005158 <_puts_r+0x68>
 8005188:	e7ce      	b.n	8005128 <_puts_r+0x38>
 800518a:	3e01      	subs	r6, #1
 800518c:	e7e4      	b.n	8005158 <_puts_r+0x68>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	6022      	str	r2, [r4, #0]
 8005194:	220a      	movs	r2, #10
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e7ee      	b.n	8005178 <_puts_r+0x88>
	...

0800519c <puts>:
 800519c:	4b02      	ldr	r3, [pc, #8]	@ (80051a8 <puts+0xc>)
 800519e:	4601      	mov	r1, r0
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f7ff bfa5 	b.w	80050f0 <_puts_r>
 80051a6:	bf00      	nop
 80051a8:	20000020 	.word	0x20000020

080051ac <__sread>:
 80051ac:	b510      	push	{r4, lr}
 80051ae:	460c      	mov	r4, r1
 80051b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b4:	f000 f8fc 	bl	80053b0 <_read_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	bfab      	itete	ge
 80051bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051be:	89a3      	ldrhlt	r3, [r4, #12]
 80051c0:	181b      	addge	r3, r3, r0
 80051c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051c6:	bfac      	ite	ge
 80051c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051ca:	81a3      	strhlt	r3, [r4, #12]
 80051cc:	bd10      	pop	{r4, pc}

080051ce <__swrite>:
 80051ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d2:	461f      	mov	r7, r3
 80051d4:	898b      	ldrh	r3, [r1, #12]
 80051d6:	05db      	lsls	r3, r3, #23
 80051d8:	4605      	mov	r5, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	4616      	mov	r6, r2
 80051de:	d505      	bpl.n	80051ec <__swrite+0x1e>
 80051e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e4:	2302      	movs	r3, #2
 80051e6:	2200      	movs	r2, #0
 80051e8:	f000 f8d0 	bl	800538c <_lseek_r>
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f6:	81a3      	strh	r3, [r4, #12]
 80051f8:	4632      	mov	r2, r6
 80051fa:	463b      	mov	r3, r7
 80051fc:	4628      	mov	r0, r5
 80051fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005202:	f000 b8e7 	b.w	80053d4 <_write_r>

08005206 <__sseek>:
 8005206:	b510      	push	{r4, lr}
 8005208:	460c      	mov	r4, r1
 800520a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520e:	f000 f8bd 	bl	800538c <_lseek_r>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	bf15      	itete	ne
 8005218:	6560      	strne	r0, [r4, #84]	@ 0x54
 800521a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800521e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005222:	81a3      	strheq	r3, [r4, #12]
 8005224:	bf18      	it	ne
 8005226:	81a3      	strhne	r3, [r4, #12]
 8005228:	bd10      	pop	{r4, pc}

0800522a <__sclose>:
 800522a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522e:	f000 b89d 	b.w	800536c <_close_r>

08005232 <__swbuf_r>:
 8005232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005234:	460e      	mov	r6, r1
 8005236:	4614      	mov	r4, r2
 8005238:	4605      	mov	r5, r0
 800523a:	b118      	cbz	r0, 8005244 <__swbuf_r+0x12>
 800523c:	6a03      	ldr	r3, [r0, #32]
 800523e:	b90b      	cbnz	r3, 8005244 <__swbuf_r+0x12>
 8005240:	f7ff ff20 	bl	8005084 <__sinit>
 8005244:	69a3      	ldr	r3, [r4, #24]
 8005246:	60a3      	str	r3, [r4, #8]
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	071a      	lsls	r2, r3, #28
 800524c:	d501      	bpl.n	8005252 <__swbuf_r+0x20>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	b943      	cbnz	r3, 8005264 <__swbuf_r+0x32>
 8005252:	4621      	mov	r1, r4
 8005254:	4628      	mov	r0, r5
 8005256:	f000 f82b 	bl	80052b0 <__swsetup_r>
 800525a:	b118      	cbz	r0, 8005264 <__swbuf_r+0x32>
 800525c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005260:	4638      	mov	r0, r7
 8005262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	6922      	ldr	r2, [r4, #16]
 8005268:	1a98      	subs	r0, r3, r2
 800526a:	6963      	ldr	r3, [r4, #20]
 800526c:	b2f6      	uxtb	r6, r6
 800526e:	4283      	cmp	r3, r0
 8005270:	4637      	mov	r7, r6
 8005272:	dc05      	bgt.n	8005280 <__swbuf_r+0x4e>
 8005274:	4621      	mov	r1, r4
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fa62 	bl	8005740 <_fflush_r>
 800527c:	2800      	cmp	r0, #0
 800527e:	d1ed      	bne.n	800525c <__swbuf_r+0x2a>
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	3b01      	subs	r3, #1
 8005284:	60a3      	str	r3, [r4, #8]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	701e      	strb	r6, [r3, #0]
 800528e:	6962      	ldr	r2, [r4, #20]
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	429a      	cmp	r2, r3
 8005294:	d004      	beq.n	80052a0 <__swbuf_r+0x6e>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	07db      	lsls	r3, r3, #31
 800529a:	d5e1      	bpl.n	8005260 <__swbuf_r+0x2e>
 800529c:	2e0a      	cmp	r6, #10
 800529e:	d1df      	bne.n	8005260 <__swbuf_r+0x2e>
 80052a0:	4621      	mov	r1, r4
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 fa4c 	bl	8005740 <_fflush_r>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d0d9      	beq.n	8005260 <__swbuf_r+0x2e>
 80052ac:	e7d6      	b.n	800525c <__swbuf_r+0x2a>
	...

080052b0 <__swsetup_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4b29      	ldr	r3, [pc, #164]	@ (8005358 <__swsetup_r+0xa8>)
 80052b4:	4605      	mov	r5, r0
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	460c      	mov	r4, r1
 80052ba:	b118      	cbz	r0, 80052c4 <__swsetup_r+0x14>
 80052bc:	6a03      	ldr	r3, [r0, #32]
 80052be:	b90b      	cbnz	r3, 80052c4 <__swsetup_r+0x14>
 80052c0:	f7ff fee0 	bl	8005084 <__sinit>
 80052c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052c8:	0719      	lsls	r1, r3, #28
 80052ca:	d422      	bmi.n	8005312 <__swsetup_r+0x62>
 80052cc:	06da      	lsls	r2, r3, #27
 80052ce:	d407      	bmi.n	80052e0 <__swsetup_r+0x30>
 80052d0:	2209      	movs	r2, #9
 80052d2:	602a      	str	r2, [r5, #0]
 80052d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052de:	e033      	b.n	8005348 <__swsetup_r+0x98>
 80052e0:	0758      	lsls	r0, r3, #29
 80052e2:	d512      	bpl.n	800530a <__swsetup_r+0x5a>
 80052e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052e6:	b141      	cbz	r1, 80052fa <__swsetup_r+0x4a>
 80052e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d002      	beq.n	80052f6 <__swsetup_r+0x46>
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 f8a9 	bl	8005448 <_free_r>
 80052f6:	2300      	movs	r3, #0
 80052f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	2300      	movs	r3, #0
 8005304:	6063      	str	r3, [r4, #4]
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	f043 0308 	orr.w	r3, r3, #8
 8005310:	81a3      	strh	r3, [r4, #12]
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	b94b      	cbnz	r3, 800532a <__swsetup_r+0x7a>
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800531c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005320:	d003      	beq.n	800532a <__swsetup_r+0x7a>
 8005322:	4621      	mov	r1, r4
 8005324:	4628      	mov	r0, r5
 8005326:	f000 fa59 	bl	80057dc <__smakebuf_r>
 800532a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532e:	f013 0201 	ands.w	r2, r3, #1
 8005332:	d00a      	beq.n	800534a <__swsetup_r+0x9a>
 8005334:	2200      	movs	r2, #0
 8005336:	60a2      	str	r2, [r4, #8]
 8005338:	6962      	ldr	r2, [r4, #20]
 800533a:	4252      	negs	r2, r2
 800533c:	61a2      	str	r2, [r4, #24]
 800533e:	6922      	ldr	r2, [r4, #16]
 8005340:	b942      	cbnz	r2, 8005354 <__swsetup_r+0xa4>
 8005342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005346:	d1c5      	bne.n	80052d4 <__swsetup_r+0x24>
 8005348:	bd38      	pop	{r3, r4, r5, pc}
 800534a:	0799      	lsls	r1, r3, #30
 800534c:	bf58      	it	pl
 800534e:	6962      	ldrpl	r2, [r4, #20]
 8005350:	60a2      	str	r2, [r4, #8]
 8005352:	e7f4      	b.n	800533e <__swsetup_r+0x8e>
 8005354:	2000      	movs	r0, #0
 8005356:	e7f7      	b.n	8005348 <__swsetup_r+0x98>
 8005358:	20000020 	.word	0x20000020

0800535c <memset>:
 800535c:	4402      	add	r2, r0
 800535e:	4603      	mov	r3, r0
 8005360:	4293      	cmp	r3, r2
 8005362:	d100      	bne.n	8005366 <memset+0xa>
 8005364:	4770      	bx	lr
 8005366:	f803 1b01 	strb.w	r1, [r3], #1
 800536a:	e7f9      	b.n	8005360 <memset+0x4>

0800536c <_close_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d06      	ldr	r5, [pc, #24]	@ (8005388 <_close_r+0x1c>)
 8005370:	2300      	movs	r3, #0
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	602b      	str	r3, [r5, #0]
 8005378:	f7fb fbed 	bl	8000b56 <_close>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_close_r+0x1a>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	b103      	cbz	r3, 8005386 <_close_r+0x1a>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	20012fe4 	.word	0x20012fe4

0800538c <_lseek_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d07      	ldr	r5, [pc, #28]	@ (80053ac <_lseek_r+0x20>)
 8005390:	4604      	mov	r4, r0
 8005392:	4608      	mov	r0, r1
 8005394:	4611      	mov	r1, r2
 8005396:	2200      	movs	r2, #0
 8005398:	602a      	str	r2, [r5, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f7fb fc02 	bl	8000ba4 <_lseek>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_lseek_r+0x1e>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_lseek_r+0x1e>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20012fe4 	.word	0x20012fe4

080053b0 <_read_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	@ (80053d0 <_read_r+0x20>)
 80053b4:	4604      	mov	r4, r0
 80053b6:	4608      	mov	r0, r1
 80053b8:	4611      	mov	r1, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fb fb90 	bl	8000ae4 <_read>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_read_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_read_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	20012fe4 	.word	0x20012fe4

080053d4 <_write_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d07      	ldr	r5, [pc, #28]	@ (80053f4 <_write_r+0x20>)
 80053d8:	4604      	mov	r4, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	602a      	str	r2, [r5, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fb fb9b 	bl	8000b1e <_write>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_write_r+0x1e>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_write_r+0x1e>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	20012fe4 	.word	0x20012fe4

080053f8 <__libc_init_array>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005430 <__libc_init_array+0x38>)
 80053fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005434 <__libc_init_array+0x3c>)
 80053fe:	1b64      	subs	r4, r4, r5
 8005400:	10a4      	asrs	r4, r4, #2
 8005402:	2600      	movs	r6, #0
 8005404:	42a6      	cmp	r6, r4
 8005406:	d109      	bne.n	800541c <__libc_init_array+0x24>
 8005408:	4d0b      	ldr	r5, [pc, #44]	@ (8005438 <__libc_init_array+0x40>)
 800540a:	4c0c      	ldr	r4, [pc, #48]	@ (800543c <__libc_init_array+0x44>)
 800540c:	f000 fa62 	bl	80058d4 <_init>
 8005410:	1b64      	subs	r4, r4, r5
 8005412:	10a4      	asrs	r4, r4, #2
 8005414:	2600      	movs	r6, #0
 8005416:	42a6      	cmp	r6, r4
 8005418:	d105      	bne.n	8005426 <__libc_init_array+0x2e>
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005420:	4798      	blx	r3
 8005422:	3601      	adds	r6, #1
 8005424:	e7ee      	b.n	8005404 <__libc_init_array+0xc>
 8005426:	f855 3b04 	ldr.w	r3, [r5], #4
 800542a:	4798      	blx	r3
 800542c:	3601      	adds	r6, #1
 800542e:	e7f2      	b.n	8005416 <__libc_init_array+0x1e>
 8005430:	08005984 	.word	0x08005984
 8005434:	08005984 	.word	0x08005984
 8005438:	08005984 	.word	0x08005984
 800543c:	08005988 	.word	0x08005988

08005440 <__retarget_lock_init_recursive>:
 8005440:	4770      	bx	lr

08005442 <__retarget_lock_acquire_recursive>:
 8005442:	4770      	bx	lr

08005444 <__retarget_lock_release_recursive>:
 8005444:	4770      	bx	lr
	...

08005448 <_free_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4605      	mov	r5, r0
 800544c:	2900      	cmp	r1, #0
 800544e:	d041      	beq.n	80054d4 <_free_r+0x8c>
 8005450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005454:	1f0c      	subs	r4, r1, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfb8      	it	lt
 800545a:	18e4      	addlt	r4, r4, r3
 800545c:	f000 f8e0 	bl	8005620 <__malloc_lock>
 8005460:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <_free_r+0x90>)
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	b933      	cbnz	r3, 8005474 <_free_r+0x2c>
 8005466:	6063      	str	r3, [r4, #4]
 8005468:	6014      	str	r4, [r2, #0]
 800546a:	4628      	mov	r0, r5
 800546c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005470:	f000 b8dc 	b.w	800562c <__malloc_unlock>
 8005474:	42a3      	cmp	r3, r4
 8005476:	d908      	bls.n	800548a <_free_r+0x42>
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	1821      	adds	r1, r4, r0
 800547c:	428b      	cmp	r3, r1
 800547e:	bf01      	itttt	eq
 8005480:	6819      	ldreq	r1, [r3, #0]
 8005482:	685b      	ldreq	r3, [r3, #4]
 8005484:	1809      	addeq	r1, r1, r0
 8005486:	6021      	streq	r1, [r4, #0]
 8005488:	e7ed      	b.n	8005466 <_free_r+0x1e>
 800548a:	461a      	mov	r2, r3
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b10b      	cbz	r3, 8005494 <_free_r+0x4c>
 8005490:	42a3      	cmp	r3, r4
 8005492:	d9fa      	bls.n	800548a <_free_r+0x42>
 8005494:	6811      	ldr	r1, [r2, #0]
 8005496:	1850      	adds	r0, r2, r1
 8005498:	42a0      	cmp	r0, r4
 800549a:	d10b      	bne.n	80054b4 <_free_r+0x6c>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	4401      	add	r1, r0
 80054a0:	1850      	adds	r0, r2, r1
 80054a2:	4283      	cmp	r3, r0
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	d1e0      	bne.n	800546a <_free_r+0x22>
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	6053      	str	r3, [r2, #4]
 80054ae:	4408      	add	r0, r1
 80054b0:	6010      	str	r0, [r2, #0]
 80054b2:	e7da      	b.n	800546a <_free_r+0x22>
 80054b4:	d902      	bls.n	80054bc <_free_r+0x74>
 80054b6:	230c      	movs	r3, #12
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	e7d6      	b.n	800546a <_free_r+0x22>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	1821      	adds	r1, r4, r0
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf04      	itt	eq
 80054c4:	6819      	ldreq	r1, [r3, #0]
 80054c6:	685b      	ldreq	r3, [r3, #4]
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	bf04      	itt	eq
 80054cc:	1809      	addeq	r1, r1, r0
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	6054      	str	r4, [r2, #4]
 80054d2:	e7ca      	b.n	800546a <_free_r+0x22>
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
 80054d6:	bf00      	nop
 80054d8:	20012ff0 	.word	0x20012ff0

080054dc <sbrk_aligned>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4e0f      	ldr	r6, [pc, #60]	@ (800551c <sbrk_aligned+0x40>)
 80054e0:	460c      	mov	r4, r1
 80054e2:	6831      	ldr	r1, [r6, #0]
 80054e4:	4605      	mov	r5, r0
 80054e6:	b911      	cbnz	r1, 80054ee <sbrk_aligned+0x12>
 80054e8:	f000 f9d6 	bl	8005898 <_sbrk_r>
 80054ec:	6030      	str	r0, [r6, #0]
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f9d1 	bl	8005898 <_sbrk_r>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	d103      	bne.n	8005502 <sbrk_aligned+0x26>
 80054fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80054fe:	4620      	mov	r0, r4
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	1cc4      	adds	r4, r0, #3
 8005504:	f024 0403 	bic.w	r4, r4, #3
 8005508:	42a0      	cmp	r0, r4
 800550a:	d0f8      	beq.n	80054fe <sbrk_aligned+0x22>
 800550c:	1a21      	subs	r1, r4, r0
 800550e:	4628      	mov	r0, r5
 8005510:	f000 f9c2 	bl	8005898 <_sbrk_r>
 8005514:	3001      	adds	r0, #1
 8005516:	d1f2      	bne.n	80054fe <sbrk_aligned+0x22>
 8005518:	e7ef      	b.n	80054fa <sbrk_aligned+0x1e>
 800551a:	bf00      	nop
 800551c:	20012fec 	.word	0x20012fec

08005520 <_malloc_r>:
 8005520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005524:	1ccd      	adds	r5, r1, #3
 8005526:	f025 0503 	bic.w	r5, r5, #3
 800552a:	3508      	adds	r5, #8
 800552c:	2d0c      	cmp	r5, #12
 800552e:	bf38      	it	cc
 8005530:	250c      	movcc	r5, #12
 8005532:	2d00      	cmp	r5, #0
 8005534:	4606      	mov	r6, r0
 8005536:	db01      	blt.n	800553c <_malloc_r+0x1c>
 8005538:	42a9      	cmp	r1, r5
 800553a:	d904      	bls.n	8005546 <_malloc_r+0x26>
 800553c:	230c      	movs	r3, #12
 800553e:	6033      	str	r3, [r6, #0]
 8005540:	2000      	movs	r0, #0
 8005542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800561c <_malloc_r+0xfc>
 800554a:	f000 f869 	bl	8005620 <__malloc_lock>
 800554e:	f8d8 3000 	ldr.w	r3, [r8]
 8005552:	461c      	mov	r4, r3
 8005554:	bb44      	cbnz	r4, 80055a8 <_malloc_r+0x88>
 8005556:	4629      	mov	r1, r5
 8005558:	4630      	mov	r0, r6
 800555a:	f7ff ffbf 	bl	80054dc <sbrk_aligned>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	4604      	mov	r4, r0
 8005562:	d158      	bne.n	8005616 <_malloc_r+0xf6>
 8005564:	f8d8 4000 	ldr.w	r4, [r8]
 8005568:	4627      	mov	r7, r4
 800556a:	2f00      	cmp	r7, #0
 800556c:	d143      	bne.n	80055f6 <_malloc_r+0xd6>
 800556e:	2c00      	cmp	r4, #0
 8005570:	d04b      	beq.n	800560a <_malloc_r+0xea>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	4639      	mov	r1, r7
 8005576:	4630      	mov	r0, r6
 8005578:	eb04 0903 	add.w	r9, r4, r3
 800557c:	f000 f98c 	bl	8005898 <_sbrk_r>
 8005580:	4581      	cmp	r9, r0
 8005582:	d142      	bne.n	800560a <_malloc_r+0xea>
 8005584:	6821      	ldr	r1, [r4, #0]
 8005586:	1a6d      	subs	r5, r5, r1
 8005588:	4629      	mov	r1, r5
 800558a:	4630      	mov	r0, r6
 800558c:	f7ff ffa6 	bl	80054dc <sbrk_aligned>
 8005590:	3001      	adds	r0, #1
 8005592:	d03a      	beq.n	800560a <_malloc_r+0xea>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	442b      	add	r3, r5
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	f8d8 3000 	ldr.w	r3, [r8]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	bb62      	cbnz	r2, 80055fc <_malloc_r+0xdc>
 80055a2:	f8c8 7000 	str.w	r7, [r8]
 80055a6:	e00f      	b.n	80055c8 <_malloc_r+0xa8>
 80055a8:	6822      	ldr	r2, [r4, #0]
 80055aa:	1b52      	subs	r2, r2, r5
 80055ac:	d420      	bmi.n	80055f0 <_malloc_r+0xd0>
 80055ae:	2a0b      	cmp	r2, #11
 80055b0:	d917      	bls.n	80055e2 <_malloc_r+0xc2>
 80055b2:	1961      	adds	r1, r4, r5
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	6025      	str	r5, [r4, #0]
 80055b8:	bf18      	it	ne
 80055ba:	6059      	strne	r1, [r3, #4]
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	bf08      	it	eq
 80055c0:	f8c8 1000 	streq.w	r1, [r8]
 80055c4:	5162      	str	r2, [r4, r5]
 80055c6:	604b      	str	r3, [r1, #4]
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 f82f 	bl	800562c <__malloc_unlock>
 80055ce:	f104 000b 	add.w	r0, r4, #11
 80055d2:	1d23      	adds	r3, r4, #4
 80055d4:	f020 0007 	bic.w	r0, r0, #7
 80055d8:	1ac2      	subs	r2, r0, r3
 80055da:	bf1c      	itt	ne
 80055dc:	1a1b      	subne	r3, r3, r0
 80055de:	50a3      	strne	r3, [r4, r2]
 80055e0:	e7af      	b.n	8005542 <_malloc_r+0x22>
 80055e2:	6862      	ldr	r2, [r4, #4]
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	bf0c      	ite	eq
 80055e8:	f8c8 2000 	streq.w	r2, [r8]
 80055ec:	605a      	strne	r2, [r3, #4]
 80055ee:	e7eb      	b.n	80055c8 <_malloc_r+0xa8>
 80055f0:	4623      	mov	r3, r4
 80055f2:	6864      	ldr	r4, [r4, #4]
 80055f4:	e7ae      	b.n	8005554 <_malloc_r+0x34>
 80055f6:	463c      	mov	r4, r7
 80055f8:	687f      	ldr	r7, [r7, #4]
 80055fa:	e7b6      	b.n	800556a <_malloc_r+0x4a>
 80055fc:	461a      	mov	r2, r3
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	42a3      	cmp	r3, r4
 8005602:	d1fb      	bne.n	80055fc <_malloc_r+0xdc>
 8005604:	2300      	movs	r3, #0
 8005606:	6053      	str	r3, [r2, #4]
 8005608:	e7de      	b.n	80055c8 <_malloc_r+0xa8>
 800560a:	230c      	movs	r3, #12
 800560c:	6033      	str	r3, [r6, #0]
 800560e:	4630      	mov	r0, r6
 8005610:	f000 f80c 	bl	800562c <__malloc_unlock>
 8005614:	e794      	b.n	8005540 <_malloc_r+0x20>
 8005616:	6005      	str	r5, [r0, #0]
 8005618:	e7d6      	b.n	80055c8 <_malloc_r+0xa8>
 800561a:	bf00      	nop
 800561c:	20012ff0 	.word	0x20012ff0

08005620 <__malloc_lock>:
 8005620:	4801      	ldr	r0, [pc, #4]	@ (8005628 <__malloc_lock+0x8>)
 8005622:	f7ff bf0e 	b.w	8005442 <__retarget_lock_acquire_recursive>
 8005626:	bf00      	nop
 8005628:	20012fe8 	.word	0x20012fe8

0800562c <__malloc_unlock>:
 800562c:	4801      	ldr	r0, [pc, #4]	@ (8005634 <__malloc_unlock+0x8>)
 800562e:	f7ff bf09 	b.w	8005444 <__retarget_lock_release_recursive>
 8005632:	bf00      	nop
 8005634:	20012fe8 	.word	0x20012fe8

08005638 <__sflush_r>:
 8005638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005640:	0716      	lsls	r6, r2, #28
 8005642:	4605      	mov	r5, r0
 8005644:	460c      	mov	r4, r1
 8005646:	d454      	bmi.n	80056f2 <__sflush_r+0xba>
 8005648:	684b      	ldr	r3, [r1, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	dc02      	bgt.n	8005654 <__sflush_r+0x1c>
 800564e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	dd48      	ble.n	80056e6 <__sflush_r+0xae>
 8005654:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005656:	2e00      	cmp	r6, #0
 8005658:	d045      	beq.n	80056e6 <__sflush_r+0xae>
 800565a:	2300      	movs	r3, #0
 800565c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005660:	682f      	ldr	r7, [r5, #0]
 8005662:	6a21      	ldr	r1, [r4, #32]
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	d030      	beq.n	80056ca <__sflush_r+0x92>
 8005668:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	0759      	lsls	r1, r3, #29
 800566e:	d505      	bpl.n	800567c <__sflush_r+0x44>
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005676:	b10b      	cbz	r3, 800567c <__sflush_r+0x44>
 8005678:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800567a:	1ad2      	subs	r2, r2, r3
 800567c:	2300      	movs	r3, #0
 800567e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005680:	6a21      	ldr	r1, [r4, #32]
 8005682:	4628      	mov	r0, r5
 8005684:	47b0      	blx	r6
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	d106      	bne.n	800569a <__sflush_r+0x62>
 800568c:	6829      	ldr	r1, [r5, #0]
 800568e:	291d      	cmp	r1, #29
 8005690:	d82b      	bhi.n	80056ea <__sflush_r+0xb2>
 8005692:	4a2a      	ldr	r2, [pc, #168]	@ (800573c <__sflush_r+0x104>)
 8005694:	410a      	asrs	r2, r1
 8005696:	07d6      	lsls	r6, r2, #31
 8005698:	d427      	bmi.n	80056ea <__sflush_r+0xb2>
 800569a:	2200      	movs	r2, #0
 800569c:	6062      	str	r2, [r4, #4]
 800569e:	04d9      	lsls	r1, r3, #19
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	6022      	str	r2, [r4, #0]
 80056a4:	d504      	bpl.n	80056b0 <__sflush_r+0x78>
 80056a6:	1c42      	adds	r2, r0, #1
 80056a8:	d101      	bne.n	80056ae <__sflush_r+0x76>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	b903      	cbnz	r3, 80056b0 <__sflush_r+0x78>
 80056ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80056b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056b2:	602f      	str	r7, [r5, #0]
 80056b4:	b1b9      	cbz	r1, 80056e6 <__sflush_r+0xae>
 80056b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d002      	beq.n	80056c4 <__sflush_r+0x8c>
 80056be:	4628      	mov	r0, r5
 80056c0:	f7ff fec2 	bl	8005448 <_free_r>
 80056c4:	2300      	movs	r3, #0
 80056c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80056c8:	e00d      	b.n	80056e6 <__sflush_r+0xae>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b0      	blx	r6
 80056d0:	4602      	mov	r2, r0
 80056d2:	1c50      	adds	r0, r2, #1
 80056d4:	d1c9      	bne.n	800566a <__sflush_r+0x32>
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0c6      	beq.n	800566a <__sflush_r+0x32>
 80056dc:	2b1d      	cmp	r3, #29
 80056de:	d001      	beq.n	80056e4 <__sflush_r+0xac>
 80056e0:	2b16      	cmp	r3, #22
 80056e2:	d11e      	bne.n	8005722 <__sflush_r+0xea>
 80056e4:	602f      	str	r7, [r5, #0]
 80056e6:	2000      	movs	r0, #0
 80056e8:	e022      	b.n	8005730 <__sflush_r+0xf8>
 80056ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	e01b      	b.n	800572a <__sflush_r+0xf2>
 80056f2:	690f      	ldr	r7, [r1, #16]
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	d0f6      	beq.n	80056e6 <__sflush_r+0xae>
 80056f8:	0793      	lsls	r3, r2, #30
 80056fa:	680e      	ldr	r6, [r1, #0]
 80056fc:	bf08      	it	eq
 80056fe:	694b      	ldreq	r3, [r1, #20]
 8005700:	600f      	str	r7, [r1, #0]
 8005702:	bf18      	it	ne
 8005704:	2300      	movne	r3, #0
 8005706:	eba6 0807 	sub.w	r8, r6, r7
 800570a:	608b      	str	r3, [r1, #8]
 800570c:	f1b8 0f00 	cmp.w	r8, #0
 8005710:	dde9      	ble.n	80056e6 <__sflush_r+0xae>
 8005712:	6a21      	ldr	r1, [r4, #32]
 8005714:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005716:	4643      	mov	r3, r8
 8005718:	463a      	mov	r2, r7
 800571a:	4628      	mov	r0, r5
 800571c:	47b0      	blx	r6
 800571e:	2800      	cmp	r0, #0
 8005720:	dc08      	bgt.n	8005734 <__sflush_r+0xfc>
 8005722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005734:	4407      	add	r7, r0
 8005736:	eba8 0800 	sub.w	r8, r8, r0
 800573a:	e7e7      	b.n	800570c <__sflush_r+0xd4>
 800573c:	dfbffffe 	.word	0xdfbffffe

08005740 <_fflush_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	b913      	cbnz	r3, 8005750 <_fflush_r+0x10>
 800574a:	2500      	movs	r5, #0
 800574c:	4628      	mov	r0, r5
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	b118      	cbz	r0, 800575a <_fflush_r+0x1a>
 8005752:	6a03      	ldr	r3, [r0, #32]
 8005754:	b90b      	cbnz	r3, 800575a <_fflush_r+0x1a>
 8005756:	f7ff fc95 	bl	8005084 <__sinit>
 800575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f3      	beq.n	800574a <_fflush_r+0xa>
 8005762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005764:	07d0      	lsls	r0, r2, #31
 8005766:	d404      	bmi.n	8005772 <_fflush_r+0x32>
 8005768:	0599      	lsls	r1, r3, #22
 800576a:	d402      	bmi.n	8005772 <_fflush_r+0x32>
 800576c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576e:	f7ff fe68 	bl	8005442 <__retarget_lock_acquire_recursive>
 8005772:	4628      	mov	r0, r5
 8005774:	4621      	mov	r1, r4
 8005776:	f7ff ff5f 	bl	8005638 <__sflush_r>
 800577a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800577c:	07da      	lsls	r2, r3, #31
 800577e:	4605      	mov	r5, r0
 8005780:	d4e4      	bmi.n	800574c <_fflush_r+0xc>
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	059b      	lsls	r3, r3, #22
 8005786:	d4e1      	bmi.n	800574c <_fflush_r+0xc>
 8005788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800578a:	f7ff fe5b 	bl	8005444 <__retarget_lock_release_recursive>
 800578e:	e7dd      	b.n	800574c <_fflush_r+0xc>

08005790 <__swhatbuf_r>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	460c      	mov	r4, r1
 8005794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005798:	2900      	cmp	r1, #0
 800579a:	b096      	sub	sp, #88	@ 0x58
 800579c:	4615      	mov	r5, r2
 800579e:	461e      	mov	r6, r3
 80057a0:	da0d      	bge.n	80057be <__swhatbuf_r+0x2e>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057a8:	f04f 0100 	mov.w	r1, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2340      	movne	r3, #64	@ 0x40
 80057b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057b4:	2000      	movs	r0, #0
 80057b6:	6031      	str	r1, [r6, #0]
 80057b8:	602b      	str	r3, [r5, #0]
 80057ba:	b016      	add	sp, #88	@ 0x58
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
 80057be:	466a      	mov	r2, sp
 80057c0:	f000 f848 	bl	8005854 <_fstat_r>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dbec      	blt.n	80057a2 <__swhatbuf_r+0x12>
 80057c8:	9901      	ldr	r1, [sp, #4]
 80057ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057d2:	4259      	negs	r1, r3
 80057d4:	4159      	adcs	r1, r3
 80057d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057da:	e7eb      	b.n	80057b4 <__swhatbuf_r+0x24>

080057dc <__smakebuf_r>:
 80057dc:	898b      	ldrh	r3, [r1, #12]
 80057de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e0:	079d      	lsls	r5, r3, #30
 80057e2:	4606      	mov	r6, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	d507      	bpl.n	80057f8 <__smakebuf_r+0x1c>
 80057e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	2301      	movs	r3, #1
 80057f2:	6163      	str	r3, [r4, #20]
 80057f4:	b003      	add	sp, #12
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f8:	ab01      	add	r3, sp, #4
 80057fa:	466a      	mov	r2, sp
 80057fc:	f7ff ffc8 	bl	8005790 <__swhatbuf_r>
 8005800:	9f00      	ldr	r7, [sp, #0]
 8005802:	4605      	mov	r5, r0
 8005804:	4639      	mov	r1, r7
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff fe8a 	bl	8005520 <_malloc_r>
 800580c:	b948      	cbnz	r0, 8005822 <__smakebuf_r+0x46>
 800580e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005812:	059a      	lsls	r2, r3, #22
 8005814:	d4ee      	bmi.n	80057f4 <__smakebuf_r+0x18>
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	f043 0302 	orr.w	r3, r3, #2
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	e7e2      	b.n	80057e8 <__smakebuf_r+0xc>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	6020      	str	r0, [r4, #0]
 8005826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	9b01      	ldr	r3, [sp, #4]
 800582e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005832:	b15b      	cbz	r3, 800584c <__smakebuf_r+0x70>
 8005834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005838:	4630      	mov	r0, r6
 800583a:	f000 f81d 	bl	8005878 <_isatty_r>
 800583e:	b128      	cbz	r0, 800584c <__smakebuf_r+0x70>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	431d      	orrs	r5, r3
 8005850:	81a5      	strh	r5, [r4, #12]
 8005852:	e7cf      	b.n	80057f4 <__smakebuf_r+0x18>

08005854 <_fstat_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	@ (8005874 <_fstat_r+0x20>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	f7fb f984 	bl	8000b6e <_fstat>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d102      	bne.n	8005870 <_fstat_r+0x1c>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b103      	cbz	r3, 8005870 <_fstat_r+0x1c>
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	bd38      	pop	{r3, r4, r5, pc}
 8005872:	bf00      	nop
 8005874:	20012fe4 	.word	0x20012fe4

08005878 <_isatty_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d06      	ldr	r5, [pc, #24]	@ (8005894 <_isatty_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fb f983 	bl	8000b8e <_isatty>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_isatty_r+0x1a>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_isatty_r+0x1a>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20012fe4 	.word	0x20012fe4

08005898 <_sbrk_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4d06      	ldr	r5, [pc, #24]	@ (80058b4 <_sbrk_r+0x1c>)
 800589c:	2300      	movs	r3, #0
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f000 f808 	bl	80058b8 <_sbrk>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_sbrk_r+0x1a>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_sbrk_r+0x1a>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20012fe4 	.word	0x20012fe4

080058b8 <_sbrk>:
 80058b8:	4a04      	ldr	r2, [pc, #16]	@ (80058cc <_sbrk+0x14>)
 80058ba:	6811      	ldr	r1, [r2, #0]
 80058bc:	4603      	mov	r3, r0
 80058be:	b909      	cbnz	r1, 80058c4 <_sbrk+0xc>
 80058c0:	4903      	ldr	r1, [pc, #12]	@ (80058d0 <_sbrk+0x18>)
 80058c2:	6011      	str	r1, [r2, #0]
 80058c4:	6810      	ldr	r0, [r2, #0]
 80058c6:	4403      	add	r3, r0
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4770      	bx	lr
 80058cc:	20012ff4 	.word	0x20012ff4
 80058d0:	20012ff8 	.word	0x20012ff8

080058d4 <_init>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr

080058e0 <_fini>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr
